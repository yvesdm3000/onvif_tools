/* soapStub.h
   Generated by gSOAP 2.8.60 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20860
# error "GSOAP VERSION 20860 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* wsa5.h:94 */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {
	http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0
};
#endif

/* wsa5.h:102 */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {
	wsa5__InvalidAddressingHeader = 0,
	wsa5__InvalidAddress = 1,
	wsa5__InvalidEPR = 2,
	wsa5__InvalidCardinality = 3,
	wsa5__MissingAddressInEPR = 4,
	wsa5__DuplicateMessageID = 5,
	wsa5__ActionMismatch = 6,
	wsa5__MessageAddressingHeaderRequired = 7,
	wsa5__DestinationUnreachable = 8,
	wsa5__ActionNotSupported = 9,
	wsa5__EndpointUnavailable = 10
};
#endif

/* wsa5.h:252 */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {
	_wsa5__IsReferenceParameter__false = 0,
	_wsa5__IsReferenceParameter__true = 1
};
#endif

/* onvif.h:2338 */
#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (764)
/* tt:RotateMode */
enum class tt__RotateMode {
	OFF = 0,
	ON = 1,
	AUTO = 2
};
#endif

/* onvif.h:2356 */
#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (765)
/* tt:SceneOrientationMode */
enum class tt__SceneOrientationMode {
	MANUAL = 0,
	AUTO = 1
};
#endif

/* onvif.h:2367 */
#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (766)
/* tt:SceneOrientationOption */
enum class tt__SceneOrientationOption {
	Below = 0,
	Horizon = 1,
	Above = 2
};
#endif

/* onvif.h:2379 */
#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (767)
/* tt:ViewModes */
enum class tt__ViewModes {
	tt_x003aFisheye = 0,
	tt_x003a360Panorama = 1,
	tt_x003a180Panorama = 2,
	tt_x003aQuad = 3,
	tt_x003aOriginal = 4,
	tt_x003aLeftHalf = 5,
	tt_x003aRightHalf = 6,
	tt_x003aDewarp = 7
};
#endif

/* onvif.h:2417 */
#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (768)
/* tt:VideoEncoding */
enum class tt__VideoEncoding {
	JPEG = 0,
	MPEG4 = 1,
	H264 = 2
};
#endif

/* onvif.h:2426 */
#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (769)
/* tt:Mpeg4Profile */
enum class tt__Mpeg4Profile {
	SP = 0,
	ASP = 1
};
#endif

/* onvif.h:2434 */
#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (770)
/* tt:H264Profile */
enum class tt__H264Profile {
	Baseline = 0,
	Main = 1,
	Extended = 2,
	High = 3
};
#endif

/* onvif.h:2447 */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (771)
/* tt:VideoEncodingMimeNames */
enum class tt__VideoEncodingMimeNames {
	JPEG = 0,
	MPV4_ES = 1,
	H264 = 2,
	H265 = 3
};
#endif

/* onvif.h:2457 */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (772)
/* tt:VideoEncodingProfiles */
enum class tt__VideoEncodingProfiles {
	Simple = 0,
	AdvancedSimple = 1,
	Baseline = 2,
	Main = 3,
	Main10 = 4,
	Extended = 5,
	High = 6
};
#endif

/* onvif.h:2470 */
#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (773)
/* tt:AudioEncoding */
enum class tt__AudioEncoding {
	G711 = 0,
	G726 = 1,
	AAC = 2
};
#endif

/* onvif.h:2482 */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (774)
/* tt:AudioEncodingMimeNames */
enum class tt__AudioEncodingMimeNames {
	PCMU = 0,
	G726 = 1,
	MP4A_LATM = 2,
	mpeg4_generic = 3
};
#endif

/* onvif.h:2492 */
#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (775)
/* tt:MetadataCompressionType */
enum class tt__MetadataCompressionType {
	None = 0,
	GZIP = 1,
	EXI = 2
};
#endif

/* onvif.h:2501 */
#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (776)
/* tt:StreamType */
enum class tt__StreamType {
	RTP_Unicast = 0,
	RTP_Multicast = 1
};
#endif

/* onvif.h:2509 */
#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (777)
/* tt:TransportProtocol */
enum class tt__TransportProtocol {
	UDP = 0,
	TCP = 1,
	RTSP = 2,
	HTTP = 3
};
#endif

/* onvif.h:2522 */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (778)
/* tt:ScopeDefinition */
enum class tt__ScopeDefinition {
	Fixed = 0,
	Configurable = 1
};
#endif

/* onvif.h:2530 */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (779)
/* tt:DiscoveryMode */
enum class tt__DiscoveryMode {
	Discoverable = 0,
	NonDiscoverable = 1
};
#endif

/* onvif.h:2543 */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (781)
/* tt:Duplex */
enum class tt__Duplex {
	Full = 0,
	Half = 1
};
#endif

/* onvif.h:2558 */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (783)
/* tt:IPv6DHCPConfiguration */
enum class tt__IPv6DHCPConfiguration {
	Auto = 0,
	Stateful = 1,
	Stateless = 2,
	Off = 3
};
#endif

/* onvif.h:2568 */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (784)
/* tt:NetworkProtocolType */
enum class tt__NetworkProtocolType {
	HTTP = 0,
	HTTPS = 1,
	RTSP = 2
};
#endif

/* onvif.h:2577 */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (785)
/* tt:NetworkHostType */
enum class tt__NetworkHostType {
	IPv4 = 0,
	IPv6 = 1,
	DNS = 2
};
#endif

/* onvif.h:2598 */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (789)
/* tt:IPType */
enum class tt__IPType {
	IPv4 = 0,
	IPv6 = 1
};
#endif

/* onvif.h:2614 */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (792)
/* tt:IPAddressFilterType */
enum class tt__IPAddressFilterType {
	Allow = 0,
	Deny = 1
};
#endif

/* onvif.h:2622 */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (793)
/* tt:DynamicDNSType */
enum class tt__DynamicDNSType {
	NoUpdate = 0,
	ClientUpdates = 1,
	ServerUpdates = 2
};
#endif

/* onvif.h:2636 */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (795)
/* tt:Dot11StationMode */
enum class tt__Dot11StationMode {
	Ad_hoc = 0,
	Infrastructure = 1,
	Extended = 2
};
#endif

/* onvif.h:2645 */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (796)
/* tt:Dot11SecurityMode */
enum class tt__Dot11SecurityMode {
	None = 0,
	WEP = 1,
	PSK = 2,
	Dot1X = 3,
	Extended = 4
};
#endif

/* onvif.h:2656 */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (797)
/* tt:Dot11Cipher */
enum class tt__Dot11Cipher {
	CCMP = 0,
	TKIP = 1,
	Any = 2,
	Extended = 3
};
#endif

/* onvif.h:2676 */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (800)
/* tt:Dot11SignalStrength */
enum class tt__Dot11SignalStrength {
	None = 0,
	Very_x0020Bad = 1,
	Bad = 2,
	Good = 3,
	Very_x0020Good = 4,
	Extended = 5
};
#endif

/* onvif.h:2688 */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (801)
/* tt:Dot11AuthAndMangementSuite */
enum class tt__Dot11AuthAndMangementSuite {
	None = 0,
	Dot1X = 1,
	PSK = 2,
	Extended = 3
};
#endif

/* onvif.h:2698 */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (802)
/* tt:CapabilityCategory */
enum class tt__CapabilityCategory {
	All = 0,
	Analytics = 1,
	Device = 2,
	Events = 3,
	Imaging = 4,
	Media = 5,
	PTZ = 6
};
#endif

/* onvif.h:2714 */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (803)
/* tt:SystemLogType */
enum class tt__SystemLogType {
	System = 0,
	Access = 1
};
#endif

/* onvif.h:2731 */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (804)
/* tt:FactoryDefaultType */
enum class tt__FactoryDefaultType {
	Hard = 0,
	Soft = 1
};
#endif

/* onvif.h:2745 */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (805)
/* tt:SetDateTimeType */
enum class tt__SetDateTimeType {
	Manual = 0,
	NTP = 1
};
#endif

/* onvif.h:2759 */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (806)
/* tt:UserLevel */
enum class tt__UserLevel {
	Administrator = 0,
	Operator = 1,
	User = 2,
	Anonymous = 3,
	Extended = 4
};
#endif

/* onvif.h:2770 */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (807)
/* tt:RelayLogicalState */
enum class tt__RelayLogicalState {
	active = 0,
	inactive = 1
};
#endif

/* onvif.h:2778 */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (808)
/* tt:RelayIdleState */
enum class tt__RelayIdleState {
	closed = 0,
	open = 1
};
#endif

/* onvif.h:2786 */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (809)
/* tt:RelayMode */
enum class tt__RelayMode {
	Monostable = 0,
	Bistable = 1
};
#endif

/* onvif.h:2794 */
#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (810)
/* tt:DigitalIdleState */
enum class tt__DigitalIdleState {
	closed = 0,
	open = 1
};
#endif

/* onvif.h:2802 */
#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (811)
/* tt:EFlipMode */
enum class tt__EFlipMode {
	OFF = 0,
	ON = 1,
	Extended = 2
};
#endif

/* onvif.h:2811 */
#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (812)
/* tt:ReverseMode */
enum class tt__ReverseMode {
	OFF = 0,
	ON = 1,
	AUTO = 2,
	Extended = 3
};
#endif

/* onvif.h:2826 */
#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (814)
/* tt:PTZPresetTourState */
enum class tt__PTZPresetTourState {
	Idle = 0,
	Touring = 1,
	Paused = 2,
	Extended = 3
};
#endif

/* onvif.h:2836 */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (815)
/* tt:PTZPresetTourDirection */
enum class tt__PTZPresetTourDirection {
	Forward = 0,
	Backward = 1,
	Extended = 2
};
#endif

/* onvif.h:2845 */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (816)
/* tt:PTZPresetTourOperation */
enum class tt__PTZPresetTourOperation {
	Start = 0,
	Stop = 1,
	Pause = 2,
	Extended = 3
};
#endif

/* onvif.h:2855 */
#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (817)
/* tt:AutoFocusMode */
enum class tt__AutoFocusMode {
	AUTO = 0,
	MANUAL = 1
};
#endif

/* onvif.h:2863 */
#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (818)
/* tt:AFModes */
enum class tt__AFModes {
	OnceAfterMove = 0
};
#endif

/* onvif.h:2873 */
#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (819)
/* tt:WideDynamicMode */
enum class tt__WideDynamicMode {
	OFF = 0,
	ON = 1
};
#endif

/* onvif.h:2884 */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (820)
/* tt:BacklightCompensationMode */
enum class tt__BacklightCompensationMode {
	OFF = 0,
	ON = 1
};
#endif

/* onvif.h:2898 */
#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (821)
/* tt:ExposurePriority */
enum class tt__ExposurePriority {
	LowNoise = 0,
	FrameRate = 1
};
#endif

/* onvif.h:2906 */
#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (822)
/* tt:ExposureMode */
enum class tt__ExposureMode {
	AUTO = 0,
	MANUAL = 1
};
#endif

/* onvif.h:2914 */
#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (823)
/* tt:Enabled */
enum class tt__Enabled {
	ENABLED = 0,
	DISABLED = 1
};
#endif

/* onvif.h:2922 */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (824)
/* tt:WhiteBalanceMode */
enum class tt__WhiteBalanceMode {
	AUTO = 0,
	MANUAL = 1
};
#endif

/* onvif.h:2930 */
#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (825)
/* tt:IrCutFilterMode */
enum class tt__IrCutFilterMode {
	ON = 0,
	OFF = 1,
	AUTO = 2
};
#endif

/* onvif.h:2939 */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (826)
/* tt:ImageStabilizationMode */
enum class tt__ImageStabilizationMode {
	OFF = 0,
	ON = 1,
	AUTO = 2,
	Extended = 3
};
#endif

/* onvif.h:2949 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (827)
/* tt:IrCutFilterAutoBoundaryType */
enum class tt__IrCutFilterAutoBoundaryType {
	Common = 0,
	ToOn = 1,
	ToOff = 2,
	Extended = 3
};
#endif

/* onvif.h:2959 */
#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (828)
/* tt:ToneCompensationMode */
enum class tt__ToneCompensationMode {
	OFF = 0,
	ON = 1,
	AUTO = 2
};
#endif

/* onvif.h:2968 */
#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (829)
/* tt:DefoggingMode */
enum class tt__DefoggingMode {
	OFF = 0,
	ON = 1,
	AUTO = 2
};
#endif

/* onvif.h:2981 */
#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (831)
/* tt:PropertyOperation */
enum class tt__PropertyOperation {
	Initialized = 0,
	Deleted = 1,
	Changed = 2
};
#endif

/* onvif.h:2990 */
#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (832)
/* tt:Direction */
enum class tt__Direction {
	Left = 0,
	Right = 1,
	Any = 2
};
#endif

/* onvif.h:3002 */
#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (833)
/* tt:ReceiverMode */
enum class tt__ReceiverMode {
	AutoConnect = 0,
	AlwaysConnect = 1,
	NeverConnect = 2,
	Unknown = 3
};
#endif

/* onvif.h:3027 */
#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (834)
/* tt:ReceiverState */
enum class tt__ReceiverState {
	NotConnected = 0,
	Connecting = 1,
	Connected = 2,
	Unknown = 3
};
#endif

/* onvif.h:3057 */
#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (837)
/* tt:SearchState */
enum class tt__SearchState {
	Queued = 0,
	Searching = 1,
	Completed = 2,
	Unknown = 3
};
#endif

/* onvif.h:3079 */
#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (838)
/* tt:RecordingStatus */
enum class tt__RecordingStatus {
	Initiated = 0,
	Recording = 1,
	Stopped = 2,
	Removing = 3,
	Removed = 4,
	Unknown = 5
};
#endif

/* onvif.h:3094 */
#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (839)
/* tt:TrackType */
enum class tt__TrackType {
	Video = 0,
	Audio = 1,
	Metadata = 2,
	Extended = 3
};
#endif

/* onvif.h:3115 */
#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (842)
/* tt:ModeOfOperation */
enum class tt__ModeOfOperation {
	Idle = 0,
	Active = 1,
	Unknown = 2
};
#endif

/* onvif.h:3135 */
#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (844)
/* tt:OSDType */
enum class tt__OSDType {
	Text = 0,
	Image = 1,
	Extended = 2
};
#endif

/* onvif.h:3154 */
#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (846)
/* tt:MoveStatus */
enum class tt__MoveStatus {
	IDLE = 0,
	MOVING = 1,
	UNKNOWN = 2
};
#endif

/* onvif.h:3163 */
#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (847)
/* tt:Entity */
enum class tt__Entity {
	Device = 0,
	VideoSource = 1,
	AudioSource = 2
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/duration.h:90 */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (67)
typedef LONG64 xsd__duration;
#endif

/* onvif.h:172 */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (62)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct _xop__Include;	/* xop.h:58 */
struct wsa5__EndpointReferenceType;	/* wsa5.h:63 */
struct wsa5__ReferenceParametersType;	/* wsa5.h:66 */
struct wsa5__MetadataType;	/* wsa5.h:69 */
struct wsa5__ProblemActionType;	/* wsa5.h:84 */
struct wsa5__RelatesToType;	/* wsa5.h:72 */
struct chan__ChannelInstanceType;	/* wsa5.h:258 */
class xsd__anyType;	/* onvif.h:166 */
struct SOAP_ENV__Envelope;	/* onvif.h:169 */
class xsd__base64Binary;	/* onvif.h:175 */
class xsd__hexBinary;	/* onvif.h:185 */
class trt__Capabilities;	/* onvif.h:219 */
class trt__ProfileCapabilities;	/* onvif.h:222 */
class trt__StreamingCapabilities;	/* onvif.h:225 */
class trt__VideoSourceMode;	/* onvif.h:228 */
class trt__VideoSourceModeExtension;	/* onvif.h:231 */
class _trt__GetServiceCapabilities;	/* onvif.h:234 */
class _trt__GetServiceCapabilitiesResponse;	/* onvif.h:237 */
class _trt__GetVideoSources;	/* onvif.h:240 */
class _trt__GetVideoSourcesResponse;	/* onvif.h:243 */
class _trt__GetAudioSources;	/* onvif.h:246 */
class _trt__GetAudioSourcesResponse;	/* onvif.h:249 */
class _trt__GetAudioOutputs;	/* onvif.h:252 */
class _trt__GetAudioOutputsResponse;	/* onvif.h:255 */
class _trt__CreateProfile;	/* onvif.h:258 */
class _trt__CreateProfileResponse;	/* onvif.h:261 */
class _trt__GetProfile;	/* onvif.h:264 */
class _trt__GetProfileResponse;	/* onvif.h:267 */
class _trt__GetProfiles;	/* onvif.h:270 */
class _trt__GetProfilesResponse;	/* onvif.h:273 */
class _trt__AddVideoEncoderConfiguration;	/* onvif.h:276 */
class _trt__AddVideoEncoderConfigurationResponse;	/* onvif.h:279 */
class _trt__RemoveVideoEncoderConfiguration;	/* onvif.h:282 */
class _trt__RemoveVideoEncoderConfigurationResponse;	/* onvif.h:285 */
class _trt__AddVideoSourceConfiguration;	/* onvif.h:288 */
class _trt__AddVideoSourceConfigurationResponse;	/* onvif.h:291 */
class _trt__RemoveVideoSourceConfiguration;	/* onvif.h:294 */
class _trt__RemoveVideoSourceConfigurationResponse;	/* onvif.h:297 */
class _trt__AddAudioEncoderConfiguration;	/* onvif.h:300 */
class _trt__AddAudioEncoderConfigurationResponse;	/* onvif.h:303 */
class _trt__RemoveAudioEncoderConfiguration;	/* onvif.h:306 */
class _trt__RemoveAudioEncoderConfigurationResponse;	/* onvif.h:309 */
class _trt__AddAudioSourceConfiguration;	/* onvif.h:312 */
class _trt__AddAudioSourceConfigurationResponse;	/* onvif.h:315 */
class _trt__RemoveAudioSourceConfiguration;	/* onvif.h:318 */
class _trt__RemoveAudioSourceConfigurationResponse;	/* onvif.h:321 */
class _trt__AddPTZConfiguration;	/* onvif.h:324 */
class _trt__AddPTZConfigurationResponse;	/* onvif.h:327 */
class _trt__RemovePTZConfiguration;	/* onvif.h:330 */
class _trt__RemovePTZConfigurationResponse;	/* onvif.h:333 */
class _trt__AddVideoAnalyticsConfiguration;	/* onvif.h:336 */
class _trt__AddVideoAnalyticsConfigurationResponse;	/* onvif.h:339 */
class _trt__RemoveVideoAnalyticsConfiguration;	/* onvif.h:342 */
class _trt__RemoveVideoAnalyticsConfigurationResponse;	/* onvif.h:345 */
class _trt__AddMetadataConfiguration;	/* onvif.h:348 */
class _trt__AddMetadataConfigurationResponse;	/* onvif.h:351 */
class _trt__RemoveMetadataConfiguration;	/* onvif.h:354 */
class _trt__RemoveMetadataConfigurationResponse;	/* onvif.h:357 */
class _trt__AddAudioOutputConfiguration;	/* onvif.h:360 */
class _trt__AddAudioOutputConfigurationResponse;	/* onvif.h:363 */
class _trt__RemoveAudioOutputConfiguration;	/* onvif.h:366 */
class _trt__RemoveAudioOutputConfigurationResponse;	/* onvif.h:369 */
class _trt__AddAudioDecoderConfiguration;	/* onvif.h:372 */
class _trt__AddAudioDecoderConfigurationResponse;	/* onvif.h:375 */
class _trt__RemoveAudioDecoderConfiguration;	/* onvif.h:378 */
class _trt__RemoveAudioDecoderConfigurationResponse;	/* onvif.h:381 */
class _trt__DeleteProfile;	/* onvif.h:384 */
class _trt__DeleteProfileResponse;	/* onvif.h:387 */
class _trt__GetVideoEncoderConfigurations;	/* onvif.h:390 */
class _trt__GetVideoEncoderConfigurationsResponse;	/* onvif.h:393 */
class _trt__GetVideoSourceConfigurations;	/* onvif.h:396 */
class _trt__GetVideoSourceConfigurationsResponse;	/* onvif.h:399 */
class _trt__GetAudioEncoderConfigurations;	/* onvif.h:402 */
class _trt__GetAudioEncoderConfigurationsResponse;	/* onvif.h:405 */
class _trt__GetAudioSourceConfigurations;	/* onvif.h:408 */
class _trt__GetAudioSourceConfigurationsResponse;	/* onvif.h:411 */
class _trt__GetVideoAnalyticsConfigurations;	/* onvif.h:414 */
class _trt__GetVideoAnalyticsConfigurationsResponse;	/* onvif.h:417 */
class _trt__GetMetadataConfigurations;	/* onvif.h:420 */
class _trt__GetMetadataConfigurationsResponse;	/* onvif.h:423 */
class _trt__GetAudioOutputConfigurations;	/* onvif.h:426 */
class _trt__GetAudioOutputConfigurationsResponse;	/* onvif.h:429 */
class _trt__GetAudioDecoderConfigurations;	/* onvif.h:432 */
class _trt__GetAudioDecoderConfigurationsResponse;	/* onvif.h:435 */
class _trt__GetVideoSourceConfiguration;	/* onvif.h:438 */
class _trt__GetVideoSourceConfigurationResponse;	/* onvif.h:441 */
class _trt__GetVideoEncoderConfiguration;	/* onvif.h:444 */
class _trt__GetVideoEncoderConfigurationResponse;	/* onvif.h:447 */
class _trt__GetAudioSourceConfiguration;	/* onvif.h:450 */
class _trt__GetAudioSourceConfigurationResponse;	/* onvif.h:453 */
class _trt__GetAudioEncoderConfiguration;	/* onvif.h:456 */
class _trt__GetAudioEncoderConfigurationResponse;	/* onvif.h:459 */
class _trt__GetVideoAnalyticsConfiguration;	/* onvif.h:462 */
class _trt__GetVideoAnalyticsConfigurationResponse;	/* onvif.h:465 */
class _trt__GetMetadataConfiguration;	/* onvif.h:468 */
class _trt__GetMetadataConfigurationResponse;	/* onvif.h:471 */
class _trt__GetAudioOutputConfiguration;	/* onvif.h:474 */
class _trt__GetAudioOutputConfigurationResponse;	/* onvif.h:477 */
class _trt__GetAudioDecoderConfiguration;	/* onvif.h:480 */
class _trt__GetAudioDecoderConfigurationResponse;	/* onvif.h:483 */
class _trt__GetCompatibleVideoEncoderConfigurations;	/* onvif.h:486 */
class _trt__GetCompatibleVideoEncoderConfigurationsResponse;	/* onvif.h:489 */
class _trt__GetCompatibleVideoSourceConfigurations;	/* onvif.h:492 */
class _trt__GetCompatibleVideoSourceConfigurationsResponse;	/* onvif.h:495 */
class _trt__GetCompatibleAudioEncoderConfigurations;	/* onvif.h:498 */
class _trt__GetCompatibleAudioEncoderConfigurationsResponse;	/* onvif.h:501 */
class _trt__GetCompatibleAudioSourceConfigurations;	/* onvif.h:504 */
class _trt__GetCompatibleAudioSourceConfigurationsResponse;	/* onvif.h:507 */
class _trt__GetCompatibleVideoAnalyticsConfigurations;	/* onvif.h:510 */
class _trt__GetCompatibleVideoAnalyticsConfigurationsResponse;	/* onvif.h:513 */
class _trt__GetCompatibleMetadataConfigurations;	/* onvif.h:516 */
class _trt__GetCompatibleMetadataConfigurationsResponse;	/* onvif.h:519 */
class _trt__GetCompatibleAudioOutputConfigurations;	/* onvif.h:522 */
class _trt__GetCompatibleAudioOutputConfigurationsResponse;	/* onvif.h:525 */
class _trt__GetCompatibleAudioDecoderConfigurations;	/* onvif.h:528 */
class _trt__GetCompatibleAudioDecoderConfigurationsResponse;	/* onvif.h:531 */
class _trt__SetVideoEncoderConfiguration;	/* onvif.h:534 */
class _trt__SetVideoEncoderConfigurationResponse;	/* onvif.h:537 */
class _trt__SetVideoSourceConfiguration;	/* onvif.h:540 */
class _trt__SetVideoSourceConfigurationResponse;	/* onvif.h:543 */
class _trt__SetAudioEncoderConfiguration;	/* onvif.h:546 */
class _trt__SetAudioEncoderConfigurationResponse;	/* onvif.h:549 */
class _trt__SetAudioSourceConfiguration;	/* onvif.h:552 */
class _trt__SetAudioSourceConfigurationResponse;	/* onvif.h:555 */
class _trt__SetVideoAnalyticsConfiguration;	/* onvif.h:558 */
class _trt__SetVideoAnalyticsConfigurationResponse;	/* onvif.h:561 */
class _trt__SetMetadataConfiguration;	/* onvif.h:564 */
class _trt__SetMetadataConfigurationResponse;	/* onvif.h:567 */
class _trt__SetAudioOutputConfiguration;	/* onvif.h:570 */
class _trt__SetAudioOutputConfigurationResponse;	/* onvif.h:573 */
class _trt__SetAudioDecoderConfiguration;	/* onvif.h:576 */
class _trt__SetAudioDecoderConfigurationResponse;	/* onvif.h:579 */
class _trt__GetVideoSourceConfigurationOptions;	/* onvif.h:582 */
class _trt__GetVideoSourceConfigurationOptionsResponse;	/* onvif.h:585 */
class _trt__GetVideoEncoderConfigurationOptions;	/* onvif.h:588 */
class _trt__GetVideoEncoderConfigurationOptionsResponse;	/* onvif.h:591 */
class _trt__GetAudioSourceConfigurationOptions;	/* onvif.h:594 */
class _trt__GetAudioSourceConfigurationOptionsResponse;	/* onvif.h:597 */
class _trt__GetAudioEncoderConfigurationOptions;	/* onvif.h:600 */
class _trt__GetAudioEncoderConfigurationOptionsResponse;	/* onvif.h:603 */
class _trt__GetMetadataConfigurationOptions;	/* onvif.h:606 */
class _trt__GetMetadataConfigurationOptionsResponse;	/* onvif.h:609 */
class _trt__GetAudioOutputConfigurationOptions;	/* onvif.h:612 */
class _trt__GetAudioOutputConfigurationOptionsResponse;	/* onvif.h:615 */
class _trt__GetAudioDecoderConfigurationOptions;	/* onvif.h:618 */
class _trt__GetAudioDecoderConfigurationOptionsResponse;	/* onvif.h:621 */
class _trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* onvif.h:624 */
class _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse;	/* onvif.h:627 */
class _trt__GetStreamUri;	/* onvif.h:630 */
class _trt__GetStreamUriResponse;	/* onvif.h:633 */
class _trt__StartMulticastStreaming;	/* onvif.h:636 */
class _trt__StartMulticastStreamingResponse;	/* onvif.h:639 */
class _trt__StopMulticastStreaming;	/* onvif.h:642 */
class _trt__StopMulticastStreamingResponse;	/* onvif.h:645 */
class _trt__SetSynchronizationPoint;	/* onvif.h:648 */
class _trt__SetSynchronizationPointResponse;	/* onvif.h:651 */
class _trt__GetSnapshotUri;	/* onvif.h:654 */
class _trt__GetSnapshotUriResponse;	/* onvif.h:657 */
class _trt__GetVideoSourceModes;	/* onvif.h:660 */
class _trt__GetVideoSourceModesResponse;	/* onvif.h:663 */
class _trt__SetVideoSourceMode;	/* onvif.h:666 */
class _trt__SetVideoSourceModeResponse;	/* onvif.h:669 */
class _trt__GetOSDs;	/* onvif.h:672 */
class _trt__GetOSDsResponse;	/* onvif.h:675 */
class _trt__GetOSD;	/* onvif.h:678 */
class _trt__GetOSDResponse;	/* onvif.h:681 */
class _trt__SetOSD;	/* onvif.h:684 */
class _trt__SetOSDResponse;	/* onvif.h:687 */
class _trt__GetOSDOptions;	/* onvif.h:690 */
class _trt__GetOSDOptionsResponse;	/* onvif.h:693 */
class _trt__CreateOSD;	/* onvif.h:696 */
class _trt__CreateOSDResponse;	/* onvif.h:699 */
class _trt__DeleteOSD;	/* onvif.h:702 */
class _trt__DeleteOSDResponse;	/* onvif.h:705 */
class tt__DeviceEntity;	/* onvif.h:708 */
class tt__IntRectangle;	/* onvif.h:711 */
class tt__IntRectangleRange;	/* onvif.h:714 */
class tt__FloatRange;	/* onvif.h:717 */
class tt__DurationRange;	/* onvif.h:720 */
class tt__IntList;	/* onvif.h:723 */
class tt__FloatList;	/* onvif.h:726 */
class tt__AnyHolder;	/* onvif.h:729 */
class tt__VideoSourceExtension;	/* onvif.h:735 */
class tt__VideoSourceExtension2;	/* onvif.h:738 */
class tt__Profile;	/* onvif.h:744 */
class tt__ProfileExtension;	/* onvif.h:747 */
class tt__ProfileExtension2;	/* onvif.h:750 */
class tt__ConfigurationEntity;	/* onvif.h:753 */
class tt__VideoSourceConfigurationExtension;	/* onvif.h:759 */
class tt__VideoSourceConfigurationExtension2;	/* onvif.h:762 */
class tt__Rotate;	/* onvif.h:765 */
class tt__RotateExtension;	/* onvif.h:768 */
class tt__LensProjection;	/* onvif.h:771 */
class tt__LensOffset;	/* onvif.h:774 */
class tt__LensDescription;	/* onvif.h:777 */
class tt__VideoSourceConfigurationOptions;	/* onvif.h:780 */
class tt__VideoSourceConfigurationOptionsExtension;	/* onvif.h:783 */
class tt__VideoSourceConfigurationOptionsExtension2;	/* onvif.h:786 */
class tt__RotateOptions;	/* onvif.h:789 */
class tt__RotateOptionsExtension;	/* onvif.h:792 */
class tt__SceneOrientation;	/* onvif.h:795 */
class tt__VideoResolution;	/* onvif.h:801 */
class tt__VideoRateControl;	/* onvif.h:804 */
class tt__Mpeg4Configuration;	/* onvif.h:807 */
class tt__H264Configuration;	/* onvif.h:810 */
class tt__VideoEncoderConfigurationOptions;	/* onvif.h:813 */
class tt__VideoEncoderOptionsExtension;	/* onvif.h:816 */
class tt__VideoEncoderOptionsExtension2;	/* onvif.h:819 */
class tt__JpegOptions;	/* onvif.h:822 */
class tt__Mpeg4Options;	/* onvif.h:828 */
class tt__H264Options;	/* onvif.h:834 */
class tt__VideoResolution2;	/* onvif.h:843 */
class tt__VideoRateControl2;	/* onvif.h:846 */
class tt__VideoEncoder2ConfigurationOptions;	/* onvif.h:849 */
class tt__AudioSourceConfigurationOptions;	/* onvif.h:855 */
class tt__AudioSourceOptionsExtension;	/* onvif.h:858 */
class tt__AudioEncoderConfigurationOptions;	/* onvif.h:864 */
class tt__AudioEncoderConfigurationOption;	/* onvif.h:867 */
class tt__AudioEncoder2ConfigurationOptions;	/* onvif.h:873 */
class tt__MetadataConfigurationExtension;	/* onvif.h:882 */
class tt__PTZFilter;	/* onvif.h:885 */
class _tt__EventSubscription_SubscriptionPolicy;	/* onvif.h:8848 */
class tt__EventSubscription;	/* onvif.h:888 */
class tt__MetadataConfigurationOptions;	/* onvif.h:891 */
class tt__MetadataConfigurationOptionsExtension;	/* onvif.h:894 */
class tt__MetadataConfigurationOptionsExtension2;	/* onvif.h:897 */
class tt__PTZStatusFilterOptions;	/* onvif.h:900 */
class tt__PTZStatusFilterOptionsExtension;	/* onvif.h:903 */
class tt__VideoOutputExtension;	/* onvif.h:909 */
class tt__VideoOutputConfigurationOptions;	/* onvif.h:915 */
class tt__VideoDecoderConfigurationOptions;	/* onvif.h:918 */
class tt__H264DecOptions;	/* onvif.h:921 */
class tt__JpegDecOptions;	/* onvif.h:924 */
class tt__Mpeg4DecOptions;	/* onvif.h:927 */
class tt__VideoDecoderConfigurationOptionsExtension;	/* onvif.h:930 */
class tt__AudioOutputConfigurationOptions;	/* onvif.h:939 */
class tt__AudioDecoderConfigurationOptions;	/* onvif.h:945 */
class tt__G711DecOptions;	/* onvif.h:948 */
class tt__AACDecOptions;	/* onvif.h:951 */
class tt__G726DecOptions;	/* onvif.h:954 */
class tt__AudioDecoderConfigurationOptionsExtension;	/* onvif.h:957 */
class tt__MulticastConfiguration;	/* onvif.h:960 */
class tt__StreamSetup;	/* onvif.h:963 */
class tt__Transport;	/* onvif.h:966 */
class tt__MediaUri;	/* onvif.h:969 */
class tt__Scope;	/* onvif.h:972 */
class tt__NetworkInterfaceExtension;	/* onvif.h:978 */
class tt__Dot3Configuration;	/* onvif.h:981 */
class tt__NetworkInterfaceExtension2;	/* onvif.h:984 */
class tt__NetworkInterfaceLink;	/* onvif.h:987 */
class tt__NetworkInterfaceConnectionSetting;	/* onvif.h:990 */
class tt__NetworkInterfaceInfo;	/* onvif.h:993 */
class tt__IPv6NetworkInterface;	/* onvif.h:996 */
class tt__IPv4NetworkInterface;	/* onvif.h:999 */
class tt__IPv4Configuration;	/* onvif.h:1002 */
class tt__IPv6Configuration;	/* onvif.h:1005 */
class tt__IPv6ConfigurationExtension;	/* onvif.h:1008 */
class tt__NetworkProtocol;	/* onvif.h:1011 */
class tt__NetworkProtocolExtension;	/* onvif.h:1014 */
class tt__NetworkHost;	/* onvif.h:1017 */
class tt__NetworkHostExtension;	/* onvif.h:1020 */
class tt__IPAddress;	/* onvif.h:1023 */
class tt__PrefixedIPv4Address;	/* onvif.h:1026 */
class tt__PrefixedIPv6Address;	/* onvif.h:1029 */
class tt__HostnameInformation;	/* onvif.h:1032 */
class tt__HostnameInformationExtension;	/* onvif.h:1035 */
class tt__DNSInformation;	/* onvif.h:1038 */
class tt__DNSInformationExtension;	/* onvif.h:1041 */
class tt__NTPInformation;	/* onvif.h:1044 */
class tt__NTPInformationExtension;	/* onvif.h:1047 */
class tt__DynamicDNSInformation;	/* onvif.h:1050 */
class tt__DynamicDNSInformationExtension;	/* onvif.h:1053 */
class tt__NetworkInterfaceSetConfiguration;	/* onvif.h:1056 */
class tt__NetworkInterfaceSetConfigurationExtension;	/* onvif.h:1059 */
class tt__IPv6NetworkInterfaceSetConfiguration;	/* onvif.h:1062 */
class tt__IPv4NetworkInterfaceSetConfiguration;	/* onvif.h:1065 */
class tt__NetworkGateway;	/* onvif.h:1068 */
class tt__NetworkZeroConfiguration;	/* onvif.h:1071 */
class tt__NetworkZeroConfigurationExtension;	/* onvif.h:1074 */
class tt__NetworkZeroConfigurationExtension2;	/* onvif.h:1077 */
class tt__IPAddressFilter;	/* onvif.h:1080 */
class tt__IPAddressFilterExtension;	/* onvif.h:1083 */
class tt__Dot11Configuration;	/* onvif.h:1086 */
class tt__Dot11SecurityConfiguration;	/* onvif.h:1089 */
class tt__Dot11SecurityConfigurationExtension;	/* onvif.h:1092 */
class tt__Dot11PSKSet;	/* onvif.h:1095 */
class tt__Dot11PSKSetExtension;	/* onvif.h:1098 */
class tt__NetworkInterfaceSetConfigurationExtension2;	/* onvif.h:1101 */
class tt__Dot11Capabilities;	/* onvif.h:1104 */
class tt__Dot11Status;	/* onvif.h:1107 */
class tt__Dot11AvailableNetworks;	/* onvif.h:1110 */
class tt__Dot11AvailableNetworksExtension;	/* onvif.h:1113 */
class tt__Capabilities;	/* onvif.h:1116 */
class tt__CapabilitiesExtension;	/* onvif.h:1119 */
class tt__CapabilitiesExtension2;	/* onvif.h:1122 */
class tt__AnalyticsCapabilities;	/* onvif.h:1125 */
class tt__DeviceCapabilities;	/* onvif.h:1128 */
class tt__DeviceCapabilitiesExtension;	/* onvif.h:1131 */
class tt__EventCapabilities;	/* onvif.h:1134 */
class tt__IOCapabilities;	/* onvif.h:1137 */
class tt__IOCapabilitiesExtension;	/* onvif.h:1140 */
class tt__IOCapabilitiesExtension2;	/* onvif.h:1143 */
class tt__MediaCapabilities;	/* onvif.h:1146 */
class tt__MediaCapabilitiesExtension;	/* onvif.h:1149 */
class tt__RealTimeStreamingCapabilities;	/* onvif.h:1152 */
class tt__RealTimeStreamingCapabilitiesExtension;	/* onvif.h:1155 */
class tt__ProfileCapabilities;	/* onvif.h:1158 */
class tt__NetworkCapabilities;	/* onvif.h:1161 */
class tt__NetworkCapabilitiesExtension;	/* onvif.h:1164 */
class tt__NetworkCapabilitiesExtension2;	/* onvif.h:1167 */
class tt__SecurityCapabilities;	/* onvif.h:1170 */
class tt__SecurityCapabilitiesExtension;	/* onvif.h:1173 */
class tt__SecurityCapabilitiesExtension2;	/* onvif.h:1176 */
class tt__SystemCapabilities;	/* onvif.h:1179 */
class tt__SystemCapabilitiesExtension;	/* onvif.h:1182 */
class tt__SystemCapabilitiesExtension2;	/* onvif.h:1185 */
class tt__OnvifVersion;	/* onvif.h:1188 */
class tt__ImagingCapabilities;	/* onvif.h:1191 */
class tt__PTZCapabilities;	/* onvif.h:1194 */
class tt__DeviceIOCapabilities;	/* onvif.h:1197 */
class tt__DisplayCapabilities;	/* onvif.h:1200 */
class tt__RecordingCapabilities;	/* onvif.h:1203 */
class tt__SearchCapabilities;	/* onvif.h:1206 */
class tt__ReplayCapabilities;	/* onvif.h:1209 */
class tt__ReceiverCapabilities;	/* onvif.h:1212 */
class tt__AnalyticsDeviceCapabilities;	/* onvif.h:1215 */
class tt__AnalyticsDeviceExtension;	/* onvif.h:1218 */
class tt__SystemLog;	/* onvif.h:1221 */
class tt__SupportInformation;	/* onvif.h:1224 */
class tt__BinaryData;	/* onvif.h:1227 */
class tt__AttachmentData;	/* onvif.h:1230 */
class tt__BackupFile;	/* onvif.h:1233 */
class tt__SystemLogUriList;	/* onvif.h:1236 */
class tt__SystemLogUri;	/* onvif.h:1239 */
class tt__SystemDateTime;	/* onvif.h:1242 */
class tt__SystemDateTimeExtension;	/* onvif.h:1245 */
class tt__DateTime;	/* onvif.h:1248 */
class tt__Date;	/* onvif.h:1251 */
class tt__Time;	/* onvif.h:1254 */
class tt__TimeZone;	/* onvif.h:1257 */
class tt__RemoteUser;	/* onvif.h:1260 */
class tt__User;	/* onvif.h:1263 */
class tt__UserExtension;	/* onvif.h:1266 */
class tt__CertificateGenerationParameters;	/* onvif.h:1269 */
class tt__CertificateGenerationParametersExtension;	/* onvif.h:1272 */
class tt__Certificate;	/* onvif.h:1275 */
class tt__CertificateStatus;	/* onvif.h:1278 */
class tt__CertificateWithPrivateKey;	/* onvif.h:1281 */
class tt__CertificateInformation;	/* onvif.h:1284 */
class tt__CertificateInformationExtension;	/* onvif.h:1290 */
class tt__Dot1XConfiguration;	/* onvif.h:1293 */
class tt__Dot1XConfigurationExtension;	/* onvif.h:1296 */
class tt__EAPMethodConfiguration;	/* onvif.h:1299 */
class tt__EapMethodExtension;	/* onvif.h:1302 */
class tt__TLSConfiguration;	/* onvif.h:1305 */
class tt__GenericEapPwdConfigurationExtension;	/* onvif.h:1308 */
class tt__RelayOutputSettings;	/* onvif.h:1311 */
class tt__PTZNodeExtension;	/* onvif.h:1323 */
class tt__PTZNodeExtension2;	/* onvif.h:1326 */
class tt__PTZPresetTourSupported;	/* onvif.h:1329 */
class tt__PTZPresetTourSupportedExtension;	/* onvif.h:1332 */
class tt__PTZConfigurationExtension;	/* onvif.h:1338 */
class tt__PTZConfigurationExtension2;	/* onvif.h:1341 */
class tt__PTControlDirection;	/* onvif.h:1344 */
class tt__PTControlDirectionExtension;	/* onvif.h:1347 */
class tt__EFlip;	/* onvif.h:1350 */
class tt__Reverse;	/* onvif.h:1353 */
class tt__PTZConfigurationOptions;	/* onvif.h:1356 */
class tt__PTZConfigurationOptions2;	/* onvif.h:1359 */
class tt__PTControlDirectionOptions;	/* onvif.h:1362 */
class tt__PTControlDirectionOptionsExtension;	/* onvif.h:1365 */
class tt__EFlipOptions;	/* onvif.h:1368 */
class tt__EFlipOptionsExtension;	/* onvif.h:1371 */
class tt__ReverseOptions;	/* onvif.h:1374 */
class tt__ReverseOptionsExtension;	/* onvif.h:1377 */
class tt__PanTiltLimits;	/* onvif.h:1380 */
class tt__ZoomLimits;	/* onvif.h:1383 */
class tt__PTZSpaces;	/* onvif.h:1386 */
class tt__PTZSpacesExtension;	/* onvif.h:1389 */
class tt__Space2DDescription;	/* onvif.h:1392 */
class tt__Space1DDescription;	/* onvif.h:1395 */
class tt__PTZSpeed;	/* onvif.h:1398 */
class tt__PTZPreset;	/* onvif.h:1401 */
class tt__PresetTour;	/* onvif.h:1404 */
class tt__PTZPresetTourExtension;	/* onvif.h:1407 */
class tt__PTZPresetTourSpot;	/* onvif.h:1410 */
class tt__PTZPresetTourSpotExtension;	/* onvif.h:1413 */
union _tt__union_PTZPresetTourPresetDetail;	/* onvif.h:14530 */
class tt__PTZPresetTourPresetDetail;	/* onvif.h:1416 */
class tt__PTZPresetTourTypeExtension;	/* onvif.h:1419 */
class tt__PTZPresetTourStatus;	/* onvif.h:1422 */
class tt__PTZPresetTourStatusExtension;	/* onvif.h:1425 */
class tt__PTZPresetTourStartingCondition;	/* onvif.h:1428 */
class tt__PTZPresetTourStartingConditionExtension;	/* onvif.h:1431 */
class tt__PTZPresetTourOptions;	/* onvif.h:1434 */
class tt__PTZPresetTourSpotOptions;	/* onvif.h:1437 */
class tt__PTZPresetTourPresetDetailOptions;	/* onvif.h:1440 */
class tt__PTZPresetTourPresetDetailOptionsExtension;	/* onvif.h:1443 */
class tt__PTZPresetTourStartingConditionOptions;	/* onvif.h:1446 */
class tt__PTZPresetTourStartingConditionOptionsExtension;	/* onvif.h:1449 */
class tt__ImagingStatus;	/* onvif.h:1452 */
class tt__FocusStatus;	/* onvif.h:1455 */
class tt__FocusConfiguration;	/* onvif.h:1458 */
class tt__ImagingSettings;	/* onvif.h:1461 */
class tt__ImagingSettingsExtension;	/* onvif.h:1464 */
class tt__Exposure;	/* onvif.h:1467 */
class tt__WideDynamicRange;	/* onvif.h:1470 */
class tt__BacklightCompensation;	/* onvif.h:1473 */
class tt__ImagingOptions;	/* onvif.h:1476 */
class tt__WideDynamicRangeOptions;	/* onvif.h:1479 */
class tt__BacklightCompensationOptions;	/* onvif.h:1482 */
class tt__FocusOptions;	/* onvif.h:1485 */
class tt__ExposureOptions;	/* onvif.h:1488 */
class tt__WhiteBalanceOptions;	/* onvif.h:1491 */
class tt__FocusMove;	/* onvif.h:1494 */
class tt__AbsoluteFocus;	/* onvif.h:1497 */
class tt__RelativeFocus;	/* onvif.h:1500 */
class tt__ContinuousFocus;	/* onvif.h:1503 */
class tt__MoveOptions;	/* onvif.h:1506 */
class tt__AbsoluteFocusOptions;	/* onvif.h:1509 */
class tt__RelativeFocusOptions;	/* onvif.h:1512 */
class tt__ContinuousFocusOptions;	/* onvif.h:1515 */
class tt__WhiteBalance;	/* onvif.h:1518 */
class tt__ImagingStatus20;	/* onvif.h:1521 */
class tt__ImagingStatus20Extension;	/* onvif.h:1524 */
class tt__FocusStatus20;	/* onvif.h:1527 */
class tt__FocusStatus20Extension;	/* onvif.h:1530 */
class tt__ImagingSettings20;	/* onvif.h:1533 */
class tt__ImagingSettingsExtension20;	/* onvif.h:1536 */
class tt__ImagingSettingsExtension202;	/* onvif.h:1539 */
class tt__ImagingSettingsExtension203;	/* onvif.h:1542 */
class tt__ImagingSettingsExtension204;	/* onvif.h:1545 */
class tt__ImageStabilization;	/* onvif.h:1548 */
class tt__ImageStabilizationExtension;	/* onvif.h:1551 */
class tt__IrCutFilterAutoAdjustment;	/* onvif.h:1554 */
class tt__IrCutFilterAutoAdjustmentExtension;	/* onvif.h:1557 */
class tt__WideDynamicRange20;	/* onvif.h:1560 */
class tt__BacklightCompensation20;	/* onvif.h:1563 */
class tt__Exposure20;	/* onvif.h:1566 */
class tt__ToneCompensation;	/* onvif.h:1569 */
class tt__ToneCompensationExtension;	/* onvif.h:1572 */
class tt__Defogging;	/* onvif.h:1575 */
class tt__DefoggingExtension;	/* onvif.h:1578 */
class tt__NoiseReduction;	/* onvif.h:1581 */
class tt__ImagingOptions20;	/* onvif.h:1584 */
class tt__ImagingOptions20Extension;	/* onvif.h:1587 */
class tt__ImagingOptions20Extension2;	/* onvif.h:1590 */
class tt__ImagingOptions20Extension3;	/* onvif.h:1593 */
class tt__ImagingOptions20Extension4;	/* onvif.h:1596 */
class tt__ImageStabilizationOptions;	/* onvif.h:1599 */
class tt__ImageStabilizationOptionsExtension;	/* onvif.h:1602 */
class tt__IrCutFilterAutoAdjustmentOptions;	/* onvif.h:1605 */
class tt__IrCutFilterAutoAdjustmentOptionsExtension;	/* onvif.h:1608 */
class tt__WideDynamicRangeOptions20;	/* onvif.h:1611 */
class tt__BacklightCompensationOptions20;	/* onvif.h:1614 */
class tt__ExposureOptions20;	/* onvif.h:1617 */
class tt__MoveOptions20;	/* onvif.h:1620 */
class tt__RelativeFocusOptions20;	/* onvif.h:1623 */
class tt__WhiteBalance20;	/* onvif.h:1626 */
class tt__WhiteBalance20Extension;	/* onvif.h:1629 */
class tt__FocusConfiguration20;	/* onvif.h:1632 */
class tt__FocusConfiguration20Extension;	/* onvif.h:1635 */
class tt__WhiteBalanceOptions20;	/* onvif.h:1638 */
class tt__WhiteBalanceOptions20Extension;	/* onvif.h:1641 */
class tt__FocusOptions20;	/* onvif.h:1644 */
class tt__FocusOptions20Extension;	/* onvif.h:1647 */
class tt__ToneCompensationOptions;	/* onvif.h:1650 */
class tt__DefoggingOptions;	/* onvif.h:1653 */
class tt__NoiseReductionOptions;	/* onvif.h:1656 */
class tt__MessageExtension;	/* onvif.h:1659 */
class _tt__ItemList_SimpleItem;	/* onvif.h:17403 */
class _tt__ItemList_ElementItem;	/* onvif.h:17431 */
class tt__ItemList;	/* onvif.h:1662 */
class tt__ItemListExtension;	/* onvif.h:1665 */
class tt__MessageDescription;	/* onvif.h:1668 */
class tt__MessageDescriptionExtension;	/* onvif.h:1671 */
class _tt__ItemListDescription_SimpleItemDescription;	/* onvif.h:17589 */
class _tt__ItemListDescription_ElementItemDescription;	/* onvif.h:17614 */
class tt__ItemListDescription;	/* onvif.h:1674 */
class tt__ItemListDescriptionExtension;	/* onvif.h:1677 */
class tt__Polyline;	/* onvif.h:1680 */
class tt__AnalyticsEngineConfiguration;	/* onvif.h:1683 */
class tt__AnalyticsEngineConfigurationExtension;	/* onvif.h:1686 */
class tt__RuleEngineConfiguration;	/* onvif.h:1689 */
class tt__RuleEngineConfigurationExtension;	/* onvif.h:1692 */
class tt__Config;	/* onvif.h:1695 */
class _tt__ConfigDescription_Messages;	/* onvif.h:17857 */
class tt__ConfigDescription;	/* onvif.h:1698 */
class tt__ConfigDescriptionExtension;	/* onvif.h:1701 */
class tt__SupportedRules;	/* onvif.h:1704 */
class tt__SupportedRulesExtension;	/* onvif.h:1707 */
class tt__SupportedAnalyticsModules;	/* onvif.h:1710 */
class tt__SupportedAnalyticsModulesExtension;	/* onvif.h:1713 */
class tt__PolygonConfiguration;	/* onvif.h:1716 */
class tt__PolylineArray;	/* onvif.h:1719 */
class tt__PolylineArrayExtension;	/* onvif.h:1722 */
class tt__PolylineArrayConfiguration;	/* onvif.h:1725 */
class tt__MotionExpression;	/* onvif.h:1728 */
class tt__MotionExpressionConfiguration;	/* onvif.h:1731 */
class tt__CellLayout;	/* onvif.h:1734 */
class tt__PaneConfiguration;	/* onvif.h:1737 */
class tt__PaneLayout;	/* onvif.h:1740 */
class tt__Layout;	/* onvif.h:1743 */
class tt__LayoutExtension;	/* onvif.h:1746 */
class tt__CodingCapabilities;	/* onvif.h:1749 */
class tt__LayoutOptions;	/* onvif.h:1752 */
class tt__LayoutOptionsExtension;	/* onvif.h:1755 */
class tt__PaneLayoutOptions;	/* onvif.h:1758 */
class tt__PaneOptionExtension;	/* onvif.h:1761 */
class tt__Receiver;	/* onvif.h:1764 */
class tt__ReceiverConfiguration;	/* onvif.h:1767 */
class tt__ReceiverStateInformation;	/* onvif.h:1770 */
class tt__SourceReference;	/* onvif.h:1773 */
class tt__DateTimeRange;	/* onvif.h:1776 */
class tt__RecordingSummary;	/* onvif.h:1779 */
class tt__SearchScope;	/* onvif.h:1782 */
class tt__SearchScopeExtension;	/* onvif.h:1785 */
class tt__PTZPositionFilter;	/* onvif.h:1791 */
class tt__MetadataFilter;	/* onvif.h:1794 */
class tt__FindRecordingResultList;	/* onvif.h:1797 */
class tt__FindEventResultList;	/* onvif.h:1800 */
class tt__FindEventResult;	/* onvif.h:1803 */
class tt__FindPTZPositionResultList;	/* onvif.h:1806 */
class tt__FindPTZPositionResult;	/* onvif.h:1809 */
class tt__FindMetadataResultList;	/* onvif.h:1812 */
class tt__FindMetadataResult;	/* onvif.h:1815 */
class tt__RecordingInformation;	/* onvif.h:1818 */
class tt__RecordingSourceInformation;	/* onvif.h:1821 */
class tt__TrackInformation;	/* onvif.h:1824 */
class tt__MediaAttributes;	/* onvif.h:1827 */
class tt__TrackAttributes;	/* onvif.h:1830 */
class tt__TrackAttributesExtension;	/* onvif.h:1833 */
class tt__VideoAttributes;	/* onvif.h:1836 */
class tt__AudioAttributes;	/* onvif.h:1839 */
class tt__MetadataAttributes;	/* onvif.h:1842 */
class tt__RecordingConfiguration;	/* onvif.h:1845 */
class tt__TrackConfiguration;	/* onvif.h:1848 */
class tt__GetRecordingsResponseItem;	/* onvif.h:1851 */
class tt__GetTracksResponseList;	/* onvif.h:1854 */
class tt__GetTracksResponseItem;	/* onvif.h:1857 */
class tt__RecordingJobConfiguration;	/* onvif.h:1860 */
class tt__RecordingJobConfigurationExtension;	/* onvif.h:1863 */
class tt__RecordingJobSource;	/* onvif.h:1866 */
class tt__RecordingJobSourceExtension;	/* onvif.h:1869 */
class tt__RecordingJobTrack;	/* onvif.h:1872 */
class tt__RecordingJobStateInformation;	/* onvif.h:1875 */
class tt__RecordingJobStateInformationExtension;	/* onvif.h:1878 */
class tt__RecordingJobStateSource;	/* onvif.h:1881 */
class tt__RecordingJobStateTracks;	/* onvif.h:1884 */
class tt__RecordingJobStateTrack;	/* onvif.h:1887 */
class tt__GetRecordingJobsResponseItem;	/* onvif.h:1890 */
class tt__ReplayConfiguration;	/* onvif.h:1893 */
class tt__AnalyticsDeviceEngineConfiguration;	/* onvif.h:1899 */
class tt__AnalyticsDeviceEngineConfigurationExtension;	/* onvif.h:1902 */
class tt__EngineConfiguration;	/* onvif.h:1905 */
class tt__AnalyticsEngineInputInfo;	/* onvif.h:1908 */
class tt__AnalyticsEngineInputInfoExtension;	/* onvif.h:1911 */
class tt__SourceIdentification;	/* onvif.h:1917 */
class tt__SourceIdentificationExtension;	/* onvif.h:1920 */
class tt__MetadataInput;	/* onvif.h:1923 */
class tt__MetadataInputExtension;	/* onvif.h:1926 */
class tt__AnalyticsStateInformation;	/* onvif.h:1932 */
class tt__AnalyticsState;	/* onvif.h:1935 */
class tt__ActionEngineEventPayload;	/* onvif.h:1938 */
class tt__ActionEngineEventPayloadExtension;	/* onvif.h:1941 */
class tt__AudioClassCandidate;	/* onvif.h:1944 */
class tt__AudioClassDescriptor;	/* onvif.h:1947 */
class tt__AudioClassDescriptorExtension;	/* onvif.h:1950 */
class tt__ActiveConnection;	/* onvif.h:1953 */
class tt__ProfileStatus;	/* onvif.h:1956 */
class tt__ProfileStatusExtension;	/* onvif.h:1959 */
class tt__OSDPosConfiguration;	/* onvif.h:1965 */
class tt__OSDPosConfigurationExtension;	/* onvif.h:1968 */
class tt__OSDColor;	/* onvif.h:1971 */
class tt__OSDTextConfiguration;	/* onvif.h:1974 */
class tt__OSDTextConfigurationExtension;	/* onvif.h:1977 */
class tt__OSDImgConfiguration;	/* onvif.h:1980 */
class tt__OSDImgConfigurationExtension;	/* onvif.h:1983 */
class tt__ColorspaceRange;	/* onvif.h:1986 */
union _tt__union_ColorOptions;	/* onvif.h:21355 */
class tt__ColorOptions;	/* onvif.h:1989 */
class tt__OSDColorOptions;	/* onvif.h:1992 */
class tt__OSDColorOptionsExtension;	/* onvif.h:1995 */
class tt__OSDTextOptions;	/* onvif.h:1998 */
class tt__OSDTextOptionsExtension;	/* onvif.h:2001 */
class tt__OSDImgOptions;	/* onvif.h:2004 */
class tt__OSDImgOptionsExtension;	/* onvif.h:2007 */
class tt__OSDConfigurationExtension;	/* onvif.h:2013 */
class tt__MaximumNumberOfOSDs;	/* onvif.h:2016 */
class tt__OSDConfigurationOptions;	/* onvif.h:2019 */
class tt__OSDConfigurationOptionsExtension;	/* onvif.h:2022 */
class tt__FileProgress;	/* onvif.h:2025 */
class tt__ArrayOfFileProgress;	/* onvif.h:2028 */
class tt__ArrayOfFileProgressExtension;	/* onvif.h:2031 */
class tt__StorageReferencePath;	/* onvif.h:2034 */
class tt__StorageReferencePathExtension;	/* onvif.h:2037 */
class tt__IntRange;	/* onvif.h:2040 */
class tt__Vector2D;	/* onvif.h:2043 */
class tt__Vector1D;	/* onvif.h:2046 */
class tt__PTZVector;	/* onvif.h:2049 */
class tt__PTZStatus;	/* onvif.h:2052 */
class tt__PTZMoveStatus;	/* onvif.h:2055 */
class tt__Vector;	/* onvif.h:2058 */
class tt__Rectangle;	/* onvif.h:2061 */
class tt__Polygon;	/* onvif.h:2064 */
class tt__Color;	/* onvif.h:2067 */
class tt__ColorCovariance;	/* onvif.h:2070 */
class tt__Transformation;	/* onvif.h:2073 */
class tt__TransformationExtension;	/* onvif.h:2076 */
class tt__GeoLocation;	/* onvif.h:2079 */
class tt__GeoOrientation;	/* onvif.h:2082 */
class tt__LocalLocation;	/* onvif.h:2085 */
class tt__LocalOrientation;	/* onvif.h:2088 */
class tt__LocationEntity;	/* onvif.h:2091 */
class _tt__StringItems;	/* onvif.h:2094 */
class _tt__Message;	/* onvif.h:2097 */
class wsnt__QueryExpressionType;	/* onvif.h:2100 */
class wsnt__TopicExpressionType;	/* onvif.h:2103 */
class wsnt__FilterType;	/* onvif.h:2106 */
class wsnt__SubscriptionPolicyType;	/* onvif.h:2109 */
class _wsnt__NotificationMessageHolderType_Message;	/* onvif.h:22767 */
class wsnt__NotificationMessageHolderType;	/* onvif.h:2112 */
class _wsnt__NotificationProducerRP;	/* onvif.h:2175 */
class _wsnt__SubscriptionManagerRP;	/* onvif.h:2178 */
class _wsnt__Notify;	/* onvif.h:2181 */
class _wsnt__UseRaw;	/* onvif.h:2184 */
class _wsnt__Subscribe_SubscriptionPolicy;	/* onvif.h:22909 */
class _wsnt__Subscribe;	/* onvif.h:2187 */
class _wsnt__SubscribeResponse;	/* onvif.h:2190 */
class _wsnt__GetCurrentMessage;	/* onvif.h:2193 */
class _wsnt__GetCurrentMessageResponse;	/* onvif.h:2196 */
class _wsnt__GetMessages;	/* onvif.h:2199 */
class _wsnt__GetMessagesResponse;	/* onvif.h:2202 */
class _wsnt__DestroyPullPoint;	/* onvif.h:2205 */
class _wsnt__DestroyPullPointResponse;	/* onvif.h:2208 */
class _wsnt__CreatePullPoint;	/* onvif.h:2211 */
class _wsnt__CreatePullPointResponse;	/* onvif.h:2214 */
class _wsnt__Renew;	/* onvif.h:2217 */
class _wsnt__RenewResponse;	/* onvif.h:2220 */
class _wsnt__Unsubscribe;	/* onvif.h:2223 */
class _wsnt__UnsubscribeResponse;	/* onvif.h:2226 */
class _wsnt__PauseSubscription;	/* onvif.h:2229 */
class _wsnt__PauseSubscriptionResponse;	/* onvif.h:2232 */
class _wsnt__ResumeSubscription;	/* onvif.h:2235 */
class _wsnt__ResumeSubscriptionResponse;	/* onvif.h:2238 */
class _wsrfbf__BaseFaultType_ErrorCode;	/* onvif.h:23473 */
class _wsrfbf__BaseFaultType_Description;	/* onvif.h:23494 */
class _wsrfbf__BaseFaultType_FaultCause;	/* onvif.h:23511 */
class wsrfbf__BaseFaultType;	/* onvif.h:2241 */
class wstop__Documentation;	/* onvif.h:2244 */
class wstop__ExtensibleDocumented;	/* onvif.h:2247 */
class wstop__QueryExpressionType;	/* onvif.h:2250 */
class tt__VideoSource;	/* onvif.h:732 */
class tt__AudioSource;	/* onvif.h:741 */
class tt__VideoSourceConfiguration;	/* onvif.h:756 */
class tt__VideoEncoderConfiguration;	/* onvif.h:798 */
class tt__JpegOptions2;	/* onvif.h:825 */
class tt__Mpeg4Options2;	/* onvif.h:831 */
class tt__H264Options2;	/* onvif.h:837 */
class tt__VideoEncoder2Configuration;	/* onvif.h:840 */
class tt__AudioSourceConfiguration;	/* onvif.h:852 */
class tt__AudioEncoderConfiguration;	/* onvif.h:861 */
class tt__AudioEncoder2Configuration;	/* onvif.h:870 */
class tt__VideoAnalyticsConfiguration;	/* onvif.h:876 */
class tt__MetadataConfiguration;	/* onvif.h:879 */
class tt__VideoOutput;	/* onvif.h:906 */
class tt__VideoOutputConfiguration;	/* onvif.h:912 */
class tt__AudioOutput;	/* onvif.h:933 */
class tt__AudioOutputConfiguration;	/* onvif.h:936 */
class tt__AudioDecoderConfiguration;	/* onvif.h:942 */
class tt__NetworkInterface;	/* onvif.h:975 */
class tt__CertificateUsage;	/* onvif.h:1287 */
class tt__RelayOutput;	/* onvif.h:1314 */
class tt__DigitalInput;	/* onvif.h:1317 */
class tt__PTZNode;	/* onvif.h:1320 */
class tt__PTZConfiguration;	/* onvif.h:1335 */
class tt__EventFilter;	/* onvif.h:1788 */
class tt__AnalyticsEngine;	/* onvif.h:1896 */
class tt__AnalyticsEngineInput;	/* onvif.h:1914 */
class tt__AnalyticsEngineControl;	/* onvif.h:1929 */
class tt__OSDConfiguration;	/* onvif.h:2010 */
class wsnt__SubscribeCreationFailedFaultType;	/* onvif.h:2115 */
class wsnt__InvalidFilterFaultType;	/* onvif.h:2118 */
class wsnt__TopicExpressionDialectUnknownFaultType;	/* onvif.h:2121 */
class wsnt__InvalidTopicExpressionFaultType;	/* onvif.h:2124 */
class wsnt__TopicNotSupportedFaultType;	/* onvif.h:2127 */
class wsnt__MultipleTopicsSpecifiedFaultType;	/* onvif.h:2130 */
class wsnt__InvalidProducerPropertiesExpressionFaultType;	/* onvif.h:2133 */
class wsnt__InvalidMessageContentExpressionFaultType;	/* onvif.h:2136 */
class wsnt__UnrecognizedPolicyRequestFaultType;	/* onvif.h:2139 */
class wsnt__UnsupportedPolicyRequestFaultType;	/* onvif.h:2142 */
class wsnt__NotifyMessageNotSupportedFaultType;	/* onvif.h:2145 */
class wsnt__UnacceptableInitialTerminationTimeFaultType;	/* onvif.h:2148 */
class wsnt__NoCurrentMessageOnTopicFaultType;	/* onvif.h:2151 */
class wsnt__UnableToGetMessagesFaultType;	/* onvif.h:2154 */
class wsnt__UnableToDestroyPullPointFaultType;	/* onvif.h:2157 */
class wsnt__UnableToCreatePullPointFaultType;	/* onvif.h:2160 */
class wsnt__UnacceptableTerminationTimeFaultType;	/* onvif.h:2163 */
class wsnt__UnableToDestroySubscriptionFaultType;	/* onvif.h:2166 */
class wsnt__PauseFailedFaultType;	/* onvif.h:2169 */
class wsnt__ResumeFailedFaultType;	/* onvif.h:2172 */
class _wstop__TopicNamespaceType_Topic;	/* onvif.h:27273 */
class wstop__TopicNamespaceType;	/* onvif.h:2253 */
class wstop__TopicType;	/* onvif.h:2256 */
class wstop__TopicSetType;	/* onvif.h:2259 */
class tt__OSDReference;	/* onvif.h:1962 */
struct __trt__GetServiceCapabilities;	/* onvif.h:27966 */
struct __trt__GetVideoSources;	/* onvif.h:28034 */
struct __trt__GetAudioSources;	/* onvif.h:28102 */
struct __trt__GetAudioOutputs;	/* onvif.h:28170 */
struct __trt__CreateProfile;	/* onvif.h:28242 */
struct __trt__GetProfile;	/* onvif.h:28311 */
struct __trt__GetProfiles;	/* onvif.h:28384 */
struct __trt__AddVideoEncoderConfiguration;	/* onvif.h:28459 */
struct __trt__AddVideoSourceConfiguration;	/* onvif.h:28530 */
struct __trt__AddAudioEncoderConfiguration;	/* onvif.h:28605 */
struct __trt__AddAudioSourceConfiguration;	/* onvif.h:28676 */
struct __trt__AddPTZConfiguration;	/* onvif.h:28751 */
struct __trt__AddVideoAnalyticsConfiguration;	/* onvif.h:28829 */
struct __trt__AddMetadataConfiguration;	/* onvif.h:28901 */
struct __trt__AddAudioOutputConfiguration;	/* onvif.h:28971 */
struct __trt__AddAudioDecoderConfiguration;	/* onvif.h:29041 */
struct __trt__RemoveVideoEncoderConfiguration;	/* onvif.h:29112 */
struct __trt__RemoveVideoSourceConfiguration;	/* onvif.h:29185 */
struct __trt__RemoveAudioEncoderConfiguration;	/* onvif.h:29257 */
struct __trt__RemoveAudioSourceConfiguration;	/* onvif.h:29331 */
struct __trt__RemovePTZConfiguration;	/* onvif.h:29402 */
struct __trt__RemoveVideoAnalyticsConfiguration;	/* onvif.h:29473 */
struct __trt__RemoveMetadataConfiguration;	/* onvif.h:29543 */
struct __trt__RemoveAudioOutputConfiguration;	/* onvif.h:29613 */
struct __trt__RemoveAudioDecoderConfiguration;	/* onvif.h:29683 */
struct __trt__DeleteProfile;	/* onvif.h:29752 */
struct __trt__GetVideoSourceConfigurations;	/* onvif.h:29822 */
struct __trt__GetVideoEncoderConfigurations;	/* onvif.h:29893 */
struct __trt__GetAudioSourceConfigurations;	/* onvif.h:29964 */
struct __trt__GetAudioEncoderConfigurations;	/* onvif.h:30034 */
struct __trt__GetVideoAnalyticsConfigurations;	/* onvif.h:30104 */
struct __trt__GetMetadataConfigurations;	/* onvif.h:30173 */
struct __trt__GetAudioOutputConfigurations;	/* onvif.h:30242 */
struct __trt__GetAudioDecoderConfigurations;	/* onvif.h:30313 */
struct __trt__GetVideoSourceConfiguration;	/* onvif.h:30382 */
struct __trt__GetVideoEncoderConfiguration;	/* onvif.h:30451 */
struct __trt__GetAudioSourceConfiguration;	/* onvif.h:30520 */
struct __trt__GetAudioEncoderConfiguration;	/* onvif.h:30589 */
struct __trt__GetVideoAnalyticsConfiguration;	/* onvif.h:30658 */
struct __trt__GetMetadataConfiguration;	/* onvif.h:30727 */
struct __trt__GetAudioOutputConfiguration;	/* onvif.h:30796 */
struct __trt__GetAudioDecoderConfiguration;	/* onvif.h:30865 */
struct __trt__GetCompatibleVideoEncoderConfigurations;	/* onvif.h:30937 */
struct __trt__GetCompatibleVideoSourceConfigurations;	/* onvif.h:31011 */
struct __trt__GetCompatibleAudioEncoderConfigurations;	/* onvif.h:31083 */
struct __trt__GetCompatibleAudioSourceConfigurations;	/* onvif.h:31155 */
struct __trt__GetCompatibleVideoAnalyticsConfigurations;	/* onvif.h:31227 */
struct __trt__GetCompatibleMetadataConfigurations;	/* onvif.h:31299 */
struct __trt__GetCompatibleAudioOutputConfigurations;	/* onvif.h:31370 */
struct __trt__GetCompatibleAudioDecoderConfigurations;	/* onvif.h:31441 */
struct __trt__SetVideoSourceConfiguration;	/* onvif.h:31514 */
struct __trt__SetVideoEncoderConfiguration;	/* onvif.h:31591 */
struct __trt__SetAudioSourceConfiguration;	/* onvif.h:31666 */
struct __trt__SetAudioEncoderConfiguration;	/* onvif.h:31742 */
struct __trt__SetVideoAnalyticsConfiguration;	/* onvif.h:31820 */
struct __trt__SetMetadataConfiguration;	/* onvif.h:31897 */
struct __trt__SetAudioOutputConfiguration;	/* onvif.h:31967 */
struct __trt__SetAudioDecoderConfiguration;	/* onvif.h:32037 */
struct __trt__GetVideoSourceConfigurationOptions;	/* onvif.h:32111 */
struct __trt__GetVideoEncoderConfigurationOptions;	/* onvif.h:32193 */
struct __trt__GetAudioSourceConfigurationOptions;	/* onvif.h:32267 */
struct __trt__GetAudioEncoderConfigurationOptions;	/* onvif.h:32337 */
struct __trt__GetMetadataConfigurationOptions;	/* onvif.h:32406 */
struct __trt__GetAudioOutputConfigurationOptions;	/* onvif.h:32475 */
struct __trt__GetAudioDecoderConfigurationOptions;	/* onvif.h:32545 */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* onvif.h:32615 */
struct __trt__GetStreamUri;	/* onvif.h:32706 */
struct __trt__StartMulticastStreaming;	/* onvif.h:32781 */
struct __trt__StopMulticastStreaming;	/* onvif.h:32849 */
struct __trt__SetSynchronizationPoint;	/* onvif.h:32934 */
struct __trt__GetSnapshotUri;	/* onvif.h:33012 */
struct __trt__GetVideoSourceModes;	/* onvif.h:33082 */
struct __trt__SetVideoSourceMode;	/* onvif.h:33153 */
struct __trt__GetOSDs;	/* onvif.h:33221 */
struct __trt__GetOSD;	/* onvif.h:33289 */
struct __trt__GetOSDOptions;	/* onvif.h:33357 */
struct __trt__SetOSD;	/* onvif.h:33425 */
struct __trt__CreateOSD;	/* onvif.h:33493 */
struct __trt__DeleteOSD;	/* onvif.h:33561 */

/* xop.h:58 */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
struct SOAP_CMAC _xop__Include {
      public:
        unsigned char *__ptr;
        int __size;
        /** Optional element 'id' of XSD type 'xsd:string' */
        char *id;
        /** Optional element 'type' of XSD type 'xsd:string' */
        char *type;
        /** Optional element 'options' of XSD type 'xsd:string' */
        char *options;
      public:
        /** Return unique type id SOAP_TYPE__xop__Include */
        long soap_type() const { return SOAP_TYPE__xop__Include; }
        /** Constructor with member initializations */
        _xop__Include() : __ptr(), __size(), id(), type(), options() { }
        /** Friend allocator */
        friend SOAP_FMAC1 _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:63 */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
/* complex XSD type 'wsa5:EndpointReferenceType': */
struct SOAP_CMAC wsa5__EndpointReferenceType {
      public:
        /** Required element 'wsa5:Address' of XSD type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa5:ReferenceParameters' of XSD type 'wsa5:ReferenceParametersType' */
        struct wsa5__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa5:Metadata' of XSD type 'wsa5:MetadataType' */
        struct wsa5__MetadataType *Metadata;
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
        long soap_type() const { return SOAP_TYPE_wsa5__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa5__EndpointReferenceType() : Address(), ReferenceParameters(), Metadata(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:66 */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
/* complex XSD type 'wsa5:ReferenceParametersType': */
struct SOAP_CMAC wsa5__ReferenceParametersType {
      public:
        /** Optional element 'chan:ChannelInstance' of XSD type 'xsd:int' */
        int *chan__ChannelInstance;
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
        long soap_type() const { return SOAP_TYPE_wsa5__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa5__ReferenceParametersType() : chan__ChannelInstance(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:69 */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
/* complex XSD type 'wsa5:MetadataType': */
struct SOAP_CMAC wsa5__MetadataType {
      public:
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__MetadataType */
        long soap_type() const { return SOAP_TYPE_wsa5__MetadataType; }
        /** Constructor with member initializations */
        wsa5__MetadataType() : __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:84 */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
/* complex XSD type 'wsa5:ProblemActionType': */
struct SOAP_CMAC wsa5__ProblemActionType {
      public:
        /** Optional element 'wsa5:Action' of XSD type 'xsd:string' */
        char *Action;
        /** Optional element 'wsa5:SoapAction' of XSD type 'xsd:string' */
        char *SoapAction;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ProblemActionType */
        long soap_type() const { return SOAP_TYPE_wsa5__ProblemActionType; }
        /** Constructor with member initializations */
        wsa5__ProblemActionType() : Action(), SoapAction(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:72 */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
/* simple XSD type 'wsa5:RelatesToType': */
struct SOAP_CMAC wsa5__RelatesToType {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XSD type 'wsa5:RelationshipTypeOpenEnum' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__RelatesToType */
        long soap_type() const { return SOAP_TYPE_wsa5__RelatesToType; }
        /** Constructor with member initializations */
        wsa5__RelatesToType() : __item(), RelationshipType(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:258 */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
/* simple XSD type 'chan:ChannelInstanceType': */
struct SOAP_CMAC chan__ChannelInstanceType {
      public:
        /** Simple content of XSD type 'xsd:int' wrapped by this struct */
        int __item;
        /** Optional attribute 'wsa5:IsReferenceParameter' of XSD type 'wsa5:IsReferenceParameter' */
        enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	 /**< initialized with default value = (enum _wsa5__IsReferenceParameter)0 */
      public:
        /** Return unique type id SOAP_TYPE_chan__ChannelInstanceType */
        long soap_type() const { return SOAP_TYPE_chan__ChannelInstanceType; }
        /** Constructor with member initializations */
        chan__ChannelInstanceType() : __item(), wsa5__IsReferenceParameter((enum _wsa5__IsReferenceParameter)0) { }
        /** Friend allocator */
        friend SOAP_FMAC1 chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:264 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Optional element 'wsa5:MessageID' of XSD type 'wsa5:MessageID' */
        char *wsa5__MessageID;
        /** Optional element 'wsa5:RelatesTo' of XSD type 'wsa5:RelatesTo' */
        struct wsa5__RelatesToType *wsa5__RelatesTo;
        /** Optional element 'wsa5:From' of XSD type 'wsa5:From' */
        struct wsa5__EndpointReferenceType *wsa5__From;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__ReplyTo;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__FaultTo;
        /** MustUnderstand */
        char *wsa5__To;
        /** MustUnderstand */
        char *wsa5__Action;
        /** Optional element 'chan:ChannelInstance' of XSD type 'chan:ChannelInstanceType' */
        struct chan__ChannelInstanceType *chan__ChannelInstance;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() : wsa5__MessageID(), wsa5__RelatesTo(), wsa5__From(), wsa5__ReplyTo(), wsa5__FaultTo(), wsa5__To(), wsa5__Action(), chan__ChannelInstance() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:281 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:282 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:283 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:288 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:166 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (57)
/* simple XSD type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with initializations
        xsd__anyType() : __item(), soap() { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:169 */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (59)
/* complex XSD type 'SOAP-ENV:Envelope': */
struct SOAP_CMAC SOAP_ENV__Envelope {
      public:
        /** Optional element 'SOAP-ENV:Header' of XSD type 'SOAP-ENV:Header' */
        struct SOAP_ENV__Header *SOAP_ENV__Header;
        /** Optional element 'SOAP-ENV:Body' of XSD type 'xsd:anyType' */
        char *SOAP_ENV__Body;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Envelope */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Envelope; }
        /** Constructor with member initializations */
        SOAP_ENV__Envelope() : SOAP_ENV__Header(), SOAP_ENV__Body() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:175 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (63)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XSD type 'xsd:string'
        char *id;
        /// Optional element 'type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'options' of XSD type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:185 */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (68)
/* hexBinary XSD type: */
class SOAP_CMAC xsd__hexBinary {
      public:
        unsigned char *__ptr;
        int __size;
      public:
        /// Return unique type id SOAP_TYPE_xsd__hexBinary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__hexBinary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__hexBinary, default initialized and not managed by a soap context
        virtual xsd__hexBinary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__hexBinary); }
      public:
        /// Constructor with initializations
        xsd__hexBinary() : __ptr(), __size() { }
        virtual ~xsd__hexBinary() { }
        /// Friend allocator used by soap_new_xsd__hexBinary(struct soap*, int)
        friend SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:219 */
#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (76)
/* complex XSD type 'trt:Capabilities': */
class SOAP_CMAC trt__Capabilities {
      public:
        /// Required element 'trt:ProfileCapabilities' of XSD type 'trt:ProfileCapabilities'
        trt__ProfileCapabilities *ProfileCapabilities;
        /// Required element 'trt:StreamingCapabilities' of XSD type 'trt:StreamingCapabilities'
        trt__StreamingCapabilities *StreamingCapabilities;
        std::vector<char *> __any;
        /// optional attribute 'SnapshotUri' of XSD type 'xsd:boolean'
        bool *SnapshotUri;
        /// optional attribute 'Rotation' of XSD type 'xsd:boolean'
        bool *Rotation;
        /// optional attribute 'VideoSourceMode' of XSD type 'xsd:boolean'
        bool *VideoSourceMode;
        /// optional attribute 'OSD' of XSD type 'xsd:boolean'
        bool *OSD;
        /// optional attribute 'TemporaryOSDText' of XSD type 'xsd:boolean'
        bool *TemporaryOSDText;
        /// optional attribute 'EXICompression' of XSD type 'xsd:boolean'
        bool *EXICompression;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_trt__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__Capabilities, default initialized and not managed by a soap context
        virtual trt__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__Capabilities); }
      public:
        /// Constructor with initializations
        trt__Capabilities() : ProfileCapabilities(), StreamingCapabilities(), __any(), SnapshotUri(), Rotation(), VideoSourceMode(), OSD(), TemporaryOSDText(), EXICompression(), __anyAttribute(), soap() { }
        virtual ~trt__Capabilities() { }
        /// Friend allocator used by soap_new_trt__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__Capabilities * SOAP_FMAC2 soap_instantiate_trt__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:222 */
#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (77)
/* complex XSD type 'trt:ProfileCapabilities': */
class SOAP_CMAC trt__ProfileCapabilities {
      public:
        std::vector<char *> __any;
        /// optional attribute 'MaximumNumberOfProfiles' of XSD type 'xsd:int'
        int *MaximumNumberOfProfiles;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_trt__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__ProfileCapabilities, default initialized and not managed by a soap context
        virtual trt__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__ProfileCapabilities); }
      public:
        /// Constructor with initializations
        trt__ProfileCapabilities() : __any(), MaximumNumberOfProfiles(), __anyAttribute(), soap() { }
        virtual ~trt__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_trt__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_trt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:225 */
#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (78)
/* complex XSD type 'trt:StreamingCapabilities': */
class SOAP_CMAC trt__StreamingCapabilities {
      public:
        std::vector<char *> __any;
        /// optional attribute 'RTPMulticast' of XSD type 'xsd:boolean'
        bool *RTPMulticast;
        /// optional attribute 'RTP_TCP' of XSD type 'xsd:boolean'
        bool *RTP_USCORETCP;
        /// optional attribute 'RTP_RTSP_TCP' of XSD type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// optional attribute 'NonAggregateControl' of XSD type 'xsd:boolean'
        bool *NonAggregateControl;
        /// optional attribute 'NoRTSPStreaming' of XSD type 'xsd:boolean'
        bool *NoRTSPStreaming;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_trt__StreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__StreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__StreamingCapabilities, default initialized and not managed by a soap context
        virtual trt__StreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__StreamingCapabilities); }
      public:
        /// Constructor with initializations
        trt__StreamingCapabilities() : __any(), RTPMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), NonAggregateControl(), NoRTSPStreaming(), __anyAttribute(), soap() { }
        virtual ~trt__StreamingCapabilities() { }
        /// Friend allocator used by soap_new_trt__StreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_trt__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:228 */
#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (79)
/* complex XSD type 'trt:VideoSourceMode': */
class SOAP_CMAC trt__VideoSourceMode {
      public:
        /// Required element 'trt:MaxFramerate' of XSD type 'xsd:float'
        float MaxFramerate;
        /// Required element 'trt:MaxResolution' of XSD type 'tt:VideoResolution'
        tt__VideoResolution *MaxResolution;
        /// Required element 'trt:Encodings' of XSD type 'trt:EncodingTypes'
        std::string Encodings;
        /// Required element 'trt:Reboot' of XSD type 'xsd:boolean'
        bool Reboot;
        /// Optional element 'trt:Description' of XSD type 'tt:Description'
        std::string *Description;
        /// Optional element 'trt:Extension' of XSD type 'trt:VideoSourceModeExtension'
        trt__VideoSourceModeExtension *Extension;
        /// required attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string token;
        /// optional attribute 'Enabled' of XSD type 'xsd:boolean'
        bool *Enabled;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_trt__VideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE_trt__VideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__VideoSourceMode, default initialized and not managed by a soap context
        virtual trt__VideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__VideoSourceMode); }
      public:
        /// Constructor with initializations
        trt__VideoSourceMode() : MaxFramerate(), MaxResolution(), Encodings(), Reboot(), Description(), Extension(), token(), Enabled(), __anyAttribute(), soap() { }
        virtual ~trt__VideoSourceMode() { }
        /// Friend allocator used by soap_new_trt__VideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 trt__VideoSourceMode * SOAP_FMAC2 soap_instantiate_trt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:231 */
#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (80)
/* complex XSD type 'trt:VideoSourceModeExtension': */
class SOAP_CMAC trt__VideoSourceModeExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_trt__VideoSourceModeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_trt__VideoSourceModeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__VideoSourceModeExtension, default initialized and not managed by a soap context
        virtual trt__VideoSourceModeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__VideoSourceModeExtension); }
      public:
        /// Constructor with initializations
        trt__VideoSourceModeExtension() : __any(), soap() { }
        virtual ~trt__VideoSourceModeExtension() { }
        /// Friend allocator used by soap_new_trt__VideoSourceModeExtension(struct soap*, int)
        friend SOAP_FMAC1 trt__VideoSourceModeExtension * SOAP_FMAC2 soap_instantiate_trt__VideoSourceModeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:234 */
#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (81)
/* complex XSD type 'trt:GetServiceCapabilities': */
class SOAP_CMAC _trt__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _trt__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetServiceCapabilities); }
      public:
        /// Constructor with initializations
        _trt__GetServiceCapabilities() : soap() { }
        virtual ~_trt__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__trt__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:237 */
#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (82)
/* complex XSD type 'trt:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'trt:Capabilities' of XSD type 'trt:Capabilities'
        trt__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _trt__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_trt__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__trt__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:240 */
#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (83)
/* complex XSD type 'trt:GetVideoSources': */
class SOAP_CMAC _trt__GetVideoSources {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSources
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSources; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSources, default initialized and not managed by a soap context
        virtual _trt__GetVideoSources *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSources); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSources() : soap() { }
        virtual ~_trt__GetVideoSources() { }
        /// Friend allocator used by soap_new__trt__GetVideoSources(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSources * SOAP_FMAC2 soap_instantiate__trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:243 */
#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (84)
/* complex XSD type 'trt:GetVideoSourcesResponse': */
class SOAP_CMAC _trt__GetVideoSourcesResponse {
      public:
        /// Optional element 'trt:VideoSources' of XSD type 'tt:VideoSource'
        std::vector<tt__VideoSource *> VideoSources;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourcesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourcesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourcesResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourcesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourcesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourcesResponse() : VideoSources(), soap() { }
        virtual ~_trt__GetVideoSourcesResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourcesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourcesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:246 */
#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (85)
/* complex XSD type 'trt:GetAudioSources': */
class SOAP_CMAC _trt__GetAudioSources {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSources
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSources; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSources, default initialized and not managed by a soap context
        virtual _trt__GetAudioSources *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSources); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSources() : soap() { }
        virtual ~_trt__GetAudioSources() { }
        /// Friend allocator used by soap_new__trt__GetAudioSources(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSources * SOAP_FMAC2 soap_instantiate__trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:249 */
#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (86)
/* complex XSD type 'trt:GetAudioSourcesResponse': */
class SOAP_CMAC _trt__GetAudioSourcesResponse {
      public:
        /// Optional element 'trt:AudioSources' of XSD type 'tt:AudioSource'
        std::vector<tt__AudioSource *> AudioSources;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourcesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourcesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourcesResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourcesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourcesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourcesResponse() : AudioSources(), soap() { }
        virtual ~_trt__GetAudioSourcesResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourcesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourcesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:252 */
#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (87)
/* complex XSD type 'trt:GetAudioOutputs': */
class SOAP_CMAC _trt__GetAudioOutputs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputs
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputs, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputs); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputs() : soap() { }
        virtual ~_trt__GetAudioOutputs() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputs(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:255 */
#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (88)
/* complex XSD type 'trt:GetAudioOutputsResponse': */
class SOAP_CMAC _trt__GetAudioOutputsResponse {
      public:
        /// Optional element 'trt:AudioOutputs' of XSD type 'tt:AudioOutput'
        std::vector<tt__AudioOutput *> AudioOutputs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputsResponse() : AudioOutputs(), soap() { }
        virtual ~_trt__GetAudioOutputsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:258 */
#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (89)
/* complex XSD type 'trt:CreateProfile': */
class SOAP_CMAC _trt__CreateProfile {
      public:
        /// Required element 'trt:Name' of XSD type 'tt:Name'
        std::string Name;
        /// Optional element 'trt:Token' of XSD type 'tt:ReferenceToken'
        std::string *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateProfile, default initialized and not managed by a soap context
        virtual _trt__CreateProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateProfile); }
      public:
        /// Constructor with initializations
        _trt__CreateProfile() : Name(), Token(), soap() { }
        virtual ~_trt__CreateProfile() { }
        /// Friend allocator used by soap_new__trt__CreateProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateProfile * SOAP_FMAC2 soap_instantiate__trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:261 */
#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (90)
/* complex XSD type 'trt:CreateProfileResponse': */
class SOAP_CMAC _trt__CreateProfileResponse {
      public:
        /// Required element 'trt:Profile' of XSD type 'tt:Profile'
        tt__Profile *Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateProfileResponse, default initialized and not managed by a soap context
        virtual _trt__CreateProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateProfileResponse); }
      public:
        /// Constructor with initializations
        _trt__CreateProfileResponse() : Profile(), soap() { }
        virtual ~_trt__CreateProfileResponse() { }
        /// Friend allocator used by soap_new__trt__CreateProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__trt__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:264 */
#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (91)
/* complex XSD type 'trt:GetProfile': */
class SOAP_CMAC _trt__GetProfile {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfile, default initialized and not managed by a soap context
        virtual _trt__GetProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfile); }
      public:
        /// Constructor with initializations
        _trt__GetProfile() : ProfileToken(), soap() { }
        virtual ~_trt__GetProfile() { }
        /// Friend allocator used by soap_new__trt__GetProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfile * SOAP_FMAC2 soap_instantiate__trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:267 */
#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (92)
/* complex XSD type 'trt:GetProfileResponse': */
class SOAP_CMAC _trt__GetProfileResponse {
      public:
        /// Required element 'trt:Profile' of XSD type 'tt:Profile'
        tt__Profile *Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfileResponse, default initialized and not managed by a soap context
        virtual _trt__GetProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfileResponse); }
      public:
        /// Constructor with initializations
        _trt__GetProfileResponse() : Profile(), soap() { }
        virtual ~_trt__GetProfileResponse() { }
        /// Friend allocator used by soap_new__trt__GetProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfileResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:270 */
#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (93)
/* complex XSD type 'trt:GetProfiles': */
class SOAP_CMAC _trt__GetProfiles {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfiles
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfiles; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfiles, default initialized and not managed by a soap context
        virtual _trt__GetProfiles *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfiles); }
      public:
        /// Constructor with initializations
        _trt__GetProfiles() : soap() { }
        virtual ~_trt__GetProfiles() { }
        /// Friend allocator used by soap_new__trt__GetProfiles(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfiles * SOAP_FMAC2 soap_instantiate__trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:273 */
#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (94)
/* complex XSD type 'trt:GetProfilesResponse': */
class SOAP_CMAC _trt__GetProfilesResponse {
      public:
        /// Optional element 'trt:Profiles' of XSD type 'tt:Profile'
        std::vector<tt__Profile *> Profiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfilesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfilesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfilesResponse, default initialized and not managed by a soap context
        virtual _trt__GetProfilesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfilesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetProfilesResponse() : Profiles(), soap() { }
        virtual ~_trt__GetProfilesResponse() { }
        /// Friend allocator used by soap_new__trt__GetProfilesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:276 */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (95)
/* complex XSD type 'trt:AddVideoEncoderConfiguration': */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddVideoEncoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:279 */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (96)
/* complex XSD type 'trt:AddVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:282 */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (97)
/* complex XSD type 'trt:RemoveVideoEncoderConfiguration': */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoEncoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:285 */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (98)
/* complex XSD type 'trt:RemoveVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:288 */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (99)
/* complex XSD type 'trt:AddVideoSourceConfiguration': */
class SOAP_CMAC _trt__AddVideoSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddVideoSourceConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:291 */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (100)
/* complex XSD type 'trt:AddVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:294 */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (101)
/* complex XSD type 'trt:RemoveVideoSourceConfiguration': */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoSourceConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:297 */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (102)
/* complex XSD type 'trt:RemoveVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:300 */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (103)
/* complex XSD type 'trt:AddAudioEncoderConfiguration': */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddAudioEncoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:303 */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (104)
/* complex XSD type 'trt:AddAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:306 */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (105)
/* complex XSD type 'trt:RemoveAudioEncoderConfiguration': */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioEncoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:309 */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (106)
/* complex XSD type 'trt:RemoveAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:312 */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (107)
/* complex XSD type 'trt:AddAudioSourceConfiguration': */
class SOAP_CMAC _trt__AddAudioSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddAudioSourceConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:315 */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (108)
/* complex XSD type 'trt:AddAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:318 */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (109)
/* complex XSD type 'trt:RemoveAudioSourceConfiguration': */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioSourceConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:321 */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (110)
/* complex XSD type 'trt:RemoveAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:324 */
#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (111)
/* complex XSD type 'trt:AddPTZConfiguration': */
class SOAP_CMAC _trt__AddPTZConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddPTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddPTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddPTZConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddPTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddPTZConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddPTZConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddPTZConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddPTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:327 */
#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (112)
/* complex XSD type 'trt:AddPTZConfigurationResponse': */
class SOAP_CMAC _trt__AddPTZConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddPTZConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddPTZConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddPTZConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddPTZConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddPTZConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddPTZConfigurationResponse() : soap() { }
        virtual ~_trt__AddPTZConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddPTZConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddPTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:330 */
#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (113)
/* complex XSD type 'trt:RemovePTZConfiguration': */
class SOAP_CMAC _trt__RemovePTZConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemovePTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemovePTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemovePTZConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemovePTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemovePTZConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemovePTZConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemovePTZConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemovePTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:333 */
#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (114)
/* complex XSD type 'trt:RemovePTZConfigurationResponse': */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemovePTZConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemovePTZConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemovePTZConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemovePTZConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemovePTZConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemovePTZConfigurationResponse() : soap() { }
        virtual ~_trt__RemovePTZConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemovePTZConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemovePTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:336 */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (115)
/* complex XSD type 'trt:AddVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoAnalyticsConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddVideoAnalyticsConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:339 */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (116)
/* complex XSD type 'trt:AddVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:342 */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (117)
/* complex XSD type 'trt:RemoveVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoAnalyticsConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoAnalyticsConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:345 */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (118)
/* complex XSD type 'trt:RemoveVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:348 */
#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (119)
/* complex XSD type 'trt:AddMetadataConfiguration': */
class SOAP_CMAC _trt__AddMetadataConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddMetadataConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddMetadataConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:351 */
#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (120)
/* complex XSD type 'trt:AddMetadataConfigurationResponse': */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddMetadataConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__AddMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:354 */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (121)
/* complex XSD type 'trt:RemoveMetadataConfiguration': */
class SOAP_CMAC _trt__RemoveMetadataConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveMetadataConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveMetadataConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:357 */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (122)
/* complex XSD type 'trt:RemoveMetadataConfigurationResponse': */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveMetadataConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:360 */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (123)
/* complex XSD type 'trt:AddAudioOutputConfiguration': */
class SOAP_CMAC _trt__AddAudioOutputConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioOutputConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddAudioOutputConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:363 */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (124)
/* complex XSD type 'trt:AddAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioOutputConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:366 */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (125)
/* complex XSD type 'trt:RemoveAudioOutputConfiguration': */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioOutputConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioOutputConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:369 */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (126)
/* complex XSD type 'trt:RemoveAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioOutputConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:372 */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (127)
/* complex XSD type 'trt:AddAudioDecoderConfiguration': */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioDecoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__AddAudioDecoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:375 */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (128)
/* complex XSD type 'trt:AddAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__AddAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:378 */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (129)
/* complex XSD type 'trt:RemoveAudioDecoderConfiguration': */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioDecoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioDecoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:381 */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (130)
/* complex XSD type 'trt:RemoveAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__RemoveAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:384 */
#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (131)
/* complex XSD type 'trt:DeleteProfile': */
class SOAP_CMAC _trt__DeleteProfile {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteProfile, default initialized and not managed by a soap context
        virtual _trt__DeleteProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteProfile); }
      public:
        /// Constructor with initializations
        _trt__DeleteProfile() : ProfileToken(), soap() { }
        virtual ~_trt__DeleteProfile() { }
        /// Friend allocator used by soap_new__trt__DeleteProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteProfile * SOAP_FMAC2 soap_instantiate__trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:387 */
#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (132)
/* complex XSD type 'trt:DeleteProfileResponse': */
class SOAP_CMAC _trt__DeleteProfileResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteProfileResponse, default initialized and not managed by a soap context
        virtual _trt__DeleteProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteProfileResponse); }
      public:
        /// Constructor with initializations
        _trt__DeleteProfileResponse() : soap() { }
        virtual ~_trt__DeleteProfileResponse() { }
        /// Friend allocator used by soap_new__trt__DeleteProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:390 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (133)
/* complex XSD type 'trt:GetVideoEncoderConfigurations': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfigurations() : soap() { }
        virtual ~_trt__GetVideoEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:393 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (134)
/* complex XSD type 'trt:GetVideoEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoEncoderConfiguration'
        std::vector<tt__VideoEncoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:396 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (135)
/* complex XSD type 'trt:GetVideoSourceConfigurations': */
class SOAP_CMAC _trt__GetVideoSourceConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfigurations() : soap() { }
        virtual ~_trt__GetVideoSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:399 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (136)
/* complex XSD type 'trt:GetVideoSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoSourceConfiguration'
        std::vector<tt__VideoSourceConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:402 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (137)
/* complex XSD type 'trt:GetAudioEncoderConfigurations': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfigurations() : soap() { }
        virtual ~_trt__GetAudioEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:405 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (138)
/* complex XSD type 'trt:GetAudioEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioEncoderConfiguration'
        std::vector<tt__AudioEncoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:408 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (139)
/* complex XSD type 'trt:GetAudioSourceConfigurations': */
class SOAP_CMAC _trt__GetAudioSourceConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfigurations() : soap() { }
        virtual ~_trt__GetAudioSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:411 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (140)
/* complex XSD type 'trt:GetAudioSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioSourceConfiguration'
        std::vector<tt__AudioSourceConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:414 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (141)
/* complex XSD type 'trt:GetVideoAnalyticsConfigurations': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetVideoAnalyticsConfigurations() : soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:417 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (142)
/* complex XSD type 'trt:GetVideoAnalyticsConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoAnalyticsConfiguration'
        std::vector<tt__VideoAnalyticsConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoAnalyticsConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:420 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (143)
/* complex XSD type 'trt:GetMetadataConfigurations': */
class SOAP_CMAC _trt__GetMetadataConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfigurations() : soap() { }
        virtual ~_trt__GetMetadataConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:423 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (144)
/* complex XSD type 'trt:GetMetadataConfigurationsResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:MetadataConfiguration'
        std::vector<tt__MetadataConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetMetadataConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:426 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (145)
/* complex XSD type 'trt:GetAudioOutputConfigurations': */
class SOAP_CMAC _trt__GetAudioOutputConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfigurations() : soap() { }
        virtual ~_trt__GetAudioOutputConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:429 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (146)
/* complex XSD type 'trt:GetAudioOutputConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioOutputConfiguration'
        std::vector<tt__AudioOutputConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:432 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (147)
/* complex XSD type 'trt:GetAudioDecoderConfigurations': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfigurations() : soap() { }
        virtual ~_trt__GetAudioDecoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:435 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (148)
/* complex XSD type 'trt:GetAudioDecoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioDecoderConfiguration'
        std::vector<tt__AudioDecoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:438 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (149)
/* complex XSD type 'trt:GetVideoSourceConfiguration': */
class SOAP_CMAC _trt__GetVideoSourceConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:441 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (150)
/* complex XSD type 'trt:GetVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:444 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (151)
/* complex XSD type 'trt:GetVideoEncoderConfiguration': */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:447 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (152)
/* complex XSD type 'trt:GetVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:450 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (153)
/* complex XSD type 'trt:GetAudioSourceConfiguration': */
class SOAP_CMAC _trt__GetAudioSourceConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:453 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (154)
/* complex XSD type 'trt:GetAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:456 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (155)
/* complex XSD type 'trt:GetAudioEncoderConfiguration': */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:459 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (156)
/* complex XSD type 'trt:GetAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:462 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (157)
/* complex XSD type 'trt:GetVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetVideoAnalyticsConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:465 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (158)
/* complex XSD type 'trt:GetVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoAnalyticsConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:468 */
#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (159)
/* complex XSD type 'trt:GetMetadataConfiguration': */
class SOAP_CMAC _trt__GetMetadataConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:471 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (160)
/* complex XSD type 'trt:GetMetadataConfigurationResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:474 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (161)
/* complex XSD type 'trt:GetAudioOutputConfiguration': */
class SOAP_CMAC _trt__GetAudioOutputConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:477 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (162)
/* complex XSD type 'trt:GetAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:480 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (163)
/* complex XSD type 'trt:GetAudioDecoderConfiguration': */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:483 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (164)
/* complex XSD type 'trt:GetAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:486 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (165)
/* complex XSD type 'trt:GetCompatibleVideoEncoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoEncoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoEncoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:489 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (166)
/* complex XSD type 'trt:GetCompatibleVideoEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoEncoderConfiguration'
        std::vector<tt__VideoEncoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoEncoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoEncoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:492 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (167)
/* complex XSD type 'trt:GetCompatibleVideoSourceConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoSourceConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoSourceConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:495 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (168)
/* complex XSD type 'trt:GetCompatibleVideoSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoSourceConfiguration'
        std::vector<tt__VideoSourceConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoSourceConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoSourceConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:498 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (169)
/* complex XSD type 'trt:GetCompatibleAudioEncoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioEncoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioEncoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:501 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (170)
/* complex XSD type 'trt:GetCompatibleAudioEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioEncoderConfiguration'
        std::vector<tt__AudioEncoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioEncoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioEncoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:504 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (171)
/* complex XSD type 'trt:GetCompatibleAudioSourceConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioSourceConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioSourceConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:507 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (172)
/* complex XSD type 'trt:GetCompatibleAudioSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioSourceConfiguration'
        std::vector<tt__AudioSourceConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioSourceConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioSourceConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:510 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (173)
/* complex XSD type 'trt:GetCompatibleVideoAnalyticsConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoAnalyticsConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoAnalyticsConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoAnalyticsConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoAnalyticsConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:513 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (174)
/* complex XSD type 'trt:GetCompatibleVideoAnalyticsConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:VideoAnalyticsConfiguration'
        std::vector<tt__VideoAnalyticsConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoAnalyticsConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoAnalyticsConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleVideoAnalyticsConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:516 */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (175)
/* complex XSD type 'trt:GetCompatibleMetadataConfigurations': */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleMetadataConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleMetadataConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleMetadataConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleMetadataConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleMetadataConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleMetadataConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleMetadataConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:519 */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (176)
/* complex XSD type 'trt:GetCompatibleMetadataConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:MetadataConfiguration'
        std::vector<tt__MetadataConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleMetadataConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleMetadataConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleMetadataConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleMetadataConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:522 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (177)
/* complex XSD type 'trt:GetCompatibleAudioOutputConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioOutputConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioOutputConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioOutputConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioOutputConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:525 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (178)
/* complex XSD type 'trt:GetCompatibleAudioOutputConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioOutputConfiguration'
        std::vector<tt__AudioOutputConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioOutputConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioOutputConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioOutputConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioOutputConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:528 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (179)
/* complex XSD type 'trt:GetCompatibleAudioDecoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioDecoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioDecoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioDecoderConfigurations); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioDecoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:531 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (180)
/* complex XSD type 'trt:GetCompatibleAudioDecoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse {
      public:
        /// Optional element 'trt:Configurations' of XSD type 'tt:AudioDecoderConfiguration'
        std::vector<tt__AudioDecoderConfiguration *> Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioDecoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioDecoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioDecoderConfigurationsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetCompatibleAudioDecoderConfigurationsResponse() : Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:534 */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (181)
/* complex XSD type 'trt:SetVideoEncoderConfiguration': */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetVideoEncoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:537 */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (182)
/* complex XSD type 'trt:SetVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:540 */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (183)
/* complex XSD type 'trt:SetVideoSourceConfiguration': */
class SOAP_CMAC _trt__SetVideoSourceConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetVideoSourceConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:543 */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (184)
/* complex XSD type 'trt:SetVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:546 */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (185)
/* complex XSD type 'trt:SetAudioEncoderConfiguration': */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioEncoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetAudioEncoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:549 */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (186)
/* complex XSD type 'trt:SetAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:552 */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (187)
/* complex XSD type 'trt:SetAudioSourceConfiguration': */
class SOAP_CMAC _trt__SetAudioSourceConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioSourceConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetAudioSourceConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:555 */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (188)
/* complex XSD type 'trt:SetAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioSourceConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:558 */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (189)
/* complex XSD type 'trt:SetVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoAnalyticsConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetVideoAnalyticsConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:561 */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (190)
/* complex XSD type 'trt:SetVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:564 */
#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (191)
/* complex XSD type 'trt:SetMetadataConfiguration': */
class SOAP_CMAC _trt__SetMetadataConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetMetadataConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetMetadataConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:567 */
#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (192)
/* complex XSD type 'trt:SetMetadataConfigurationResponse': */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetMetadataConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__SetMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:570 */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (193)
/* complex XSD type 'trt:SetAudioOutputConfiguration': */
class SOAP_CMAC _trt__SetAudioOutputConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioOutputConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetAudioOutputConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:573 */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (194)
/* complex XSD type 'trt:SetAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioOutputConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:576 */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (195)
/* complex XSD type 'trt:SetAudioDecoderConfiguration': */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XSD type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XSD type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioDecoderConfiguration); }
      public:
        /// Constructor with initializations
        _trt__SetAudioDecoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:579 */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (196)
/* complex XSD type 'trt:SetAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with initializations
        _trt__SetAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:582 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (197)
/* complex XSD type 'trt:GetVideoSourceConfigurationOptions': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:585 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (198)
/* complex XSD type 'trt:GetVideoSourceConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:VideoSourceConfigurationOptions'
        tt__VideoSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:588 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (199)
/* complex XSD type 'trt:GetVideoEncoderConfigurationOptions': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:591 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (200)
/* complex XSD type 'trt:GetVideoEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:VideoEncoderConfigurationOptions'
        tt__VideoEncoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoEncoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:594 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (201)
/* complex XSD type 'trt:GetAudioSourceConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:597 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (202)
/* complex XSD type 'trt:GetAudioSourceConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:AudioSourceConfigurationOptions'
        tt__AudioSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:600 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (203)
/* complex XSD type 'trt:GetAudioEncoderConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:603 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (204)
/* complex XSD type 'trt:GetAudioEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:AudioEncoderConfigurationOptions'
        tt__AudioEncoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioEncoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:606 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (205)
/* complex XSD type 'trt:GetMetadataConfigurationOptions': */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetMetadataConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:609 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (206)
/* complex XSD type 'trt:GetMetadataConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:MetadataConfigurationOptions'
        tt__MetadataConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetMetadataConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:612 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (207)
/* complex XSD type 'trt:GetAudioOutputConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:615 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (208)
/* complex XSD type 'trt:GetAudioOutputConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:AudioOutputConfigurationOptions'
        tt__AudioOutputConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioOutputConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:618 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (209)
/* complex XSD type 'trt:GetAudioDecoderConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:621 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (210)
/* complex XSD type 'trt:GetAudioDecoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XSD type 'tt:AudioDecoderConfigurationOptions'
        tt__AudioDecoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetAudioDecoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:624 */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (211)
/* complex XSD type 'trt:GetGuaranteedNumberOfVideoEncoderInstances': */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetGuaranteedNumberOfVideoEncoderInstances, default initialized and not managed by a soap context
        virtual _trt__GetGuaranteedNumberOfVideoEncoderInstances *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetGuaranteedNumberOfVideoEncoderInstances); }
      public:
        /// Constructor with initializations
        _trt__GetGuaranteedNumberOfVideoEncoderInstances() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
        /// Friend allocator used by soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:627 */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (212)
/* complex XSD type 'trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse': */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse {
      public:
        /// Required element 'trt:TotalNumber' of XSD type 'xsd:int'
        int TotalNumber;
        /// Optional element 'trt:JPEG' of XSD type 'xsd:int'
        int *JPEG;
        /// Optional element 'trt:H264' of XSD type 'xsd:int'
        int *H264;
        /// Optional element 'trt:MPEG4' of XSD type 'xsd:int'
        int *MPEG4;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse, default initialized and not managed by a soap context
        virtual _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() : TotalNumber(), JPEG(), H264(), MPEG4(), soap() { }
        virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
        /// Friend allocator used by soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:630 */
#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (213)
/* complex XSD type 'trt:GetStreamUri': */
class SOAP_CMAC _trt__GetStreamUri {
      public:
        /// Required element 'trt:StreamSetup' of XSD type 'tt:StreamSetup'
        tt__StreamSetup *StreamSetup;
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetStreamUri
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetStreamUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetStreamUri, default initialized and not managed by a soap context
        virtual _trt__GetStreamUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetStreamUri); }
      public:
        /// Constructor with initializations
        _trt__GetStreamUri() : StreamSetup(), ProfileToken(), soap() { }
        virtual ~_trt__GetStreamUri() { }
        /// Friend allocator used by soap_new__trt__GetStreamUri(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetStreamUri * SOAP_FMAC2 soap_instantiate__trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:633 */
#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (214)
/* complex XSD type 'trt:GetStreamUriResponse': */
class SOAP_CMAC _trt__GetStreamUriResponse {
      public:
        /// Required element 'trt:MediaUri' of XSD type 'tt:MediaUri'
        tt__MediaUri *MediaUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetStreamUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetStreamUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetStreamUriResponse, default initialized and not managed by a soap context
        virtual _trt__GetStreamUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetStreamUriResponse); }
      public:
        /// Constructor with initializations
        _trt__GetStreamUriResponse() : MediaUri(), soap() { }
        virtual ~_trt__GetStreamUriResponse() { }
        /// Friend allocator used by soap_new__trt__GetStreamUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:636 */
#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (215)
/* complex XSD type 'trt:StartMulticastStreaming': */
class SOAP_CMAC _trt__StartMulticastStreaming {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StartMulticastStreaming
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StartMulticastStreaming; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StartMulticastStreaming, default initialized and not managed by a soap context
        virtual _trt__StartMulticastStreaming *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StartMulticastStreaming); }
      public:
        /// Constructor with initializations
        _trt__StartMulticastStreaming() : ProfileToken(), soap() { }
        virtual ~_trt__StartMulticastStreaming() { }
        /// Friend allocator used by soap_new__trt__StartMulticastStreaming(struct soap*, int)
        friend SOAP_FMAC1 _trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:639 */
#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (216)
/* complex XSD type 'trt:StartMulticastStreamingResponse': */
class SOAP_CMAC _trt__StartMulticastStreamingResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StartMulticastStreamingResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StartMulticastStreamingResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StartMulticastStreamingResponse, default initialized and not managed by a soap context
        virtual _trt__StartMulticastStreamingResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StartMulticastStreamingResponse); }
      public:
        /// Constructor with initializations
        _trt__StartMulticastStreamingResponse() : soap() { }
        virtual ~_trt__StartMulticastStreamingResponse() { }
        /// Friend allocator used by soap_new__trt__StartMulticastStreamingResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:642 */
#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (217)
/* complex XSD type 'trt:StopMulticastStreaming': */
class SOAP_CMAC _trt__StopMulticastStreaming {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StopMulticastStreaming
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StopMulticastStreaming; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StopMulticastStreaming, default initialized and not managed by a soap context
        virtual _trt__StopMulticastStreaming *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StopMulticastStreaming); }
      public:
        /// Constructor with initializations
        _trt__StopMulticastStreaming() : ProfileToken(), soap() { }
        virtual ~_trt__StopMulticastStreaming() { }
        /// Friend allocator used by soap_new__trt__StopMulticastStreaming(struct soap*, int)
        friend SOAP_FMAC1 _trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:645 */
#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (218)
/* complex XSD type 'trt:StopMulticastStreamingResponse': */
class SOAP_CMAC _trt__StopMulticastStreamingResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StopMulticastStreamingResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StopMulticastStreamingResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StopMulticastStreamingResponse, default initialized and not managed by a soap context
        virtual _trt__StopMulticastStreamingResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StopMulticastStreamingResponse); }
      public:
        /// Constructor with initializations
        _trt__StopMulticastStreamingResponse() : soap() { }
        virtual ~_trt__StopMulticastStreamingResponse() { }
        /// Friend allocator used by soap_new__trt__StopMulticastStreamingResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:648 */
#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (219)
/* complex XSD type 'trt:SetSynchronizationPoint': */
class SOAP_CMAC _trt__SetSynchronizationPoint {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetSynchronizationPoint
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetSynchronizationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetSynchronizationPoint, default initialized and not managed by a soap context
        virtual _trt__SetSynchronizationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetSynchronizationPoint); }
      public:
        /// Constructor with initializations
        _trt__SetSynchronizationPoint() : ProfileToken(), soap() { }
        virtual ~_trt__SetSynchronizationPoint() { }
        /// Friend allocator used by soap_new__trt__SetSynchronizationPoint(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:651 */
#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (220)
/* complex XSD type 'trt:SetSynchronizationPointResponse': */
class SOAP_CMAC _trt__SetSynchronizationPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetSynchronizationPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetSynchronizationPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetSynchronizationPointResponse, default initialized and not managed by a soap context
        virtual _trt__SetSynchronizationPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetSynchronizationPointResponse); }
      public:
        /// Constructor with initializations
        _trt__SetSynchronizationPointResponse() : soap() { }
        virtual ~_trt__SetSynchronizationPointResponse() { }
        /// Friend allocator used by soap_new__trt__SetSynchronizationPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:654 */
#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (221)
/* complex XSD type 'trt:GetSnapshotUri': */
class SOAP_CMAC _trt__GetSnapshotUri {
      public:
        /// Required element 'trt:ProfileToken' of XSD type 'tt:ReferenceToken'
        std::string ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetSnapshotUri
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetSnapshotUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetSnapshotUri, default initialized and not managed by a soap context
        virtual _trt__GetSnapshotUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetSnapshotUri); }
      public:
        /// Constructor with initializations
        _trt__GetSnapshotUri() : ProfileToken(), soap() { }
        virtual ~_trt__GetSnapshotUri() { }
        /// Friend allocator used by soap_new__trt__GetSnapshotUri(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:657 */
#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (222)
/* complex XSD type 'trt:GetSnapshotUriResponse': */
class SOAP_CMAC _trt__GetSnapshotUriResponse {
      public:
        /// Required element 'trt:MediaUri' of XSD type 'tt:MediaUri'
        tt__MediaUri *MediaUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetSnapshotUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetSnapshotUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetSnapshotUriResponse, default initialized and not managed by a soap context
        virtual _trt__GetSnapshotUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetSnapshotUriResponse); }
      public:
        /// Constructor with initializations
        _trt__GetSnapshotUriResponse() : MediaUri(), soap() { }
        virtual ~_trt__GetSnapshotUriResponse() { }
        /// Friend allocator used by soap_new__trt__GetSnapshotUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:660 */
#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (223)
/* complex XSD type 'trt:GetVideoSourceModes': */
class SOAP_CMAC _trt__GetVideoSourceModes {
      public:
        /// Required element 'trt:VideoSourceToken' of XSD type 'tt:ReferenceToken'
        std::string VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceModes
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceModes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceModes, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceModes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceModes); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceModes() : VideoSourceToken(), soap() { }
        virtual ~_trt__GetVideoSourceModes() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceModes(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:663 */
#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (224)
/* complex XSD type 'trt:GetVideoSourceModesResponse': */
class SOAP_CMAC _trt__GetVideoSourceModesResponse {
      public:
        /// Required element 'trt:VideoSourceModes' of XSD type 'trt:VideoSourceMode'
        std::vector<trt__VideoSourceMode *> VideoSourceModes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceModesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceModesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceModesResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceModesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceModesResponse); }
      public:
        /// Constructor with initializations
        _trt__GetVideoSourceModesResponse() : VideoSourceModes(), soap() { }
        virtual ~_trt__GetVideoSourceModesResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceModesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:666 */
#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (225)
/* complex XSD type 'trt:SetVideoSourceMode': */
class SOAP_CMAC _trt__SetVideoSourceMode {
      public:
        /// Required element 'trt:VideoSourceToken' of XSD type 'tt:ReferenceToken'
        std::string VideoSourceToken;
        /// Required element 'trt:VideoSourceModeToken' of XSD type 'tt:ReferenceToken'
        std::string VideoSourceModeToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceMode, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceMode); }
      public:
        /// Constructor with initializations
        _trt__SetVideoSourceMode() : VideoSourceToken(), VideoSourceModeToken(), soap() { }
        virtual ~_trt__SetVideoSourceMode() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:669 */
#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (226)
/* complex XSD type 'trt:SetVideoSourceModeResponse': */
class SOAP_CMAC _trt__SetVideoSourceModeResponse {
      public:
        /// Required element 'trt:Reboot' of XSD type 'xsd:boolean'
        bool Reboot;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceModeResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceModeResponse); }
      public:
        /// Constructor with initializations
        _trt__SetVideoSourceModeResponse() : Reboot(), soap() { }
        virtual ~_trt__SetVideoSourceModeResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:672 */
#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (227)
/* complex XSD type 'trt:GetOSDs': */
class SOAP_CMAC _trt__GetOSDs {
      public:
        /// Optional element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDs
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDs, default initialized and not managed by a soap context
        virtual _trt__GetOSDs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDs); }
      public:
        /// Constructor with initializations
        _trt__GetOSDs() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetOSDs() { }
        /// Friend allocator used by soap_new__trt__GetOSDs(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDs * SOAP_FMAC2 soap_instantiate__trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:675 */
#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (228)
/* complex XSD type 'trt:GetOSDsResponse': */
class SOAP_CMAC _trt__GetOSDsResponse {
      public:
        /// Optional element 'trt:OSDs' of XSD type 'tt:OSDConfiguration'
        std::vector<tt__OSDConfiguration *> OSDs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDsResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetOSDsResponse() : OSDs(), soap() { }
        virtual ~_trt__GetOSDsResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:678 */
#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (229)
/* complex XSD type 'trt:GetOSD': */
class SOAP_CMAC _trt__GetOSD {
      public:
        /// Required element 'trt:OSDToken' of XSD type 'tt:ReferenceToken'
        std::string OSDToken;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSD, default initialized and not managed by a soap context
        virtual _trt__GetOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSD); }
      public:
        /// Constructor with initializations
        _trt__GetOSD() : OSDToken(), __any(), soap() { }
        virtual ~_trt__GetOSD() { }
        /// Friend allocator used by soap_new__trt__GetOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSD * SOAP_FMAC2 soap_instantiate__trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:681 */
#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (230)
/* complex XSD type 'trt:GetOSDResponse': */
class SOAP_CMAC _trt__GetOSDResponse {
      public:
        /// Required element 'trt:OSD' of XSD type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDResponse); }
      public:
        /// Constructor with initializations
        _trt__GetOSDResponse() : OSD(), __any(), soap() { }
        virtual ~_trt__GetOSDResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:684 */
#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (231)
/* complex XSD type 'trt:SetOSD': */
class SOAP_CMAC _trt__SetOSD {
      public:
        /// Required element 'trt:OSD' of XSD type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetOSD, default initialized and not managed by a soap context
        virtual _trt__SetOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetOSD); }
      public:
        /// Constructor with initializations
        _trt__SetOSD() : OSD(), __any(), soap() { }
        virtual ~_trt__SetOSD() { }
        /// Friend allocator used by soap_new__trt__SetOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetOSD * SOAP_FMAC2 soap_instantiate__trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:687 */
#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (232)
/* complex XSD type 'trt:SetOSDResponse': */
class SOAP_CMAC _trt__SetOSDResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetOSDResponse, default initialized and not managed by a soap context
        virtual _trt__SetOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetOSDResponse); }
      public:
        /// Constructor with initializations
        _trt__SetOSDResponse() : __any(), soap() { }
        virtual ~_trt__SetOSDResponse() { }
        /// Friend allocator used by soap_new__trt__SetOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:690 */
#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (233)
/* complex XSD type 'trt:GetOSDOptions': */
class SOAP_CMAC _trt__GetOSDOptions {
      public:
        /// Required element 'trt:ConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string ConfigurationToken;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDOptions, default initialized and not managed by a soap context
        virtual _trt__GetOSDOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDOptions); }
      public:
        /// Constructor with initializations
        _trt__GetOSDOptions() : ConfigurationToken(), __any(), soap() { }
        virtual ~_trt__GetOSDOptions() { }
        /// Friend allocator used by soap_new__trt__GetOSDOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:693 */
#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (234)
/* complex XSD type 'trt:GetOSDOptionsResponse': */
class SOAP_CMAC _trt__GetOSDOptionsResponse {
      public:
        /// Required element 'trt:OSDOptions' of XSD type 'tt:OSDConfigurationOptions'
        tt__OSDConfigurationOptions *OSDOptions;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDOptionsResponse); }
      public:
        /// Constructor with initializations
        _trt__GetOSDOptionsResponse() : OSDOptions(), __any(), soap() { }
        virtual ~_trt__GetOSDOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:696 */
#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (235)
/* complex XSD type 'trt:CreateOSD': */
class SOAP_CMAC _trt__CreateOSD {
      public:
        /// Required element 'trt:OSD' of XSD type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateOSD, default initialized and not managed by a soap context
        virtual _trt__CreateOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateOSD); }
      public:
        /// Constructor with initializations
        _trt__CreateOSD() : OSD(), __any(), soap() { }
        virtual ~_trt__CreateOSD() { }
        /// Friend allocator used by soap_new__trt__CreateOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateOSD * SOAP_FMAC2 soap_instantiate__trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:699 */
#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (236)
/* complex XSD type 'trt:CreateOSDResponse': */
class SOAP_CMAC _trt__CreateOSDResponse {
      public:
        /// Required element 'trt:OSDToken' of XSD type 'tt:ReferenceToken'
        std::string OSDToken;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateOSDResponse, default initialized and not managed by a soap context
        virtual _trt__CreateOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateOSDResponse); }
      public:
        /// Constructor with initializations
        _trt__CreateOSDResponse() : OSDToken(), __any(), soap() { }
        virtual ~_trt__CreateOSDResponse() { }
        /// Friend allocator used by soap_new__trt__CreateOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__trt__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:702 */
#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (237)
/* complex XSD type 'trt:DeleteOSD': */
class SOAP_CMAC _trt__DeleteOSD {
      public:
        /// Required element 'trt:OSDToken' of XSD type 'tt:ReferenceToken'
        std::string OSDToken;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteOSD, default initialized and not managed by a soap context
        virtual _trt__DeleteOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteOSD); }
      public:
        /// Constructor with initializations
        _trt__DeleteOSD() : OSDToken(), __any(), soap() { }
        virtual ~_trt__DeleteOSD() { }
        /// Friend allocator used by soap_new__trt__DeleteOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteOSD * SOAP_FMAC2 soap_instantiate__trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:705 */
#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (238)
/* complex XSD type 'trt:DeleteOSDResponse': */
class SOAP_CMAC _trt__DeleteOSDResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteOSDResponse, default initialized and not managed by a soap context
        virtual _trt__DeleteOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteOSDResponse); }
      public:
        /// Constructor with initializations
        _trt__DeleteOSDResponse() : __any(), soap() { }
        virtual ~_trt__DeleteOSDResponse() { }
        /// Friend allocator used by soap_new__trt__DeleteOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:708 */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (239)
/* Type tt__DeviceEntity is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:DeviceEntity': */
class SOAP_CMAC tt__DeviceEntity {
      public:
        /// required attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceEntity, default initialized and not managed by a soap context
        virtual tt__DeviceEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceEntity); }
      public:
        /// Constructor with initializations
        tt__DeviceEntity() : token(), soap() { }
        virtual ~tt__DeviceEntity() { }
        /// Friend allocator used by soap_new_tt__DeviceEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:711 */
#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (240)
/* complex XSD type 'tt:IntRectangle': */
class SOAP_CMAC tt__IntRectangle {
      public:
        /// required attribute 'x' of XSD type 'xsd:int'
        int x;
        /// required attribute 'y' of XSD type 'xsd:int'
        int y;
        /// required attribute 'width' of XSD type 'xsd:int'
        int width;
        /// required attribute 'height' of XSD type 'xsd:int'
        int height;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRectangle
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRectangle, default initialized and not managed by a soap context
        virtual tt__IntRectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRectangle); }
      public:
        /// Constructor with initializations
        tt__IntRectangle() : x(), y(), width(), height(), soap() { }
        virtual ~tt__IntRectangle() { }
        /// Friend allocator used by soap_new_tt__IntRectangle(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRectangle * SOAP_FMAC2 soap_instantiate_tt__IntRectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:714 */
#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (241)
/* complex XSD type 'tt:IntRectangleRange': */
class SOAP_CMAC tt__IntRectangleRange {
      public:
        /// Required element 'tt:XRange' of XSD type 'tt:IntRange'
        tt__IntRange *XRange;
        /// Required element 'tt:YRange' of XSD type 'tt:IntRange'
        tt__IntRange *YRange;
        /// Required element 'tt:WidthRange' of XSD type 'tt:IntRange'
        tt__IntRange *WidthRange;
        /// Required element 'tt:HeightRange' of XSD type 'tt:IntRange'
        tt__IntRange *HeightRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRectangleRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRectangleRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRectangleRange, default initialized and not managed by a soap context
        virtual tt__IntRectangleRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRectangleRange); }
      public:
        /// Constructor with initializations
        tt__IntRectangleRange() : XRange(), YRange(), WidthRange(), HeightRange(), soap() { }
        virtual ~tt__IntRectangleRange() { }
        /// Friend allocator used by soap_new_tt__IntRectangleRange(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRectangleRange * SOAP_FMAC2 soap_instantiate_tt__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:717 */
#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (242)
/* complex XSD type 'tt:FloatRange': */
class SOAP_CMAC tt__FloatRange {
      public:
        /// Required element 'tt:Min' of XSD type 'xsd:float'
        float Min;
        /// Required element 'tt:Max' of XSD type 'xsd:float'
        float Max;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FloatRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FloatRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FloatRange, default initialized and not managed by a soap context
        virtual tt__FloatRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FloatRange); }
      public:
        /// Constructor with initializations
        tt__FloatRange() : Min(), Max(), soap() { }
        virtual ~tt__FloatRange() { }
        /// Friend allocator used by soap_new_tt__FloatRange(struct soap*, int)
        friend SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:720 */
#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (243)
/* complex XSD type 'tt:DurationRange': */
class SOAP_CMAC tt__DurationRange {
      public:
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 Min;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 Max;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DurationRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DurationRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DurationRange, default initialized and not managed by a soap context
        virtual tt__DurationRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DurationRange); }
      public:
        /// Constructor with initializations
        tt__DurationRange() : Min(), Max(), soap() { }
        virtual ~tt__DurationRange() { }
        /// Friend allocator used by soap_new_tt__DurationRange(struct soap*, int)
        friend SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:723 */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (244)
/* complex XSD type 'tt:IntList': */
class SOAP_CMAC tt__IntList {
      public:
        /// Optional element 'tt:Items' of XSD type 'xsd:int'
        std::vector<int> Items;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntList, default initialized and not managed by a soap context
        virtual tt__IntList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntList); }
      public:
        /// Constructor with initializations
        tt__IntList() : Items(), soap() { }
        virtual ~tt__IntList() { }
        /// Friend allocator used by soap_new_tt__IntList(struct soap*, int)
        friend SOAP_FMAC1 tt__IntList * SOAP_FMAC2 soap_instantiate_tt__IntList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:726 */
#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (245)
/* complex XSD type 'tt:FloatList': */
class SOAP_CMAC tt__FloatList {
      public:
        /// Optional element 'tt:Items' of XSD type 'xsd:float'
        std::vector<float> Items;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FloatList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FloatList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FloatList, default initialized and not managed by a soap context
        virtual tt__FloatList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FloatList); }
      public:
        /// Constructor with initializations
        tt__FloatList() : Items(), soap() { }
        virtual ~tt__FloatList() { }
        /// Friend allocator used by soap_new_tt__FloatList(struct soap*, int)
        friend SOAP_FMAC1 tt__FloatList * SOAP_FMAC2 soap_instantiate_tt__FloatList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:729 */
#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (246)
/* complex XSD type 'tt:AnyHolder': */
class SOAP_CMAC tt__AnyHolder {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnyHolder
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnyHolder; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnyHolder, default initialized and not managed by a soap context
        virtual tt__AnyHolder *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnyHolder); }
      public:
        /// Constructor with initializations
        tt__AnyHolder() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__AnyHolder() { }
        /// Friend allocator used by soap_new_tt__AnyHolder(struct soap*, int)
        friend SOAP_FMAC1 tt__AnyHolder * SOAP_FMAC2 soap_instantiate_tt__AnyHolder(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:735 */
#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (248)
/* complex XSD type 'tt:VideoSourceExtension': */
class SOAP_CMAC tt__VideoSourceExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Imaging' of XSD type 'tt:ImagingSettings20'
        tt__ImagingSettings20 *Imaging;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceExtension2'
        tt__VideoSourceExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceExtension); }
      public:
        /// Constructor with initializations
        tt__VideoSourceExtension() : __any(), Imaging(), Extension(), soap() { }
        virtual ~tt__VideoSourceExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:738 */
#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (249)
/* complex XSD type 'tt:VideoSourceExtension2': */
class SOAP_CMAC tt__VideoSourceExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceExtension2); }
      public:
        /// Constructor with initializations
        tt__VideoSourceExtension2() : __any(), soap() { }
        virtual ~tt__VideoSourceExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:744 */
#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (251)
/* complex XSD type 'tt:Profile': */
class SOAP_CMAC tt__Profile {
      public:
        /// Required element 'tt:Name' of XSD type 'tt:Name'
        std::string Name;
        /// Optional element 'tt:VideoSourceConfiguration' of XSD type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *VideoSourceConfiguration;
        /// Optional element 'tt:AudioSourceConfiguration' of XSD type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *AudioSourceConfiguration;
        /// Optional element 'tt:VideoEncoderConfiguration' of XSD type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *VideoEncoderConfiguration;
        /// Optional element 'tt:AudioEncoderConfiguration' of XSD type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *AudioEncoderConfiguration;
        /// Optional element 'tt:VideoAnalyticsConfiguration' of XSD type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;
        /// Optional element 'tt:PTZConfiguration' of XSD type 'tt:PTZConfiguration'
        tt__PTZConfiguration *PTZConfiguration;
        /// Optional element 'tt:MetadataConfiguration' of XSD type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *MetadataConfiguration;
        /// Optional element 'tt:Extension' of XSD type 'tt:ProfileExtension'
        tt__ProfileExtension *Extension;
        /// required attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string token;
        /// optional attribute 'fixed' of XSD type 'xsd:boolean'
        bool *fixed;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Profile
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Profile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Profile, default initialized and not managed by a soap context
        virtual tt__Profile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Profile); }
      public:
        /// Constructor with initializations
        tt__Profile() : Name(), VideoSourceConfiguration(), AudioSourceConfiguration(), VideoEncoderConfiguration(), AudioEncoderConfiguration(), VideoAnalyticsConfiguration(), PTZConfiguration(), MetadataConfiguration(), Extension(), token(), fixed(), __anyAttribute(), soap() { }
        virtual ~tt__Profile() { }
        /// Friend allocator used by soap_new_tt__Profile(struct soap*, int)
        friend SOAP_FMAC1 tt__Profile * SOAP_FMAC2 soap_instantiate_tt__Profile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:747 */
#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (252)
/* complex XSD type 'tt:ProfileExtension': */
class SOAP_CMAC tt__ProfileExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:AudioOutputConfiguration' of XSD type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *AudioOutputConfiguration;
        /// Optional element 'tt:AudioDecoderConfiguration' of XSD type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *AudioDecoderConfiguration;
        /// Optional element 'tt:Extension' of XSD type 'tt:ProfileExtension2'
        tt__ProfileExtension2 *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileExtension, default initialized and not managed by a soap context
        virtual tt__ProfileExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileExtension); }
      public:
        /// Constructor with initializations
        tt__ProfileExtension() : __any(), AudioOutputConfiguration(), AudioDecoderConfiguration(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ProfileExtension() { }
        /// Friend allocator used by soap_new_tt__ProfileExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:750 */
#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (253)
/* complex XSD type 'tt:ProfileExtension2': */
class SOAP_CMAC tt__ProfileExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileExtension2, default initialized and not managed by a soap context
        virtual tt__ProfileExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileExtension2); }
      public:
        /// Constructor with initializations
        tt__ProfileExtension2() : __any(), soap() { }
        virtual ~tt__ProfileExtension2() { }
        /// Friend allocator used by soap_new_tt__ProfileExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:753 */
#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (254)
/* Type tt__ConfigurationEntity is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:ConfigurationEntity': */
class SOAP_CMAC tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Name' of XSD type 'tt:Name'
        std::string Name;
        /// Required element 'tt:UseCount' of XSD type 'xsd:int'
        int UseCount;
        /// required attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigurationEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigurationEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigurationEntity, default initialized and not managed by a soap context
        virtual tt__ConfigurationEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigurationEntity); }
      public:
        /// Constructor with initializations
        tt__ConfigurationEntity() : Name(), UseCount(), token(), soap() { }
        virtual ~tt__ConfigurationEntity() { }
        /// Friend allocator used by soap_new_tt__ConfigurationEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:759 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (256)
/* complex XSD type 'tt:VideoSourceConfigurationExtension': */
class SOAP_CMAC tt__VideoSourceConfigurationExtension {
      public:
        /// Optional element 'tt:Rotate' of XSD type 'tt:Rotate'
        tt__Rotate *Rotate;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceConfigurationExtension2'
        tt__VideoSourceConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfigurationExtension() : Rotate(), Extension(), soap() { }
        virtual ~tt__VideoSourceConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:762 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (257)
/* complex XSD type 'tt:VideoSourceConfigurationExtension2': */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2 {
      public:
        /// Optional element 'tt:LensDescription' of XSD type 'tt:LensDescription'
        std::vector<tt__LensDescription *> LensDescription;
        /// Optional element 'tt:SceneOrientation' of XSD type 'tt:SceneOrientation'
        tt__SceneOrientation *SceneOrientation;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationExtension2); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfigurationExtension2() : LensDescription(), SceneOrientation(), __any(), soap() { }
        virtual ~tt__VideoSourceConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:765 */
#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (258)
/* complex XSD type 'tt:Rotate': */
class SOAP_CMAC tt__Rotate {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:RotateMode'
        tt__RotateMode Mode;
        /// Optional element 'tt:Degree' of XSD type 'xsd:int'
        int *Degree;
        /// Optional element 'tt:Extension' of XSD type 'tt:RotateExtension'
        tt__RotateExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Rotate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Rotate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Rotate, default initialized and not managed by a soap context
        virtual tt__Rotate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Rotate); }
      public:
        /// Constructor with initializations
        tt__Rotate() : Mode(), Degree(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Rotate() { }
        /// Friend allocator used by soap_new_tt__Rotate(struct soap*, int)
        friend SOAP_FMAC1 tt__Rotate * SOAP_FMAC2 soap_instantiate_tt__Rotate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:768 */
#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (259)
/* complex XSD type 'tt:RotateExtension': */
class SOAP_CMAC tt__RotateExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateExtension, default initialized and not managed by a soap context
        virtual tt__RotateExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateExtension); }
      public:
        /// Constructor with initializations
        tt__RotateExtension() : __any(), soap() { }
        virtual ~tt__RotateExtension() { }
        /// Friend allocator used by soap_new_tt__RotateExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateExtension * SOAP_FMAC2 soap_instantiate_tt__RotateExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:771 */
#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (260)
/* complex XSD type 'tt:LensProjection': */
class SOAP_CMAC tt__LensProjection {
      public:
        /// Required element 'tt:Angle' of XSD type 'xsd:float'
        float Angle;
        /// Required element 'tt:Radius' of XSD type 'xsd:float'
        float Radius;
        /// Optional element 'tt:Transmittance' of XSD type 'xsd:float'
        float *Transmittance;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensProjection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensProjection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensProjection, default initialized and not managed by a soap context
        virtual tt__LensProjection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensProjection); }
      public:
        /// Constructor with initializations
        tt__LensProjection() : Angle(), Radius(), Transmittance(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__LensProjection() { }
        /// Friend allocator used by soap_new_tt__LensProjection(struct soap*, int)
        friend SOAP_FMAC1 tt__LensProjection * SOAP_FMAC2 soap_instantiate_tt__LensProjection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:774 */
#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (261)
/* complex XSD type 'tt:LensOffset': */
class SOAP_CMAC tt__LensOffset {
      public:
        /// optional attribute 'x' of XSD type 'xsd:float'
        float *x;
        /// optional attribute 'y' of XSD type 'xsd:float'
        float *y;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensOffset
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensOffset, default initialized and not managed by a soap context
        virtual tt__LensOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensOffset); }
      public:
        /// Constructor with initializations
        tt__LensOffset() : x(), y(), __anyAttribute(), soap() { }
        virtual ~tt__LensOffset() { }
        /// Friend allocator used by soap_new_tt__LensOffset(struct soap*, int)
        friend SOAP_FMAC1 tt__LensOffset * SOAP_FMAC2 soap_instantiate_tt__LensOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:777 */
#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (262)
/* complex XSD type 'tt:LensDescription': */
class SOAP_CMAC tt__LensDescription {
      public:
        /// Required element 'tt:Offset' of XSD type 'tt:LensOffset'
        tt__LensOffset *Offset;
        /// Required element 'tt:Projection' of XSD type 'tt:LensProjection'
        std::vector<tt__LensProjection *> Projection;
        /// Required element 'tt:XFactor' of XSD type 'xsd:float'
        float XFactor;
        std::vector<char *> __any;
        /// optional attribute 'FocalLength' of XSD type 'xsd:float'
        float *FocalLength;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensDescription, default initialized and not managed by a soap context
        virtual tt__LensDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensDescription); }
      public:
        /// Constructor with initializations
        tt__LensDescription() : Offset(), Projection(), XFactor(), __any(), FocalLength(), __anyAttribute(), soap() { }
        virtual ~tt__LensDescription() { }
        /// Friend allocator used by soap_new_tt__LensDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__LensDescription * SOAP_FMAC2 soap_instantiate_tt__LensDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:780 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (263)
/* complex XSD type 'tt:VideoSourceConfigurationOptions': */
class SOAP_CMAC tt__VideoSourceConfigurationOptions {
      public:
        /// Required element 'tt:BoundsRange' of XSD type 'tt:IntRectangleRange'
        tt__IntRectangleRange *BoundsRange;
        /// Required element 'tt:VideoSourceTokensAvailable' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> VideoSourceTokensAvailable;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceConfigurationOptionsExtension'
        tt__VideoSourceConfigurationOptionsExtension *Extension;
        /// optional attribute 'MaximumNumberOfProfiles' of XSD type 'xsd:int'
        int *MaximumNumberOfProfiles;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfigurationOptions() : BoundsRange(), VideoSourceTokensAvailable(), Extension(), MaximumNumberOfProfiles(), __anyAttribute(), soap() { }
        virtual ~tt__VideoSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:783 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (264)
/* complex XSD type 'tt:VideoSourceConfigurationOptionsExtension': */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Rotate' of XSD type 'tt:RotateOptions'
        tt__RotateOptions *Rotate;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceConfigurationOptionsExtension2'
        tt__VideoSourceConfigurationOptionsExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfigurationOptionsExtension() : __any(), Rotate(), Extension(), soap() { }
        virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:786 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (265)
/* complex XSD type 'tt:VideoSourceConfigurationOptionsExtension2': */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2 {
      public:
        /// Optional element 'tt:SceneOrientationMode' of XSD type 'tt:SceneOrientationMode'
        std::vector<tt__SceneOrientationMode> SceneOrientationMode;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptionsExtension2); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfigurationOptionsExtension2() : SceneOrientationMode(), __any(), soap() { }
        virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:789 */
#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (266)
/* complex XSD type 'tt:RotateOptions': */
class SOAP_CMAC tt__RotateOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:RotateMode'
        std::vector<tt__RotateMode> Mode;
        /// Optional element 'tt:DegreeList' of XSD type 'tt:IntList'
        tt__IntList *DegreeList;
        /// Optional element 'tt:Extension' of XSD type 'tt:RotateOptionsExtension'
        tt__RotateOptionsExtension *Extension;
        /// optional attribute 'Reboot' of XSD type 'xsd:boolean'
        bool *Reboot;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateOptions, default initialized and not managed by a soap context
        virtual tt__RotateOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateOptions); }
      public:
        /// Constructor with initializations
        tt__RotateOptions() : Mode(), DegreeList(), Extension(), Reboot(), __anyAttribute(), soap() { }
        virtual ~tt__RotateOptions() { }
        /// Friend allocator used by soap_new_tt__RotateOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateOptions * SOAP_FMAC2 soap_instantiate_tt__RotateOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:792 */
#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (267)
/* complex XSD type 'tt:RotateOptionsExtension': */
class SOAP_CMAC tt__RotateOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateOptionsExtension, default initialized and not managed by a soap context
        virtual tt__RotateOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__RotateOptionsExtension() : __any(), soap() { }
        virtual ~tt__RotateOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__RotateOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:795 */
#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (268)
/* complex XSD type 'tt:SceneOrientation': */
class SOAP_CMAC tt__SceneOrientation {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:SceneOrientationMode'
        tt__SceneOrientationMode Mode;
        /// Optional element 'tt:Orientation' of XSD type 'xsd:string'
        std::string *Orientation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SceneOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SceneOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SceneOrientation, default initialized and not managed by a soap context
        virtual tt__SceneOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SceneOrientation); }
      public:
        /// Constructor with initializations
        tt__SceneOrientation() : Mode(), Orientation(), soap() { }
        virtual ~tt__SceneOrientation() { }
        /// Friend allocator used by soap_new_tt__SceneOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__SceneOrientation * SOAP_FMAC2 soap_instantiate_tt__SceneOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:801 */
#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (270)
/* complex XSD type 'tt:VideoResolution': */
class SOAP_CMAC tt__VideoResolution {
      public:
        /// Required element 'tt:Width' of XSD type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XSD type 'xsd:int'
        int Height;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoResolution
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoResolution; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoResolution, default initialized and not managed by a soap context
        virtual tt__VideoResolution *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoResolution); }
      public:
        /// Constructor with initializations
        tt__VideoResolution() : Width(), Height(), soap() { }
        virtual ~tt__VideoResolution() { }
        /// Friend allocator used by soap_new_tt__VideoResolution(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoResolution * SOAP_FMAC2 soap_instantiate_tt__VideoResolution(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:804 */
#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (271)
/* complex XSD type 'tt:VideoRateControl': */
class SOAP_CMAC tt__VideoRateControl {
      public:
        /// Required element 'tt:FrameRateLimit' of XSD type 'xsd:int'
        int FrameRateLimit;
        /// Required element 'tt:EncodingInterval' of XSD type 'xsd:int'
        int EncodingInterval;
        /// Required element 'tt:BitrateLimit' of XSD type 'xsd:int'
        int BitrateLimit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoRateControl
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoRateControl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoRateControl, default initialized and not managed by a soap context
        virtual tt__VideoRateControl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoRateControl); }
      public:
        /// Constructor with initializations
        tt__VideoRateControl() : FrameRateLimit(), EncodingInterval(), BitrateLimit(), soap() { }
        virtual ~tt__VideoRateControl() { }
        /// Friend allocator used by soap_new_tt__VideoRateControl(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoRateControl * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:807 */
#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (272)
/* complex XSD type 'tt:Mpeg4Configuration': */
class SOAP_CMAC tt__Mpeg4Configuration {
      public:
        /// Required element 'tt:GovLength' of XSD type 'xsd:int'
        int GovLength;
        /// Required element 'tt:Mpeg4Profile' of XSD type 'tt:Mpeg4Profile'
        tt__Mpeg4Profile Mpeg4Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Configuration, default initialized and not managed by a soap context
        virtual tt__Mpeg4Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Configuration); }
      public:
        /// Constructor with initializations
        tt__Mpeg4Configuration() : GovLength(), Mpeg4Profile(), soap() { }
        virtual ~tt__Mpeg4Configuration() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:810 */
#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (273)
/* complex XSD type 'tt:H264Configuration': */
class SOAP_CMAC tt__H264Configuration {
      public:
        /// Required element 'tt:GovLength' of XSD type 'xsd:int'
        int GovLength;
        /// Required element 'tt:H264Profile' of XSD type 'tt:H264Profile'
        tt__H264Profile H264Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Configuration, default initialized and not managed by a soap context
        virtual tt__H264Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Configuration); }
      public:
        /// Constructor with initializations
        tt__H264Configuration() : GovLength(), H264Profile(), soap() { }
        virtual ~tt__H264Configuration() { }
        /// Friend allocator used by soap_new_tt__H264Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Configuration * SOAP_FMAC2 soap_instantiate_tt__H264Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:813 */
#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (274)
/* complex XSD type 'tt:VideoEncoderConfigurationOptions': */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions {
      public:
        /// Required element 'tt:QualityRange' of XSD type 'tt:IntRange'
        tt__IntRange *QualityRange;
        /// Optional element 'tt:JPEG' of XSD type 'tt:JpegOptions'
        tt__JpegOptions *JPEG;
        /// Optional element 'tt:MPEG4' of XSD type 'tt:Mpeg4Options'
        tt__Mpeg4Options *MPEG4;
        /// Optional element 'tt:H264' of XSD type 'tt:H264Options'
        tt__H264Options *H264;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoEncoderOptionsExtension'
        tt__VideoEncoderOptionsExtension *Extension;
        /// optional attribute 'GuaranteedFrameRateSupported' of XSD type 'xsd:boolean'
        bool *GuaranteedFrameRateSupported;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__VideoEncoderConfigurationOptions() : QualityRange(), JPEG(), MPEG4(), H264(), Extension(), GuaranteedFrameRateSupported(), __anyAttribute(), soap() { }
        virtual ~tt__VideoEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:816 */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (275)
/* complex XSD type 'tt:VideoEncoderOptionsExtension': */
class SOAP_CMAC tt__VideoEncoderOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:JPEG' of XSD type 'tt:JpegOptions2'
        tt__JpegOptions2 *JPEG;
        /// Optional element 'tt:MPEG4' of XSD type 'tt:Mpeg4Options2'
        tt__Mpeg4Options2 *MPEG4;
        /// Optional element 'tt:H264' of XSD type 'tt:H264Options2'
        tt__H264Options2 *H264;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoEncoderOptionsExtension2'
        tt__VideoEncoderOptionsExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoEncoderOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__VideoEncoderOptionsExtension() : __any(), JPEG(), MPEG4(), H264(), Extension(), soap() { }
        virtual ~tt__VideoEncoderOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:819 */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (276)
/* complex XSD type 'tt:VideoEncoderOptionsExtension2': */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__VideoEncoderOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderOptionsExtension2); }
      public:
        /// Constructor with initializations
        tt__VideoEncoderOptionsExtension2() : __any(), soap() { }
        virtual ~tt__VideoEncoderOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:822 */
#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (277)
/* Type tt__JpegOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:JpegOptions': */
class SOAP_CMAC tt__JpegOptions {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:FrameRateRange' of XSD type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XSD type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegOptions, default initialized and not managed by a soap context
        virtual tt__JpegOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegOptions); }
      public:
        /// Constructor with initializations
        tt__JpegOptions() : ResolutionsAvailable(), FrameRateRange(), EncodingIntervalRange(), soap() { }
        virtual ~tt__JpegOptions() { }
        /// Friend allocator used by soap_new_tt__JpegOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegOptions * SOAP_FMAC2 soap_instantiate_tt__JpegOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:828 */
#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (279)
/* Type tt__Mpeg4Options is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:Mpeg4Options': */
class SOAP_CMAC tt__Mpeg4Options {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:GovLengthRange' of XSD type 'tt:IntRange'
        tt__IntRange *GovLengthRange;
        /// Required element 'tt:FrameRateRange' of XSD type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XSD type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
        /// Required element 'tt:Mpeg4ProfilesSupported' of XSD type 'tt:Mpeg4Profile'
        std::vector<tt__Mpeg4Profile> Mpeg4ProfilesSupported;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Options
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Options; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Options, default initialized and not managed by a soap context
        virtual tt__Mpeg4Options *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Options); }
      public:
        /// Constructor with initializations
        tt__Mpeg4Options() : ResolutionsAvailable(), GovLengthRange(), FrameRateRange(), EncodingIntervalRange(), Mpeg4ProfilesSupported(), soap() { }
        virtual ~tt__Mpeg4Options() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Options(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Options * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:834 */
#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (281)
/* Type tt__H264Options is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:H264Options': */
class SOAP_CMAC tt__H264Options {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:GovLengthRange' of XSD type 'tt:IntRange'
        tt__IntRange *GovLengthRange;
        /// Required element 'tt:FrameRateRange' of XSD type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XSD type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
        /// Required element 'tt:H264ProfilesSupported' of XSD type 'tt:H264Profile'
        std::vector<tt__H264Profile> H264ProfilesSupported;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Options
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Options; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Options, default initialized and not managed by a soap context
        virtual tt__H264Options *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Options); }
      public:
        /// Constructor with initializations
        tt__H264Options() : ResolutionsAvailable(), GovLengthRange(), FrameRateRange(), EncodingIntervalRange(), H264ProfilesSupported(), soap() { }
        virtual ~tt__H264Options() { }
        /// Friend allocator used by soap_new_tt__H264Options(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Options * SOAP_FMAC2 soap_instantiate_tt__H264Options(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:843 */
#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (284)
/* complex XSD type 'tt:VideoResolution2': */
class SOAP_CMAC tt__VideoResolution2 {
      public:
        /// Required element 'tt:Width' of XSD type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XSD type 'xsd:int'
        int Height;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoResolution2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoResolution2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoResolution2, default initialized and not managed by a soap context
        virtual tt__VideoResolution2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoResolution2); }
      public:
        /// Constructor with initializations
        tt__VideoResolution2() : Width(), Height(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__VideoResolution2() { }
        /// Friend allocator used by soap_new_tt__VideoResolution2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoResolution2 * SOAP_FMAC2 soap_instantiate_tt__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:846 */
#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (285)
/* complex XSD type 'tt:VideoRateControl2': */
class SOAP_CMAC tt__VideoRateControl2 {
      public:
        /// Required element 'tt:FrameRateLimit' of XSD type 'xsd:float'
        float FrameRateLimit;
        /// Required element 'tt:BitrateLimit' of XSD type 'xsd:int'
        int BitrateLimit;
        std::vector<char *> __any;
        /// optional attribute 'ConstantBitRate' of XSD type 'xsd:boolean'
        bool *ConstantBitRate;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoRateControl2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoRateControl2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoRateControl2, default initialized and not managed by a soap context
        virtual tt__VideoRateControl2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoRateControl2); }
      public:
        /// Constructor with initializations
        tt__VideoRateControl2() : FrameRateLimit(), BitrateLimit(), __any(), ConstantBitRate(), __anyAttribute(), soap() { }
        virtual ~tt__VideoRateControl2() { }
        /// Friend allocator used by soap_new_tt__VideoRateControl2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoRateControl2 * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:849 */
#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (286)
/* complex XSD type 'tt:VideoEncoder2ConfigurationOptions': */
class SOAP_CMAC tt__VideoEncoder2ConfigurationOptions {
      public:
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Required element 'tt:QualityRange' of XSD type 'tt:FloatRange'
        tt__FloatRange *QualityRange;
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution2'
        std::vector<tt__VideoResolution2 *> ResolutionsAvailable;
        /// Required element 'tt:BitrateRange' of XSD type 'tt:IntRange'
        tt__IntRange *BitrateRange;
        std::vector<char *> __any;
        /// optional attribute 'GovLengthRange' of XSD type 'tt:IntAttrList'
        std::string *GovLengthRange;
        /// optional attribute 'FrameRatesSupported' of XSD type 'tt:FloatAttrList'
        std::string *FrameRatesSupported;
        /// optional attribute 'ProfilesSupported' of XSD type 'tt:StringAttrList'
        std::string *ProfilesSupported;
        /// optional attribute 'ConstantBitRateSupported' of XSD type 'xsd:boolean'
        bool *ConstantBitRateSupported;
        /// optional attribute 'GuaranteedFrameRateSupported' of XSD type 'xsd:boolean'
        bool *GuaranteedFrameRateSupported;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoder2ConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoEncoder2ConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoder2ConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__VideoEncoder2ConfigurationOptions() : Encoding(), QualityRange(), ResolutionsAvailable(), BitrateRange(), __any(), GovLengthRange(), FrameRatesSupported(), ProfilesSupported(), ConstantBitRateSupported(), GuaranteedFrameRateSupported(), __anyAttribute(), soap() { }
        virtual ~tt__VideoEncoder2ConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoEncoder2ConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:855 */
#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (288)
/* complex XSD type 'tt:AudioSourceConfigurationOptions': */
class SOAP_CMAC tt__AudioSourceConfigurationOptions {
      public:
        /// Required element 'tt:InputTokensAvailable' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> InputTokensAvailable;
        /// Optional element 'tt:Extension' of XSD type 'tt:AudioSourceOptionsExtension'
        tt__AudioSourceOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__AudioSourceConfigurationOptions() : InputTokensAvailable(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AudioSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:858 */
#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (289)
/* complex XSD type 'tt:AudioSourceOptionsExtension': */
class SOAP_CMAC tt__AudioSourceOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceOptionsExtension, default initialized and not managed by a soap context
        virtual tt__AudioSourceOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__AudioSourceOptionsExtension() : __any(), soap() { }
        virtual ~tt__AudioSourceOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__AudioSourceOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:864 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (291)
/* complex XSD type 'tt:AudioEncoderConfigurationOptions': */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions {
      public:
        /// Optional element 'tt:Options' of XSD type 'tt:AudioEncoderConfigurationOption'
        std::vector<tt__AudioEncoderConfigurationOption *> Options;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__AudioEncoderConfigurationOptions() : Options(), __anyAttribute(), soap() { }
        virtual ~tt__AudioEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:867 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (292)
/* complex XSD type 'tt:AudioEncoderConfigurationOption': */
class SOAP_CMAC tt__AudioEncoderConfigurationOption {
      public:
        /// Required element 'tt:Encoding' of XSD type 'tt:AudioEncoding'
        tt__AudioEncoding Encoding;
        /// Required element 'tt:BitrateList' of XSD type 'tt:IntList'
        tt__IntList *BitrateList;
        /// Required element 'tt:SampleRateList' of XSD type 'tt:IntList'
        tt__IntList *SampleRateList;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOption
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfigurationOption; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfigurationOption, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfigurationOption *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfigurationOption); }
      public:
        /// Constructor with initializations
        tt__AudioEncoderConfigurationOption() : Encoding(), BitrateList(), SampleRateList(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioEncoderConfigurationOption() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfigurationOption(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:873 */
#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (294)
/* complex XSD type 'tt:AudioEncoder2ConfigurationOptions': */
class SOAP_CMAC tt__AudioEncoder2ConfigurationOptions {
      public:
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Required element 'tt:BitrateList' of XSD type 'tt:IntList'
        tt__IntList *BitrateList;
        /// Required element 'tt:SampleRateList' of XSD type 'tt:IntList'
        tt__IntList *SampleRateList;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoder2ConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioEncoder2ConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoder2ConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__AudioEncoder2ConfigurationOptions() : Encoding(), BitrateList(), SampleRateList(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioEncoder2ConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioEncoder2ConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:882 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (297)
/* complex XSD type 'tt:MetadataConfigurationExtension': */
class SOAP_CMAC tt__MetadataConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__MetadataConfigurationExtension() : __any(), soap() { }
        virtual ~tt__MetadataConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:885 */
#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (298)
/* complex XSD type 'tt:PTZFilter': */
class SOAP_CMAC tt__PTZFilter {
      public:
        /// Required element 'tt:Status' of XSD type 'xsd:boolean'
        bool Status;
        /// Required element 'tt:Position' of XSD type 'xsd:boolean'
        bool Position;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZFilter, default initialized and not managed by a soap context
        virtual tt__PTZFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZFilter); }
      public:
        /// Constructor with initializations
        tt__PTZFilter() : Status(), Position(), __anyAttribute(), soap() { }
        virtual ~tt__PTZFilter() { }
        /// Friend allocator used by soap_new_tt__PTZFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZFilter * SOAP_FMAC2 soap_instantiate_tt__PTZFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:8848 */
#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (954)
/* complex XSD type 'tt:EventSubscription-SubscriptionPolicy': */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__EventSubscription_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _tt__EventSubscription_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__EventSubscription_SubscriptionPolicy); }
      public:
        /// Constructor with initializations
        _tt__EventSubscription_SubscriptionPolicy() : __any() { }
        virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__tt__EventSubscription_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:888 */
#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (299)
/* complex XSD type 'tt:EventSubscription': */
class SOAP_CMAC tt__EventSubscription {
      public:
        /// Optional element 'tt:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'tt:SubscriptionPolicy' of XSD type 'tt:EventSubscription-SubscriptionPolicy'
        _tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventSubscription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventSubscription, default initialized and not managed by a soap context
        virtual tt__EventSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventSubscription); }
      public:
        /// Constructor with initializations
        tt__EventSubscription() : Filter(), SubscriptionPolicy(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__EventSubscription() { }
        /// Friend allocator used by soap_new_tt__EventSubscription(struct soap*, int)
        friend SOAP_FMAC1 tt__EventSubscription * SOAP_FMAC2 soap_instantiate_tt__EventSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:891 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (300)
/* complex XSD type 'tt:MetadataConfigurationOptions': */
class SOAP_CMAC tt__MetadataConfigurationOptions {
      public:
        /// Required element 'tt:PTZStatusFilterOptions' of XSD type 'tt:PTZStatusFilterOptions'
        tt__PTZStatusFilterOptions *PTZStatusFilterOptions;
        std::vector<char *> __any;
        /// Optional element 'tt:Extension' of XSD type 'tt:MetadataConfigurationOptionsExtension'
        tt__MetadataConfigurationOptionsExtension *Extension;
        /// optional attribute 'GeoLocation' of XSD type 'xsd:boolean'
        bool *GeoLocation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__MetadataConfigurationOptions() : PTZStatusFilterOptions(), __any(), Extension(), GeoLocation(), __anyAttribute(), soap() { }
        virtual ~tt__MetadataConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:894 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (301)
/* complex XSD type 'tt:MetadataConfigurationOptionsExtension': */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension {
      public:
        /// Optional element 'tt:CompressionType' of XSD type 'xsd:string'
        std::vector<std::string> CompressionType;
        /// Optional element 'tt:Extension' of XSD type 'tt:MetadataConfigurationOptionsExtension2'
        tt__MetadataConfigurationOptionsExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__MetadataConfigurationOptionsExtension() : CompressionType(), Extension(), soap() { }
        virtual ~tt__MetadataConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:897 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (302)
/* complex XSD type 'tt:MetadataConfigurationOptionsExtension2': */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptionsExtension2); }
      public:
        /// Constructor with initializations
        tt__MetadataConfigurationOptionsExtension2() : __any(), soap() { }
        virtual ~tt__MetadataConfigurationOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:900 */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (303)
/* complex XSD type 'tt:PTZStatusFilterOptions': */
class SOAP_CMAC tt__PTZStatusFilterOptions {
      public:
        /// Required element 'tt:PanTiltStatusSupported' of XSD type 'xsd:boolean'
        bool PanTiltStatusSupported;
        /// Required element 'tt:ZoomStatusSupported' of XSD type 'xsd:boolean'
        bool ZoomStatusSupported;
        std::vector<char *> __any;
        /// Optional element 'tt:PanTiltPositionSupported' of XSD type 'xsd:boolean'
        bool *PanTiltPositionSupported;
        /// Optional element 'tt:ZoomPositionSupported' of XSD type 'xsd:boolean'
        bool *ZoomPositionSupported;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZStatusFilterOptionsExtension'
        tt__PTZStatusFilterOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatusFilterOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatusFilterOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatusFilterOptions, default initialized and not managed by a soap context
        virtual tt__PTZStatusFilterOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatusFilterOptions); }
      public:
        /// Constructor with initializations
        tt__PTZStatusFilterOptions() : PanTiltStatusSupported(), ZoomStatusSupported(), __any(), PanTiltPositionSupported(), ZoomPositionSupported(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZStatusFilterOptions() { }
        /// Friend allocator used by soap_new_tt__PTZStatusFilterOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:903 */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (304)
/* complex XSD type 'tt:PTZStatusFilterOptionsExtension': */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatusFilterOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatusFilterOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZStatusFilterOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatusFilterOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__PTZStatusFilterOptionsExtension() : __any(), soap() { }
        virtual ~tt__PTZStatusFilterOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZStatusFilterOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:909 */
#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (306)
/* complex XSD type 'tt:VideoOutputExtension': */
class SOAP_CMAC tt__VideoOutputExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputExtension, default initialized and not managed by a soap context
        virtual tt__VideoOutputExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputExtension); }
      public:
        /// Constructor with initializations
        tt__VideoOutputExtension() : __any(), soap() { }
        virtual ~tt__VideoOutputExtension() { }
        /// Friend allocator used by soap_new_tt__VideoOutputExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputExtension * SOAP_FMAC2 soap_instantiate_tt__VideoOutputExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:915 */
#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (308)
/* complex XSD type 'tt:VideoOutputConfigurationOptions': */
class SOAP_CMAC tt__VideoOutputConfigurationOptions {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__VideoOutputConfigurationOptions() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__VideoOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:918 */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (309)
/* complex XSD type 'tt:VideoDecoderConfigurationOptions': */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions {
      public:
        /// Optional element 'tt:JpegDecOptions' of XSD type 'tt:JpegDecOptions'
        tt__JpegDecOptions *JpegDecOptions;
        /// Optional element 'tt:H264DecOptions' of XSD type 'tt:H264DecOptions'
        tt__H264DecOptions *H264DecOptions;
        /// Optional element 'tt:Mpeg4DecOptions' of XSD type 'tt:Mpeg4DecOptions'
        tt__Mpeg4DecOptions *Mpeg4DecOptions;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoDecoderConfigurationOptionsExtension'
        tt__VideoDecoderConfigurationOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoDecoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__VideoDecoderConfigurationOptions() : JpegDecOptions(), H264DecOptions(), Mpeg4DecOptions(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__VideoDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:921 */
#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (310)
/* complex XSD type 'tt:H264DecOptions': */
class SOAP_CMAC tt__H264DecOptions {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:SupportedH264Profiles' of XSD type 'tt:H264Profile'
        std::vector<tt__H264Profile> SupportedH264Profiles;
        /// Required element 'tt:SupportedInputBitrate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264DecOptions, default initialized and not managed by a soap context
        virtual tt__H264DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264DecOptions); }
      public:
        /// Constructor with initializations
        tt__H264DecOptions() : ResolutionsAvailable(), SupportedH264Profiles(), SupportedInputBitrate(), SupportedFrameRate(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__H264DecOptions() { }
        /// Friend allocator used by soap_new_tt__H264DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__H264DecOptions * SOAP_FMAC2 soap_instantiate_tt__H264DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:924 */
#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (311)
/* complex XSD type 'tt:JpegDecOptions': */
class SOAP_CMAC tt__JpegDecOptions {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:SupportedInputBitrate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegDecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegDecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegDecOptions, default initialized and not managed by a soap context
        virtual tt__JpegDecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegDecOptions); }
      public:
        /// Constructor with initializations
        tt__JpegDecOptions() : ResolutionsAvailable(), SupportedInputBitrate(), SupportedFrameRate(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__JpegDecOptions() { }
        /// Friend allocator used by soap_new_tt__JpegDecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegDecOptions * SOAP_FMAC2 soap_instantiate_tt__JpegDecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:927 */
#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (312)
/* complex XSD type 'tt:Mpeg4DecOptions': */
class SOAP_CMAC tt__Mpeg4DecOptions {
      public:
        /// Required element 'tt:ResolutionsAvailable' of XSD type 'tt:VideoResolution'
        std::vector<tt__VideoResolution *> ResolutionsAvailable;
        /// Required element 'tt:SupportedMpeg4Profiles' of XSD type 'tt:Mpeg4Profile'
        std::vector<tt__Mpeg4Profile> SupportedMpeg4Profiles;
        /// Required element 'tt:SupportedInputBitrate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XSD type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4DecOptions, default initialized and not managed by a soap context
        virtual tt__Mpeg4DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4DecOptions); }
      public:
        /// Constructor with initializations
        tt__Mpeg4DecOptions() : ResolutionsAvailable(), SupportedMpeg4Profiles(), SupportedInputBitrate(), SupportedFrameRate(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Mpeg4DecOptions() { }
        /// Friend allocator used by soap_new_tt__Mpeg4DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4DecOptions * SOAP_FMAC2 soap_instantiate_tt__Mpeg4DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:930 */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (313)
/* complex XSD type 'tt:VideoDecoderConfigurationOptionsExtension': */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoDecoderConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoDecoderConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoDecoderConfigurationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__VideoDecoderConfigurationOptionsExtension() : __any(), soap() { }
        virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:939 */
#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (316)
/* complex XSD type 'tt:AudioOutputConfigurationOptions': */
class SOAP_CMAC tt__AudioOutputConfigurationOptions {
      public:
        /// Required element 'tt:OutputTokensAvailable' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> OutputTokensAvailable;
        /// Optional element 'tt:SendPrimacyOptions' of XSD type 'xsd:anyURI'
        std::vector<std::string> SendPrimacyOptions;
        /// Required element 'tt:OutputLevelRange' of XSD type 'tt:IntRange'
        tt__IntRange *OutputLevelRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutputConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__AudioOutputConfigurationOptions() : OutputTokensAvailable(), SendPrimacyOptions(), OutputLevelRange(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:945 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (318)
/* complex XSD type 'tt:AudioDecoderConfigurationOptions': */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions {
      public:
        /// Optional element 'tt:AACDecOptions' of XSD type 'tt:AACDecOptions'
        tt__AACDecOptions *AACDecOptions;
        /// Optional element 'tt:G711DecOptions' of XSD type 'tt:G711DecOptions'
        tt__G711DecOptions *G711DecOptions;
        /// Optional element 'tt:G726DecOptions' of XSD type 'tt:G726DecOptions'
        tt__G726DecOptions *G726DecOptions;
        /// Optional element 'tt:Extension' of XSD type 'tt:AudioDecoderConfigurationOptionsExtension'
        tt__AudioDecoderConfigurationOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__AudioDecoderConfigurationOptions() : AACDecOptions(), G711DecOptions(), G726DecOptions(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AudioDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:948 */
#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (319)
/* complex XSD type 'tt:G711DecOptions': */
class SOAP_CMAC tt__G711DecOptions {
      public:
        /// Required element 'tt:Bitrate' of XSD type 'tt:IntList'
        tt__IntList *Bitrate;
        /// Required element 'tt:SampleRateRange' of XSD type 'tt:IntList'
        tt__IntList *SampleRateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__G711DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__G711DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__G711DecOptions, default initialized and not managed by a soap context
        virtual tt__G711DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__G711DecOptions); }
      public:
        /// Constructor with initializations
        tt__G711DecOptions() : Bitrate(), SampleRateRange(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__G711DecOptions() { }
        /// Friend allocator used by soap_new_tt__G711DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__G711DecOptions * SOAP_FMAC2 soap_instantiate_tt__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:951 */
#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (320)
/* complex XSD type 'tt:AACDecOptions': */
class SOAP_CMAC tt__AACDecOptions {
      public:
        /// Required element 'tt:Bitrate' of XSD type 'tt:IntList'
        tt__IntList *Bitrate;
        /// Required element 'tt:SampleRateRange' of XSD type 'tt:IntList'
        tt__IntList *SampleRateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AACDecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AACDecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AACDecOptions, default initialized and not managed by a soap context
        virtual tt__AACDecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AACDecOptions); }
      public:
        /// Constructor with initializations
        tt__AACDecOptions() : Bitrate(), SampleRateRange(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AACDecOptions() { }
        /// Friend allocator used by soap_new_tt__AACDecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AACDecOptions * SOAP_FMAC2 soap_instantiate_tt__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:954 */
#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (321)
/* complex XSD type 'tt:G726DecOptions': */
class SOAP_CMAC tt__G726DecOptions {
      public:
        /// Required element 'tt:Bitrate' of XSD type 'tt:IntList'
        tt__IntList *Bitrate;
        /// Required element 'tt:SampleRateRange' of XSD type 'tt:IntList'
        tt__IntList *SampleRateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__G726DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__G726DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__G726DecOptions, default initialized and not managed by a soap context
        virtual tt__G726DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__G726DecOptions); }
      public:
        /// Constructor with initializations
        tt__G726DecOptions() : Bitrate(), SampleRateRange(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__G726DecOptions() { }
        /// Friend allocator used by soap_new_tt__G726DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__G726DecOptions * SOAP_FMAC2 soap_instantiate_tt__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:957 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (322)
/* complex XSD type 'tt:AudioDecoderConfigurationOptionsExtension': */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfigurationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__AudioDecoderConfigurationOptionsExtension() : __any(), soap() { }
        virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:960 */
#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (323)
/* complex XSD type 'tt:MulticastConfiguration': */
class SOAP_CMAC tt__MulticastConfiguration {
      public:
        /// Required element 'tt:Address' of XSD type 'tt:IPAddress'
        tt__IPAddress *Address;
        /// Required element 'tt:Port' of XSD type 'xsd:int'
        int Port;
        /// Required element 'tt:TTL' of XSD type 'xsd:int'
        int TTL;
        /// Required element 'tt:AutoStart' of XSD type 'xsd:boolean'
        bool AutoStart;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MulticastConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MulticastConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MulticastConfiguration, default initialized and not managed by a soap context
        virtual tt__MulticastConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MulticastConfiguration); }
      public:
        /// Constructor with initializations
        tt__MulticastConfiguration() : Address(), Port(), TTL(), AutoStart(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MulticastConfiguration() { }
        /// Friend allocator used by soap_new_tt__MulticastConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_tt__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:963 */
#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (324)
/* complex XSD type 'tt:StreamSetup': */
class SOAP_CMAC tt__StreamSetup {
      public:
        /// Required element 'tt:Stream' of XSD type 'tt:StreamType'
        tt__StreamType Stream;
        /// Required element 'tt:Transport' of XSD type 'tt:Transport'
        tt__Transport *Transport;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__StreamSetup
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StreamSetup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StreamSetup, default initialized and not managed by a soap context
        virtual tt__StreamSetup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StreamSetup); }
      public:
        /// Constructor with initializations
        tt__StreamSetup() : Stream(), Transport(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__StreamSetup() { }
        /// Friend allocator used by soap_new_tt__StreamSetup(struct soap*, int)
        friend SOAP_FMAC1 tt__StreamSetup * SOAP_FMAC2 soap_instantiate_tt__StreamSetup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:966 */
#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (325)
/* Type tt__Transport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:Transport': */
class SOAP_CMAC tt__Transport {
      public:
        /// Required element 'tt:Protocol' of XSD type 'tt:TransportProtocol'
        tt__TransportProtocol Protocol;
        /// Optional element 'tt:Tunnel' of XSD type 'tt:Transport'
        tt__Transport *Tunnel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Transport
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Transport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Transport, default initialized and not managed by a soap context
        virtual tt__Transport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Transport); }
      public:
        /// Constructor with initializations
        tt__Transport() : Protocol(), Tunnel(), soap() { }
        virtual ~tt__Transport() { }
        /// Friend allocator used by soap_new_tt__Transport(struct soap*, int)
        friend SOAP_FMAC1 tt__Transport * SOAP_FMAC2 soap_instantiate_tt__Transport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:969 */
#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (326)
/* complex XSD type 'tt:MediaUri': */
class SOAP_CMAC tt__MediaUri {
      public:
        /// Required element 'tt:Uri' of XSD type 'xsd:anyURI'
        std::string Uri;
        /// Required element 'tt:InvalidAfterConnect' of XSD type 'xsd:boolean'
        bool InvalidAfterConnect;
        /// Required element 'tt:InvalidAfterReboot' of XSD type 'xsd:boolean'
        bool InvalidAfterReboot;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 Timeout;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaUri
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaUri, default initialized and not managed by a soap context
        virtual tt__MediaUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaUri); }
      public:
        /// Constructor with initializations
        tt__MediaUri() : Uri(), InvalidAfterConnect(), InvalidAfterReboot(), Timeout(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MediaUri() { }
        /// Friend allocator used by soap_new_tt__MediaUri(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaUri * SOAP_FMAC2 soap_instantiate_tt__MediaUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:972 */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (327)
/* complex XSD type 'tt:Scope': */
class SOAP_CMAC tt__Scope {
      public:
        /// Required element 'tt:ScopeDef' of XSD type 'tt:ScopeDefinition'
        tt__ScopeDefinition ScopeDef;
        /// Required element 'tt:ScopeItem' of XSD type 'xsd:anyURI'
        std::string ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Scope
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Scope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Scope, default initialized and not managed by a soap context
        virtual tt__Scope *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Scope); }
      public:
        /// Constructor with initializations
        tt__Scope() : ScopeDef(), ScopeItem(), soap() { }
        virtual ~tt__Scope() { }
        /// Friend allocator used by soap_new_tt__Scope(struct soap*, int)
        friend SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:978 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (329)
/* complex XSD type 'tt:NetworkInterfaceExtension': */
class SOAP_CMAC tt__NetworkInterfaceExtension {
      public:
        std::vector<char *> __any;
        /// Required element 'tt:InterfaceType' of XSD type 'tt:IANA-IfTypes'
        int InterfaceType;
        /// Optional element 'tt:Dot3' of XSD type 'tt:Dot3Configuration'
        std::vector<tt__Dot3Configuration *> Dot3;
        /// Optional element 'tt:Dot11' of XSD type 'tt:Dot11Configuration'
        std::vector<tt__Dot11Configuration *> Dot11;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkInterfaceExtension2'
        tt__NetworkInterfaceExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceExtension() : __any(), InterfaceType(), Dot3(), Dot11(), Extension(), soap() { }
        virtual ~tt__NetworkInterfaceExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:981 */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (330)
/* complex XSD type 'tt:Dot3Configuration': */
class SOAP_CMAC tt__Dot3Configuration {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot3Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot3Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot3Configuration, default initialized and not managed by a soap context
        virtual tt__Dot3Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot3Configuration); }
      public:
        /// Constructor with initializations
        tt__Dot3Configuration() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__Dot3Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot3Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:984 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (331)
/* complex XSD type 'tt:NetworkInterfaceExtension2': */
class SOAP_CMAC tt__NetworkInterfaceExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension2); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceExtension2() : __any(), soap() { }
        virtual ~tt__NetworkInterfaceExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:987 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (332)
/* complex XSD type 'tt:NetworkInterfaceLink': */
class SOAP_CMAC tt__NetworkInterfaceLink {
      public:
        /// Required element 'tt:AdminSettings' of XSD type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *AdminSettings;
        /// Required element 'tt:OperSettings' of XSD type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *OperSettings;
        /// Required element 'tt:InterfaceType' of XSD type 'tt:IANA-IfTypes'
        int InterfaceType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceLink
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceLink; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceLink, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceLink *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceLink); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceLink() : AdminSettings(), OperSettings(), InterfaceType(), soap() { }
        virtual ~tt__NetworkInterfaceLink() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceLink(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:990 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (333)
/* complex XSD type 'tt:NetworkInterfaceConnectionSetting': */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting {
      public:
        /// Required element 'tt:AutoNegotiation' of XSD type 'xsd:boolean'
        bool AutoNegotiation;
        /// Required element 'tt:Speed' of XSD type 'xsd:int'
        int Speed;
        /// Required element 'tt:Duplex' of XSD type 'tt:Duplex'
        tt__Duplex Duplex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceConnectionSetting; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceConnectionSetting, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceConnectionSetting *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceConnectionSetting); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceConnectionSetting() : AutoNegotiation(), Speed(), Duplex(), soap() { }
        virtual ~tt__NetworkInterfaceConnectionSetting() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceConnectionSetting(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:993 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (334)
/* complex XSD type 'tt:NetworkInterfaceInfo': */
class SOAP_CMAC tt__NetworkInterfaceInfo {
      public:
        /// Optional element 'tt:Name' of XSD type 'xsd:string'
        std::string *Name;
        /// Required element 'tt:HwAddress' of XSD type 'tt:HwAddress'
        std::string HwAddress;
        /// Optional element 'tt:MTU' of XSD type 'xsd:int'
        int *MTU;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceInfo, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceInfo); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceInfo() : Name(), HwAddress(), MTU(), soap() { }
        virtual ~tt__NetworkInterfaceInfo() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceInfo(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:996 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (335)
/* complex XSD type 'tt:IPv6NetworkInterface': */
class SOAP_CMAC tt__IPv6NetworkInterface {
      public:
        /// Required element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Config' of XSD type 'tt:IPv6Configuration'
        tt__IPv6Configuration *Config;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterface); }
      public:
        /// Constructor with initializations
        tt__IPv6NetworkInterface() : Enabled(), Config(), soap() { }
        virtual ~tt__IPv6NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:999 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (336)
/* complex XSD type 'tt:IPv4NetworkInterface': */
class SOAP_CMAC tt__IPv4NetworkInterface {
      public:
        /// Required element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tt:Config' of XSD type 'tt:IPv4Configuration'
        tt__IPv4Configuration *Config;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterface); }
      public:
        /// Constructor with initializations
        tt__IPv4NetworkInterface() : Enabled(), Config(), soap() { }
        virtual ~tt__IPv4NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1002 */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (337)
/* complex XSD type 'tt:IPv4Configuration': */
class SOAP_CMAC tt__IPv4Configuration {
      public:
        /// Optional element 'tt:Manual' of XSD type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> Manual;
        /// Optional element 'tt:LinkLocal' of XSD type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *LinkLocal;
        /// Optional element 'tt:FromDHCP' of XSD type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *FromDHCP;
        /// Required element 'tt:DHCP' of XSD type 'xsd:boolean'
        bool DHCP;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4Configuration, default initialized and not managed by a soap context
        virtual tt__IPv4Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4Configuration); }
      public:
        /// Constructor with initializations
        tt__IPv4Configuration() : Manual(), LinkLocal(), FromDHCP(), DHCP(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__IPv4Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv4Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1005 */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (338)
/* complex XSD type 'tt:IPv6Configuration': */
class SOAP_CMAC tt__IPv6Configuration {
      public:
        /// Optional element 'tt:AcceptRouterAdvert' of XSD type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Required element 'tt:DHCP' of XSD type 'tt:IPv6DHCPConfiguration'
        tt__IPv6DHCPConfiguration DHCP;
        /// Optional element 'tt:Manual' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> Manual;
        /// Optional element 'tt:LinkLocal' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> LinkLocal;
        /// Optional element 'tt:FromDHCP' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> FromDHCP;
        /// Optional element 'tt:FromRA' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> FromRA;
        /// Optional element 'tt:Extension' of XSD type 'tt:IPv6ConfigurationExtension'
        tt__IPv6ConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6Configuration, default initialized and not managed by a soap context
        virtual tt__IPv6Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6Configuration); }
      public:
        /// Constructor with initializations
        tt__IPv6Configuration() : AcceptRouterAdvert(), DHCP(), Manual(), LinkLocal(), FromDHCP(), FromRA(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IPv6Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv6Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1008 */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (339)
/* complex XSD type 'tt:IPv6ConfigurationExtension': */
class SOAP_CMAC tt__IPv6ConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6ConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6ConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6ConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__IPv6ConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6ConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__IPv6ConfigurationExtension() : __any(), soap() { }
        virtual ~tt__IPv6ConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__IPv6ConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1011 */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (340)
/* complex XSD type 'tt:NetworkProtocol': */
class SOAP_CMAC tt__NetworkProtocol {
      public:
        /// Required element 'tt:Name' of XSD type 'tt:NetworkProtocolType'
        tt__NetworkProtocolType Name;
        /// Required element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tt:Port' of XSD type 'xsd:int'
        std::vector<int> Port;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkProtocolExtension'
        tt__NetworkProtocolExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocol
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocol; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocol, default initialized and not managed by a soap context
        virtual tt__NetworkProtocol *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocol); }
      public:
        /// Constructor with initializations
        tt__NetworkProtocol() : Name(), Enabled(), Port(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NetworkProtocol() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocol(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1014 */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (341)
/* complex XSD type 'tt:NetworkProtocolExtension': */
class SOAP_CMAC tt__NetworkProtocolExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocolExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocolExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocolExtension, default initialized and not managed by a soap context
        virtual tt__NetworkProtocolExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocolExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkProtocolExtension() : __any(), soap() { }
        virtual ~tt__NetworkProtocolExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocolExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1017 */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (342)
/* complex XSD type 'tt:NetworkHost': */
class SOAP_CMAC tt__NetworkHost {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:NetworkHostType'
        tt__NetworkHostType Type;
        /// Optional element 'tt:IPv4Address' of XSD type 'tt:IPv4Address'
        std::string *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XSD type 'tt:IPv6Address'
        std::string *IPv6Address;
        /// Optional element 'tt:DNSname' of XSD type 'tt:DNSName'
        std::string *DNSname;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkHostExtension'
        tt__NetworkHostExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHost
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHost, default initialized and not managed by a soap context
        virtual tt__NetworkHost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHost); }
      public:
        /// Constructor with initializations
        tt__NetworkHost() : Type(), IPv4Address(), IPv6Address(), DNSname(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NetworkHost() { }
        /// Friend allocator used by soap_new_tt__NetworkHost(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1020 */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (343)
/* complex XSD type 'tt:NetworkHostExtension': */
class SOAP_CMAC tt__NetworkHostExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHostExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHostExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHostExtension, default initialized and not managed by a soap context
        virtual tt__NetworkHostExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHostExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkHostExtension() : __any(), soap() { }
        virtual ~tt__NetworkHostExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkHostExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1023 */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (344)
/* complex XSD type 'tt:IPAddress': */
class SOAP_CMAC tt__IPAddress {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:IPType'
        tt__IPType Type;
        /// Optional element 'tt:IPv4Address' of XSD type 'tt:IPv4Address'
        std::string *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XSD type 'tt:IPv6Address'
        std::string *IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddress, default initialized and not managed by a soap context
        virtual tt__IPAddress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddress); }
      public:
        /// Constructor with initializations
        tt__IPAddress() : Type(), IPv4Address(), IPv6Address(), soap() { }
        virtual ~tt__IPAddress() { }
        /// Friend allocator used by soap_new_tt__IPAddress(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1026 */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (345)
/* complex XSD type 'tt:PrefixedIPv4Address': */
class SOAP_CMAC tt__PrefixedIPv4Address {
      public:
        /// Required element 'tt:Address' of XSD type 'tt:IPv4Address'
        std::string Address;
        /// Required element 'tt:PrefixLength' of XSD type 'xsd:int'
        int PrefixLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv4Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv4Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv4Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv4Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv4Address); }
      public:
        /// Constructor with initializations
        tt__PrefixedIPv4Address() : Address(), PrefixLength(), soap() { }
        virtual ~tt__PrefixedIPv4Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv4Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1029 */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (346)
/* complex XSD type 'tt:PrefixedIPv6Address': */
class SOAP_CMAC tt__PrefixedIPv6Address {
      public:
        /// Required element 'tt:Address' of XSD type 'tt:IPv6Address'
        std::string Address;
        /// Required element 'tt:PrefixLength' of XSD type 'xsd:int'
        int PrefixLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv6Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv6Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv6Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv6Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv6Address); }
      public:
        /// Constructor with initializations
        tt__PrefixedIPv6Address() : Address(), PrefixLength(), soap() { }
        virtual ~tt__PrefixedIPv6Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv6Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1032 */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (347)
/* complex XSD type 'tt:HostnameInformation': */
class SOAP_CMAC tt__HostnameInformation {
      public:
        /// Required element 'tt:FromDHCP' of XSD type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:Name' of XSD type 'xsd:token'
        std::string *Name;
        /// Optional element 'tt:Extension' of XSD type 'tt:HostnameInformationExtension'
        tt__HostnameInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformation, default initialized and not managed by a soap context
        virtual tt__HostnameInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformation); }
      public:
        /// Constructor with initializations
        tt__HostnameInformation() : FromDHCP(), Name(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__HostnameInformation() { }
        /// Friend allocator used by soap_new_tt__HostnameInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1035 */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (348)
/* complex XSD type 'tt:HostnameInformationExtension': */
class SOAP_CMAC tt__HostnameInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformationExtension, default initialized and not managed by a soap context
        virtual tt__HostnameInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformationExtension); }
      public:
        /// Constructor with initializations
        tt__HostnameInformationExtension() : __any(), soap() { }
        virtual ~tt__HostnameInformationExtension() { }
        /// Friend allocator used by soap_new_tt__HostnameInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1038 */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (349)
/* complex XSD type 'tt:DNSInformation': */
class SOAP_CMAC tt__DNSInformation {
      public:
        /// Required element 'tt:FromDHCP' of XSD type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:SearchDomain' of XSD type 'xsd:token'
        std::vector<std::string> SearchDomain;
        /// Optional element 'tt:DNSFromDHCP' of XSD type 'tt:IPAddress'
        std::vector<tt__IPAddress *> DNSFromDHCP;
        /// Optional element 'tt:DNSManual' of XSD type 'tt:IPAddress'
        std::vector<tt__IPAddress *> DNSManual;
        /// Optional element 'tt:Extension' of XSD type 'tt:DNSInformationExtension'
        tt__DNSInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformation, default initialized and not managed by a soap context
        virtual tt__DNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformation); }
      public:
        /// Constructor with initializations
        tt__DNSInformation() : FromDHCP(), SearchDomain(), DNSFromDHCP(), DNSManual(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__DNSInformation() { }
        /// Friend allocator used by soap_new_tt__DNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1041 */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (350)
/* complex XSD type 'tt:DNSInformationExtension': */
class SOAP_CMAC tt__DNSInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformationExtension); }
      public:
        /// Constructor with initializations
        tt__DNSInformationExtension() : __any(), soap() { }
        virtual ~tt__DNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1044 */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (351)
/* complex XSD type 'tt:NTPInformation': */
class SOAP_CMAC tt__NTPInformation {
      public:
        /// Required element 'tt:FromDHCP' of XSD type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:NTPFromDHCP' of XSD type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> NTPFromDHCP;
        /// Optional element 'tt:NTPManual' of XSD type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> NTPManual;
        /// Optional element 'tt:Extension' of XSD type 'tt:NTPInformationExtension'
        tt__NTPInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformation, default initialized and not managed by a soap context
        virtual tt__NTPInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformation); }
      public:
        /// Constructor with initializations
        tt__NTPInformation() : FromDHCP(), NTPFromDHCP(), NTPManual(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NTPInformation() { }
        /// Friend allocator used by soap_new_tt__NTPInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1047 */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (352)
/* complex XSD type 'tt:NTPInformationExtension': */
class SOAP_CMAC tt__NTPInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformationExtension, default initialized and not managed by a soap context
        virtual tt__NTPInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformationExtension); }
      public:
        /// Constructor with initializations
        tt__NTPInformationExtension() : __any(), soap() { }
        virtual ~tt__NTPInformationExtension() { }
        /// Friend allocator used by soap_new_tt__NTPInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1050 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (353)
/* complex XSD type 'tt:DynamicDNSInformation': */
class SOAP_CMAC tt__DynamicDNSInformation {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:DynamicDNSType'
        tt__DynamicDNSType Type;
        /// Optional element 'tt:Name' of XSD type 'tt:DNSName'
        std::string *Name;
        /// Optional element 'tt:TTL' of XSD type 'xsd:duration'
        LONG64 *TTL;
        /// Optional element 'tt:Extension' of XSD type 'tt:DynamicDNSInformationExtension'
        tt__DynamicDNSInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformation, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformation); }
      public:
        /// Constructor with initializations
        tt__DynamicDNSInformation() : Type(), Name(), TTL(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__DynamicDNSInformation() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1053 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (354)
/* complex XSD type 'tt:DynamicDNSInformationExtension': */
class SOAP_CMAC tt__DynamicDNSInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformationExtension); }
      public:
        /// Constructor with initializations
        tt__DynamicDNSInformationExtension() : __any(), soap() { }
        virtual ~tt__DynamicDNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1056 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (355)
/* complex XSD type 'tt:NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:Link' of XSD type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *Link;
        /// Optional element 'tt:MTU' of XSD type 'xsd:int'
        int *MTU;
        /// Optional element 'tt:IPv4' of XSD type 'tt:IPv4NetworkInterfaceSetConfiguration'
        tt__IPv4NetworkInterfaceSetConfiguration *IPv4;
        /// Optional element 'tt:IPv6' of XSD type 'tt:IPv6NetworkInterfaceSetConfiguration'
        tt__IPv6NetworkInterfaceSetConfiguration *IPv6;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkInterfaceSetConfigurationExtension'
        tt__NetworkInterfaceSetConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceSetConfiguration() : Enabled(), Link(), MTU(), IPv4(), IPv6(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1059 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (356)
/* complex XSD type 'tt:NetworkInterfaceSetConfigurationExtension': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Dot3' of XSD type 'tt:Dot3Configuration'
        std::vector<tt__Dot3Configuration *> Dot3;
        /// Optional element 'tt:Dot11' of XSD type 'tt:Dot11Configuration'
        std::vector<tt__Dot11Configuration *> Dot11;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkInterfaceSetConfigurationExtension2'
        tt__NetworkInterfaceSetConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceSetConfigurationExtension() : __any(), Dot3(), Dot11(), Extension(), soap() { }
        virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1062 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (357)
/* complex XSD type 'tt:IPv6NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:AcceptRouterAdvert' of XSD type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Optional element 'tt:Manual' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> Manual;
        /// Optional element 'tt:DHCP' of XSD type 'tt:IPv6DHCPConfiguration'
        tt__IPv6DHCPConfiguration *DHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with initializations
        tt__IPv6NetworkInterfaceSetConfiguration() : Enabled(), AcceptRouterAdvert(), Manual(), DHCP(), soap() { }
        virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1065 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (358)
/* complex XSD type 'tt:IPv4NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:Manual' of XSD type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> Manual;
        /// Optional element 'tt:DHCP' of XSD type 'xsd:boolean'
        bool *DHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with initializations
        tt__IPv4NetworkInterfaceSetConfiguration() : Enabled(), Manual(), DHCP(), soap() { }
        virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1068 */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (359)
/* complex XSD type 'tt:NetworkGateway': */
class SOAP_CMAC tt__NetworkGateway {
      public:
        /// Optional element 'tt:IPv4Address' of XSD type 'tt:IPv4Address'
        std::vector<std::string> IPv4Address;
        /// Optional element 'tt:IPv6Address' of XSD type 'tt:IPv6Address'
        std::vector<std::string> IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkGateway
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkGateway, default initialized and not managed by a soap context
        virtual tt__NetworkGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkGateway); }
      public:
        /// Constructor with initializations
        tt__NetworkGateway() : IPv4Address(), IPv6Address(), soap() { }
        virtual ~tt__NetworkGateway() { }
        /// Friend allocator used by soap_new_tt__NetworkGateway(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1071 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (360)
/* complex XSD type 'tt:NetworkZeroConfiguration': */
class SOAP_CMAC tt__NetworkZeroConfiguration {
      public:
        /// Required element 'tt:InterfaceToken' of XSD type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Required element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Addresses' of XSD type 'tt:IPv4Address'
        std::vector<std::string> Addresses;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkZeroConfigurationExtension'
        tt__NetworkZeroConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfiguration); }
      public:
        /// Constructor with initializations
        tt__NetworkZeroConfiguration() : InterfaceToken(), Enabled(), Addresses(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NetworkZeroConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1074 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (361)
/* Type tt__NetworkZeroConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:NetworkZeroConfigurationExtension': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Additional' of XSD type 'tt:NetworkZeroConfiguration'
        std::vector<tt__NetworkZeroConfiguration *> Additional;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkZeroConfigurationExtension2'
        tt__NetworkZeroConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkZeroConfigurationExtension() : __any(), Additional(), Extension(), soap() { }
        virtual ~tt__NetworkZeroConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1077 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (362)
/* complex XSD type 'tt:NetworkZeroConfigurationExtension2': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension2); }
      public:
        /// Constructor with initializations
        tt__NetworkZeroConfigurationExtension2() : __any(), soap() { }
        virtual ~tt__NetworkZeroConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1080 */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (363)
/* complex XSD type 'tt:IPAddressFilter': */
class SOAP_CMAC tt__IPAddressFilter {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:IPAddressFilterType'
        tt__IPAddressFilterType Type;
        /// Optional element 'tt:IPv4Address' of XSD type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> IPv4Address;
        /// Optional element 'tt:IPv6Address' of XSD type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> IPv6Address;
        /// Optional element 'tt:Extension' of XSD type 'tt:IPAddressFilterExtension'
        tt__IPAddressFilterExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilter, default initialized and not managed by a soap context
        virtual tt__IPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilter); }
      public:
        /// Constructor with initializations
        tt__IPAddressFilter() : Type(), IPv4Address(), IPv6Address(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IPAddressFilter() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1083 */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (364)
/* complex XSD type 'tt:IPAddressFilterExtension': */
class SOAP_CMAC tt__IPAddressFilterExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilterExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilterExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilterExtension, default initialized and not managed by a soap context
        virtual tt__IPAddressFilterExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilterExtension); }
      public:
        /// Constructor with initializations
        tt__IPAddressFilterExtension() : __any(), soap() { }
        virtual ~tt__IPAddressFilterExtension() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilterExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1086 */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (365)
/* complex XSD type 'tt:Dot11Configuration': */
class SOAP_CMAC tt__Dot11Configuration {
      public:
        /// Required element 'tt:SSID' of XSD type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Required element 'tt:Mode' of XSD type 'tt:Dot11StationMode'
        tt__Dot11StationMode Mode;
        /// Required element 'tt:Alias' of XSD type 'tt:Name'
        std::string Alias;
        /// Required element 'tt:Priority' of XSD type 'tt:NetworkInterfaceConfigPriority'
        std::string Priority;
        /// Required element 'tt:Security' of XSD type 'tt:Dot11SecurityConfiguration'
        tt__Dot11SecurityConfiguration *Security;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Configuration, default initialized and not managed by a soap context
        virtual tt__Dot11Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Configuration); }
      public:
        /// Constructor with initializations
        tt__Dot11Configuration() : SSID(), Mode(), Alias(), Priority(), Security(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot11Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1089 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (366)
/* complex XSD type 'tt:Dot11SecurityConfiguration': */
class SOAP_CMAC tt__Dot11SecurityConfiguration {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:Dot11SecurityMode'
        tt__Dot11SecurityMode Mode;
        /// Optional element 'tt:Algorithm' of XSD type 'tt:Dot11Cipher'
        tt__Dot11Cipher *Algorithm;
        /// Optional element 'tt:PSK' of XSD type 'tt:Dot11PSKSet'
        tt__Dot11PSKSet *PSK;
        /// Optional element 'tt:Dot1X' of XSD type 'tt:ReferenceToken'
        std::string *Dot1X;
        /// Optional element 'tt:Extension' of XSD type 'tt:Dot11SecurityConfigurationExtension'
        tt__Dot11SecurityConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfiguration); }
      public:
        /// Constructor with initializations
        tt__Dot11SecurityConfiguration() : Mode(), Algorithm(), PSK(), Dot1X(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11SecurityConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1092 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (367)
/* complex XSD type 'tt:Dot11SecurityConfigurationExtension': */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__Dot11SecurityConfigurationExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11SecurityConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1095 */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (368)
/* complex XSD type 'tt:Dot11PSKSet': */
class SOAP_CMAC tt__Dot11PSKSet {
      public:
        /// Optional element 'tt:Key' of XSD type 'tt:Dot11PSK'
        xsd__hexBinary *Key;
        /// Optional element 'tt:Passphrase' of XSD type 'tt:Dot11PSKPassphrase'
        std::string *Passphrase;
        /// Optional element 'tt:Extension' of XSD type 'tt:Dot11PSKSetExtension'
        tt__Dot11PSKSetExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSet
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSet, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSet); }
      public:
        /// Constructor with initializations
        tt__Dot11PSKSet() : Key(), Passphrase(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11PSKSet() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSet(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1098 */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (369)
/* complex XSD type 'tt:Dot11PSKSetExtension': */
class SOAP_CMAC tt__Dot11PSKSetExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSetExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSetExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSetExtension, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSetExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSetExtension); }
      public:
        /// Constructor with initializations
        tt__Dot11PSKSetExtension() : __any(), soap() { }
        virtual ~tt__Dot11PSKSetExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSetExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1101 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (370)
/* complex XSD type 'tt:NetworkInterfaceSetConfigurationExtension2': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension2); }
      public:
        /// Constructor with initializations
        tt__NetworkInterfaceSetConfigurationExtension2() : __any(), soap() { }
        virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1104 */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (371)
/* complex XSD type 'tt:Dot11Capabilities': */
class SOAP_CMAC tt__Dot11Capabilities {
      public:
        /// Required element 'tt:TKIP' of XSD type 'xsd:boolean'
        bool TKIP;
        /// Required element 'tt:ScanAvailableNetworks' of XSD type 'xsd:boolean'
        bool ScanAvailableNetworks;
        /// Required element 'tt:MultipleConfiguration' of XSD type 'xsd:boolean'
        bool MultipleConfiguration;
        /// Required element 'tt:AdHocStationMode' of XSD type 'xsd:boolean'
        bool AdHocStationMode;
        /// Required element 'tt:WEP' of XSD type 'xsd:boolean'
        bool WEP;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Capabilities, default initialized and not managed by a soap context
        virtual tt__Dot11Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Capabilities); }
      public:
        /// Constructor with initializations
        tt__Dot11Capabilities() : TKIP(), ScanAvailableNetworks(), MultipleConfiguration(), AdHocStationMode(), WEP(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11Capabilities() { }
        /// Friend allocator used by soap_new_tt__Dot11Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1107 */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (372)
/* complex XSD type 'tt:Dot11Status': */
class SOAP_CMAC tt__Dot11Status {
      public:
        /// Required element 'tt:SSID' of XSD type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XSD type 'xsd:string'
        std::string *BSSID;
        /// Optional element 'tt:PairCipher' of XSD type 'tt:Dot11Cipher'
        tt__Dot11Cipher *PairCipher;
        /// Optional element 'tt:GroupCipher' of XSD type 'tt:Dot11Cipher'
        tt__Dot11Cipher *GroupCipher;
        /// Optional element 'tt:SignalStrength' of XSD type 'tt:Dot11SignalStrength'
        tt__Dot11SignalStrength *SignalStrength;
        /// Required element 'tt:ActiveConfigAlias' of XSD type 'tt:ReferenceToken'
        std::string ActiveConfigAlias;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Status
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Status; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Status, default initialized and not managed by a soap context
        virtual tt__Dot11Status *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Status); }
      public:
        /// Constructor with initializations
        tt__Dot11Status() : SSID(), BSSID(), PairCipher(), GroupCipher(), SignalStrength(), ActiveConfigAlias(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11Status() { }
        /// Friend allocator used by soap_new_tt__Dot11Status(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1110 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (373)
/* complex XSD type 'tt:Dot11AvailableNetworks': */
class SOAP_CMAC tt__Dot11AvailableNetworks {
      public:
        /// Required element 'tt:SSID' of XSD type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XSD type 'xsd:string'
        std::string *BSSID;
        /// Optional element 'tt:AuthAndMangementSuite' of XSD type 'tt:Dot11AuthAndMangementSuite'
        std::vector<tt__Dot11AuthAndMangementSuite> AuthAndMangementSuite;
        /// Optional element 'tt:PairCipher' of XSD type 'tt:Dot11Cipher'
        std::vector<tt__Dot11Cipher> PairCipher;
        /// Optional element 'tt:GroupCipher' of XSD type 'tt:Dot11Cipher'
        std::vector<tt__Dot11Cipher> GroupCipher;
        /// Optional element 'tt:SignalStrength' of XSD type 'tt:Dot11SignalStrength'
        tt__Dot11SignalStrength *SignalStrength;
        /// Optional element 'tt:Extension' of XSD type 'tt:Dot11AvailableNetworksExtension'
        tt__Dot11AvailableNetworksExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworks
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworks, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworks); }
      public:
        /// Constructor with initializations
        tt__Dot11AvailableNetworks() : SSID(), BSSID(), AuthAndMangementSuite(), PairCipher(), GroupCipher(), SignalStrength(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Dot11AvailableNetworks() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworks(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1113 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (374)
/* complex XSD type 'tt:Dot11AvailableNetworksExtension': */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworksExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworksExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworksExtension, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworksExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworksExtension); }
      public:
        /// Constructor with initializations
        tt__Dot11AvailableNetworksExtension() : __any(), soap() { }
        virtual ~tt__Dot11AvailableNetworksExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworksExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1116 */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (375)
/* complex XSD type 'tt:Capabilities': */
class SOAP_CMAC tt__Capabilities {
      public:
        /// Optional element 'tt:Analytics' of XSD type 'tt:AnalyticsCapabilities'
        tt__AnalyticsCapabilities *Analytics;
        /// Optional element 'tt:Device' of XSD type 'tt:DeviceCapabilities'
        tt__DeviceCapabilities *Device;
        /// Optional element 'tt:Events' of XSD type 'tt:EventCapabilities'
        tt__EventCapabilities *Events;
        /// Optional element 'tt:Imaging' of XSD type 'tt:ImagingCapabilities'
        tt__ImagingCapabilities *Imaging;
        /// Optional element 'tt:Media' of XSD type 'tt:MediaCapabilities'
        tt__MediaCapabilities *Media;
        /// Optional element 'tt:PTZ' of XSD type 'tt:PTZCapabilities'
        tt__PTZCapabilities *PTZ;
        /// Optional element 'tt:Extension' of XSD type 'tt:CapabilitiesExtension'
        tt__CapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Capabilities, default initialized and not managed by a soap context
        virtual tt__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Capabilities); }
      public:
        /// Constructor with initializations
        tt__Capabilities() : Analytics(), Device(), Events(), Imaging(), Media(), PTZ(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Capabilities() { }
        /// Friend allocator used by soap_new_tt__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1119 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (376)
/* complex XSD type 'tt:CapabilitiesExtension': */
class SOAP_CMAC tt__CapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:DeviceIO' of XSD type 'tt:DeviceIOCapabilities'
        tt__DeviceIOCapabilities *DeviceIO;
        /// Optional element 'tt:Display' of XSD type 'tt:DisplayCapabilities'
        tt__DisplayCapabilities *Display;
        /// Optional element 'tt:Recording' of XSD type 'tt:RecordingCapabilities'
        tt__RecordingCapabilities *Recording;
        /// Optional element 'tt:Search' of XSD type 'tt:SearchCapabilities'
        tt__SearchCapabilities *Search;
        /// Optional element 'tt:Replay' of XSD type 'tt:ReplayCapabilities'
        tt__ReplayCapabilities *Replay;
        /// Optional element 'tt:Receiver' of XSD type 'tt:ReceiverCapabilities'
        tt__ReceiverCapabilities *Receiver;
        /// Optional element 'tt:AnalyticsDevice' of XSD type 'tt:AnalyticsDeviceCapabilities'
        tt__AnalyticsDeviceCapabilities *AnalyticsDevice;
        /// Optional element 'tt:Extensions' of XSD type 'tt:CapabilitiesExtension2'
        tt__CapabilitiesExtension2 *Extensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__CapabilitiesExtension() : __any(), DeviceIO(), Display(), Recording(), Search(), Replay(), Receiver(), AnalyticsDevice(), Extensions(), soap() { }
        virtual ~tt__CapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1122 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (377)
/* complex XSD type 'tt:CapabilitiesExtension2': */
class SOAP_CMAC tt__CapabilitiesExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension2); }
      public:
        /// Constructor with initializations
        tt__CapabilitiesExtension2() : __any(), soap() { }
        virtual ~tt__CapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1125 */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (378)
/* complex XSD type 'tt:AnalyticsCapabilities': */
class SOAP_CMAC tt__AnalyticsCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:RuleSupport' of XSD type 'xsd:boolean'
        bool RuleSupport;
        /// Required element 'tt:AnalyticsModuleSupport' of XSD type 'xsd:boolean'
        bool AnalyticsModuleSupport;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsCapabilities); }
      public:
        /// Constructor with initializations
        tt__AnalyticsCapabilities() : XAddr(), RuleSupport(), AnalyticsModuleSupport(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1128 */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (379)
/* complex XSD type 'tt:DeviceCapabilities': */
class SOAP_CMAC tt__DeviceCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Optional element 'tt:Network' of XSD type 'tt:NetworkCapabilities'
        tt__NetworkCapabilities *Network;
        /// Optional element 'tt:System' of XSD type 'tt:SystemCapabilities'
        tt__SystemCapabilities *System;
        /// Optional element 'tt:IO' of XSD type 'tt:IOCapabilities'
        tt__IOCapabilities *IO;
        /// Optional element 'tt:Security' of XSD type 'tt:SecurityCapabilities'
        tt__SecurityCapabilities *Security;
        /// Optional element 'tt:Extension' of XSD type 'tt:DeviceCapabilitiesExtension'
        tt__DeviceCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilities); }
      public:
        /// Constructor with initializations
        tt__DeviceCapabilities() : XAddr(), Network(), System(), IO(), Security(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__DeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1131 */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (380)
/* complex XSD type 'tt:DeviceCapabilitiesExtension': */
class SOAP_CMAC tt__DeviceCapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__DeviceCapabilitiesExtension() : __any(), soap() { }
        virtual ~tt__DeviceCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1134 */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (381)
/* complex XSD type 'tt:EventCapabilities': */
class SOAP_CMAC tt__EventCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:WSSubscriptionPolicySupport' of XSD type 'xsd:boolean'
        bool WSSubscriptionPolicySupport;
        /// Required element 'tt:WSPullPointSupport' of XSD type 'xsd:boolean'
        bool WSPullPointSupport;
        /// Required element 'tt:WSPausableSubscriptionManagerInterfaceSupport' of XSD type 'xsd:boolean'
        bool WSPausableSubscriptionManagerInterfaceSupport;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventCapabilities, default initialized and not managed by a soap context
        virtual tt__EventCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventCapabilities); }
      public:
        /// Constructor with initializations
        tt__EventCapabilities() : XAddr(), WSSubscriptionPolicySupport(), WSPullPointSupport(), WSPausableSubscriptionManagerInterfaceSupport(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__EventCapabilities() { }
        /// Friend allocator used by soap_new_tt__EventCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1137 */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (382)
/* complex XSD type 'tt:IOCapabilities': */
class SOAP_CMAC tt__IOCapabilities {
      public:
        /// Optional element 'tt:InputConnectors' of XSD type 'xsd:int'
        int *InputConnectors;
        /// Optional element 'tt:RelayOutputs' of XSD type 'xsd:int'
        int *RelayOutputs;
        /// Optional element 'tt:Extension' of XSD type 'tt:IOCapabilitiesExtension'
        tt__IOCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilities, default initialized and not managed by a soap context
        virtual tt__IOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilities); }
      public:
        /// Constructor with initializations
        tt__IOCapabilities() : InputConnectors(), RelayOutputs(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IOCapabilities() { }
        /// Friend allocator used by soap_new_tt__IOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1140 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (383)
/* complex XSD type 'tt:IOCapabilitiesExtension': */
class SOAP_CMAC tt__IOCapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Auxiliary' of XSD type 'xsd:boolean'
        bool *Auxiliary;
        /// Optional element 'tt:AuxiliaryCommands' of XSD type 'tt:AuxiliaryData'
        std::vector<std::string> AuxiliaryCommands;
        /// Required element 'tt:Extension' of XSD type 'tt:IOCapabilitiesExtension2'
        tt__IOCapabilitiesExtension2 *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__IOCapabilitiesExtension() : __any(), Auxiliary(), AuxiliaryCommands(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IOCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1143 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (384)
/* complex XSD type 'tt:IOCapabilitiesExtension2': */
class SOAP_CMAC tt__IOCapabilitiesExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension2); }
      public:
        /// Constructor with initializations
        tt__IOCapabilitiesExtension2() : __any(), soap() { }
        virtual ~tt__IOCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1146 */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (385)
/* complex XSD type 'tt:MediaCapabilities': */
class SOAP_CMAC tt__MediaCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:StreamingCapabilities' of XSD type 'tt:RealTimeStreamingCapabilities'
        tt__RealTimeStreamingCapabilities *StreamingCapabilities;
        std::vector<char *> __any;
        /// Optional element 'tt:Extension' of XSD type 'tt:MediaCapabilitiesExtension'
        tt__MediaCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilities, default initialized and not managed by a soap context
        virtual tt__MediaCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilities); }
      public:
        /// Constructor with initializations
        tt__MediaCapabilities() : XAddr(), StreamingCapabilities(), __any(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__MediaCapabilities() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1149 */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (386)
/* complex XSD type 'tt:MediaCapabilitiesExtension': */
class SOAP_CMAC tt__MediaCapabilitiesExtension {
      public:
        /// Required element 'tt:ProfileCapabilities' of XSD type 'tt:ProfileCapabilities'
        tt__ProfileCapabilities *ProfileCapabilities;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__MediaCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__MediaCapabilitiesExtension() : ProfileCapabilities(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MediaCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1152 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (387)
/* complex XSD type 'tt:RealTimeStreamingCapabilities': */
class SOAP_CMAC tt__RealTimeStreamingCapabilities {
      public:
        /// Optional element 'tt:RTPMulticast' of XSD type 'xsd:boolean'
        bool *RTPMulticast;
        /// Optional element 'tt:RTP_TCP' of XSD type 'xsd:boolean'
        bool *RTP_USCORETCP;
        /// Optional element 'tt:RTP_RTSP_TCP' of XSD type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// Optional element 'tt:Extension' of XSD type 'tt:RealTimeStreamingCapabilitiesExtension'
        tt__RealTimeStreamingCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilities, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilities); }
      public:
        /// Constructor with initializations
        tt__RealTimeStreamingCapabilities() : RTPMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__RealTimeStreamingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1155 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (388)
/* complex XSD type 'tt:RealTimeStreamingCapabilitiesExtension': */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__RealTimeStreamingCapabilitiesExtension() : __any(), soap() { }
        virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1158 */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (389)
/* complex XSD type 'tt:ProfileCapabilities': */
class SOAP_CMAC tt__ProfileCapabilities {
      public:
        /// Required element 'tt:MaximumNumberOfProfiles' of XSD type 'xsd:int'
        int MaximumNumberOfProfiles;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileCapabilities, default initialized and not managed by a soap context
        virtual tt__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileCapabilities); }
      public:
        /// Constructor with initializations
        tt__ProfileCapabilities() : MaximumNumberOfProfiles(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_tt__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1161 */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (390)
/* complex XSD type 'tt:NetworkCapabilities': */
class SOAP_CMAC tt__NetworkCapabilities {
      public:
        /// Optional element 'tt:IPFilter' of XSD type 'xsd:boolean'
        bool *IPFilter;
        /// Optional element 'tt:ZeroConfiguration' of XSD type 'xsd:boolean'
        bool *ZeroConfiguration;
        /// Optional element 'tt:IPVersion6' of XSD type 'xsd:boolean'
        bool *IPVersion6;
        /// Optional element 'tt:DynDNS' of XSD type 'xsd:boolean'
        bool *DynDNS;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkCapabilitiesExtension'
        tt__NetworkCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilities, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilities); }
      public:
        /// Constructor with initializations
        tt__NetworkCapabilities() : IPFilter(), ZeroConfiguration(), IPVersion6(), DynDNS(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__NetworkCapabilities() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1164 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (391)
/* complex XSD type 'tt:NetworkCapabilitiesExtension': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:Dot11Configuration' of XSD type 'xsd:boolean'
        bool *Dot11Configuration;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkCapabilitiesExtension2'
        tt__NetworkCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__NetworkCapabilitiesExtension() : __any(), Dot11Configuration(), Extension(), soap() { }
        virtual ~tt__NetworkCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1167 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (392)
/* complex XSD type 'tt:NetworkCapabilitiesExtension2': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension2); }
      public:
        /// Constructor with initializations
        tt__NetworkCapabilitiesExtension2() : __any(), soap() { }
        virtual ~tt__NetworkCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1170 */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (393)
/* complex XSD type 'tt:SecurityCapabilities': */
class SOAP_CMAC tt__SecurityCapabilities {
      public:
        /// Required element 'tt:TLS1.1' of XSD type 'xsd:boolean'
        bool TLS1_x002e1;
        /// Required element 'tt:TLS1.2' of XSD type 'xsd:boolean'
        bool TLS1_x002e2;
        /// Required element 'tt:OnboardKeyGeneration' of XSD type 'xsd:boolean'
        bool OnboardKeyGeneration;
        /// Required element 'tt:AccessPolicyConfig' of XSD type 'xsd:boolean'
        bool AccessPolicyConfig;
        /// Required element 'tt:X.509Token' of XSD type 'xsd:boolean'
        bool X_x002e509Token;
        /// Required element 'tt:SAMLToken' of XSD type 'xsd:boolean'
        bool SAMLToken;
        /// Required element 'tt:KerberosToken' of XSD type 'xsd:boolean'
        bool KerberosToken;
        /// Required element 'tt:RELToken' of XSD type 'xsd:boolean'
        bool RELToken;
        std::vector<char *> __any;
        /// Optional element 'tt:Extension' of XSD type 'tt:SecurityCapabilitiesExtension'
        tt__SecurityCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilities, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilities); }
      public:
        /// Constructor with initializations
        tt__SecurityCapabilities() : TLS1_x002e1(), TLS1_x002e2(), OnboardKeyGeneration(), AccessPolicyConfig(), X_x002e509Token(), SAMLToken(), KerberosToken(), RELToken(), __any(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SecurityCapabilities() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1173 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (394)
/* complex XSD type 'tt:SecurityCapabilitiesExtension': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension {
      public:
        /// Required element 'tt:TLS1.0' of XSD type 'xsd:boolean'
        bool TLS1_x002e0;
        /// Optional element 'tt:Extension' of XSD type 'tt:SecurityCapabilitiesExtension2'
        tt__SecurityCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__SecurityCapabilitiesExtension() : TLS1_x002e0(), Extension(), soap() { }
        virtual ~tt__SecurityCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1176 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (395)
/* complex XSD type 'tt:SecurityCapabilitiesExtension2': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2 {
      public:
        /// Required element 'tt:Dot1X' of XSD type 'xsd:boolean'
        bool Dot1X;
        /// Optional element 'tt:SupportedEAPMethod' of XSD type 'xsd:int'
        std::vector<int> SupportedEAPMethod;
        /// Required element 'tt:RemoteUserHandling' of XSD type 'xsd:boolean'
        bool RemoteUserHandling;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension2); }
      public:
        /// Constructor with initializations
        tt__SecurityCapabilitiesExtension2() : Dot1X(), SupportedEAPMethod(), RemoteUserHandling(), __any(), soap() { }
        virtual ~tt__SecurityCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1179 */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (396)
/* complex XSD type 'tt:SystemCapabilities': */
class SOAP_CMAC tt__SystemCapabilities {
      public:
        /// Required element 'tt:DiscoveryResolve' of XSD type 'xsd:boolean'
        bool DiscoveryResolve;
        /// Required element 'tt:DiscoveryBye' of XSD type 'xsd:boolean'
        bool DiscoveryBye;
        /// Required element 'tt:RemoteDiscovery' of XSD type 'xsd:boolean'
        bool RemoteDiscovery;
        /// Required element 'tt:SystemBackup' of XSD type 'xsd:boolean'
        bool SystemBackup;
        /// Required element 'tt:SystemLogging' of XSD type 'xsd:boolean'
        bool SystemLogging;
        /// Required element 'tt:FirmwareUpgrade' of XSD type 'xsd:boolean'
        bool FirmwareUpgrade;
        /// Required element 'tt:SupportedVersions' of XSD type 'tt:OnvifVersion'
        std::vector<tt__OnvifVersion *> SupportedVersions;
        /// Optional element 'tt:Extension' of XSD type 'tt:SystemCapabilitiesExtension'
        tt__SystemCapabilitiesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilities, default initialized and not managed by a soap context
        virtual tt__SystemCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilities); }
      public:
        /// Constructor with initializations
        tt__SystemCapabilities() : DiscoveryResolve(), DiscoveryBye(), RemoteDiscovery(), SystemBackup(), SystemLogging(), FirmwareUpgrade(), SupportedVersions(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SystemCapabilities() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1182 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (397)
/* complex XSD type 'tt:SystemCapabilitiesExtension': */
class SOAP_CMAC tt__SystemCapabilitiesExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:HttpFirmwareUpgrade' of XSD type 'xsd:boolean'
        bool *HttpFirmwareUpgrade;
        /// Optional element 'tt:HttpSystemBackup' of XSD type 'xsd:boolean'
        bool *HttpSystemBackup;
        /// Optional element 'tt:HttpSystemLogging' of XSD type 'xsd:boolean'
        bool *HttpSystemLogging;
        /// Optional element 'tt:HttpSupportInformation' of XSD type 'xsd:boolean'
        bool *HttpSupportInformation;
        /// Optional element 'tt:Extension' of XSD type 'tt:SystemCapabilitiesExtension2'
        tt__SystemCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension); }
      public:
        /// Constructor with initializations
        tt__SystemCapabilitiesExtension() : __any(), HttpFirmwareUpgrade(), HttpSystemBackup(), HttpSystemLogging(), HttpSupportInformation(), Extension(), soap() { }
        virtual ~tt__SystemCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1185 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (398)
/* complex XSD type 'tt:SystemCapabilitiesExtension2': */
class SOAP_CMAC tt__SystemCapabilitiesExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension2); }
      public:
        /// Constructor with initializations
        tt__SystemCapabilitiesExtension2() : __any(), soap() { }
        virtual ~tt__SystemCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1188 */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (399)
/* complex XSD type 'tt:OnvifVersion': */
class SOAP_CMAC tt__OnvifVersion {
      public:
        /// Required element 'tt:Major' of XSD type 'xsd:int'
        int Major;
        /// Required element 'tt:Minor' of XSD type 'xsd:int'
        int Minor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OnvifVersion
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OnvifVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OnvifVersion, default initialized and not managed by a soap context
        virtual tt__OnvifVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OnvifVersion); }
      public:
        /// Constructor with initializations
        tt__OnvifVersion() : Major(), Minor(), soap() { }
        virtual ~tt__OnvifVersion() { }
        /// Friend allocator used by soap_new_tt__OnvifVersion(struct soap*, int)
        friend SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1191 */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (400)
/* complex XSD type 'tt:ImagingCapabilities': */
class SOAP_CMAC tt__ImagingCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingCapabilities, default initialized and not managed by a soap context
        virtual tt__ImagingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingCapabilities); }
      public:
        /// Constructor with initializations
        tt__ImagingCapabilities() : XAddr(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingCapabilities() { }
        /// Friend allocator used by soap_new_tt__ImagingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1194 */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (401)
/* complex XSD type 'tt:PTZCapabilities': */
class SOAP_CMAC tt__PTZCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZCapabilities, default initialized and not managed by a soap context
        virtual tt__PTZCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZCapabilities); }
      public:
        /// Constructor with initializations
        tt__PTZCapabilities() : XAddr(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZCapabilities() { }
        /// Friend allocator used by soap_new_tt__PTZCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1197 */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (402)
/* complex XSD type 'tt:DeviceIOCapabilities': */
class SOAP_CMAC tt__DeviceIOCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:VideoSources' of XSD type 'xsd:int'
        int VideoSources;
        /// Required element 'tt:VideoOutputs' of XSD type 'xsd:int'
        int VideoOutputs;
        /// Required element 'tt:AudioSources' of XSD type 'xsd:int'
        int AudioSources;
        /// Required element 'tt:AudioOutputs' of XSD type 'xsd:int'
        int AudioOutputs;
        /// Required element 'tt:RelayOutputs' of XSD type 'xsd:int'
        int RelayOutputs;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceIOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceIOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceIOCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceIOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceIOCapabilities); }
      public:
        /// Constructor with initializations
        tt__DeviceIOCapabilities() : XAddr(), VideoSources(), VideoOutputs(), AudioSources(), AudioOutputs(), RelayOutputs(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__DeviceIOCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceIOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1200 */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (403)
/* complex XSD type 'tt:DisplayCapabilities': */
class SOAP_CMAC tt__DisplayCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:FixedLayout' of XSD type 'xsd:boolean'
        bool FixedLayout;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DisplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DisplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DisplayCapabilities, default initialized and not managed by a soap context
        virtual tt__DisplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DisplayCapabilities); }
      public:
        /// Constructor with initializations
        tt__DisplayCapabilities() : XAddr(), FixedLayout(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__DisplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__DisplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1203 */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (404)
/* complex XSD type 'tt:RecordingCapabilities': */
class SOAP_CMAC tt__RecordingCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:ReceiverSource' of XSD type 'xsd:boolean'
        bool ReceiverSource;
        /// Required element 'tt:MediaProfileSource' of XSD type 'xsd:boolean'
        bool MediaProfileSource;
        /// Required element 'tt:DynamicRecordings' of XSD type 'xsd:boolean'
        bool DynamicRecordings;
        /// Required element 'tt:DynamicTracks' of XSD type 'xsd:boolean'
        bool DynamicTracks;
        /// Required element 'tt:MaxStringLength' of XSD type 'xsd:int'
        int MaxStringLength;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingCapabilities, default initialized and not managed by a soap context
        virtual tt__RecordingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingCapabilities); }
      public:
        /// Constructor with initializations
        tt__RecordingCapabilities() : XAddr(), ReceiverSource(), MediaProfileSource(), DynamicRecordings(), DynamicTracks(), MaxStringLength(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RecordingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1206 */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (405)
/* complex XSD type 'tt:SearchCapabilities': */
class SOAP_CMAC tt__SearchCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:MetadataSearch' of XSD type 'xsd:boolean'
        bool MetadataSearch;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchCapabilities, default initialized and not managed by a soap context
        virtual tt__SearchCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchCapabilities); }
      public:
        /// Constructor with initializations
        tt__SearchCapabilities() : XAddr(), MetadataSearch(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__SearchCapabilities() { }
        /// Friend allocator used by soap_new_tt__SearchCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1209 */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (406)
/* complex XSD type 'tt:ReplayCapabilities': */
class SOAP_CMAC tt__ReplayCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReplayCapabilities, default initialized and not managed by a soap context
        virtual tt__ReplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReplayCapabilities); }
      public:
        /// Constructor with initializations
        tt__ReplayCapabilities() : XAddr(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ReplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1212 */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (407)
/* complex XSD type 'tt:ReceiverCapabilities': */
class SOAP_CMAC tt__ReceiverCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:RTP_Multicast' of XSD type 'xsd:boolean'
        bool RTP_USCOREMulticast;
        /// Required element 'tt:RTP_TCP' of XSD type 'xsd:boolean'
        bool RTP_USCORETCP;
        /// Required element 'tt:RTP_RTSP_TCP' of XSD type 'xsd:boolean'
        bool RTP_USCORERTSP_USCORETCP;
        /// Required element 'tt:SupportedReceivers' of XSD type 'xsd:int'
        int SupportedReceivers;
        /// Required element 'tt:MaximumRTSPURILength' of XSD type 'xsd:int'
        int MaximumRTSPURILength;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverCapabilities, default initialized and not managed by a soap context
        virtual tt__ReceiverCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverCapabilities); }
      public:
        /// Constructor with initializations
        tt__ReceiverCapabilities() : XAddr(), RTP_USCOREMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), SupportedReceivers(), MaximumRTSPURILength(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ReceiverCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReceiverCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1215 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (408)
/* complex XSD type 'tt:AnalyticsDeviceCapabilities': */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities {
      public:
        /// Required element 'tt:XAddr' of XSD type 'xsd:anyURI'
        std::string XAddr;
        /// Optional element 'tt:RuleSupport' of XSD type 'xsd:boolean'
        bool *RuleSupport;
        /// Optional element 'tt:Extension' of XSD type 'tt:AnalyticsDeviceExtension'
        tt__AnalyticsDeviceExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceCapabilities); }
      public:
        /// Constructor with initializations
        tt__AnalyticsDeviceCapabilities() : XAddr(), RuleSupport(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsDeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1218 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (409)
/* complex XSD type 'tt:AnalyticsDeviceExtension': */
class SOAP_CMAC tt__AnalyticsDeviceExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceExtension); }
      public:
        /// Constructor with initializations
        tt__AnalyticsDeviceExtension() : __any(), soap() { }
        virtual ~tt__AnalyticsDeviceExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1221 */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (410)
/* complex XSD type 'tt:SystemLog': */
class SOAP_CMAC tt__SystemLog {
      public:
        /// Optional element 'tt:Binary' of XSD type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XSD type 'xsd:string'
        std::string *String;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLog
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLog, default initialized and not managed by a soap context
        virtual tt__SystemLog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLog); }
      public:
        /// Constructor with initializations
        tt__SystemLog() : Binary(), String(), soap() { }
        virtual ~tt__SystemLog() { }
        /// Friend allocator used by soap_new_tt__SystemLog(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1224 */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (411)
/* complex XSD type 'tt:SupportInformation': */
class SOAP_CMAC tt__SupportInformation {
      public:
        /// Optional element 'tt:Binary' of XSD type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XSD type 'xsd:string'
        std::string *String;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportInformation, default initialized and not managed by a soap context
        virtual tt__SupportInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportInformation); }
      public:
        /// Constructor with initializations
        tt__SupportInformation() : Binary(), String(), soap() { }
        virtual ~tt__SupportInformation() { }
        /// Friend allocator used by soap_new_tt__SupportInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1227 */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (412)
/* complex XSD type 'tt:BinaryData': */
class SOAP_CMAC tt__BinaryData {
      public:
        /// Required element 'tt:Data' of XSD type 'xsd:base64Binary'
        xsd__base64Binary Data;
        /// optional attribute 'xmime:contentType' of XSD type 'xsd:string'
        char *xmime__contentType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BinaryData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BinaryData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BinaryData, default initialized and not managed by a soap context
        virtual tt__BinaryData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BinaryData); }
      public:
        /// Constructor with initializations
        tt__BinaryData() : Data(), xmime__contentType(), soap() { }
        virtual ~tt__BinaryData() { }
        /// Friend allocator used by soap_new_tt__BinaryData(struct soap*, int)
        friend SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1230 */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (413)
/* complex XSD type 'tt:AttachmentData': */
class SOAP_CMAC tt__AttachmentData {
      public:
        /// Required element 'xop:Include' of XSD type 'xop:Include'
        struct _xop__Include xop__Include;
        /// optional attribute 'xmime:contentType' of XSD type 'xsd:string'
        char *xmime__contentType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AttachmentData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AttachmentData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AttachmentData, default initialized and not managed by a soap context
        virtual tt__AttachmentData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AttachmentData); }
      public:
        /// Constructor with initializations
        tt__AttachmentData() : xop__Include(), xmime__contentType(), soap() { }
        virtual ~tt__AttachmentData() { }
        /// Friend allocator used by soap_new_tt__AttachmentData(struct soap*, int)
        friend SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1233 */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (414)
/* complex XSD type 'tt:BackupFile': */
class SOAP_CMAC tt__BackupFile {
      public:
        /// Required element 'tt:Name' of XSD type 'xsd:string'
        std::string Name;
        /// Required element 'tt:Data' of XSD type 'tt:AttachmentData'
        tt__AttachmentData *Data;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BackupFile
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BackupFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BackupFile, default initialized and not managed by a soap context
        virtual tt__BackupFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BackupFile); }
      public:
        /// Constructor with initializations
        tt__BackupFile() : Name(), Data(), soap() { }
        virtual ~tt__BackupFile() { }
        /// Friend allocator used by soap_new_tt__BackupFile(struct soap*, int)
        friend SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1236 */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (415)
/* complex XSD type 'tt:SystemLogUriList': */
class SOAP_CMAC tt__SystemLogUriList {
      public:
        /// Optional element 'tt:SystemLog' of XSD type 'tt:SystemLogUri'
        std::vector<tt__SystemLogUri *> SystemLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUriList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUriList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUriList, default initialized and not managed by a soap context
        virtual tt__SystemLogUriList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUriList); }
      public:
        /// Constructor with initializations
        tt__SystemLogUriList() : SystemLog(), soap() { }
        virtual ~tt__SystemLogUriList() { }
        /// Friend allocator used by soap_new_tt__SystemLogUriList(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1239 */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (416)
/* complex XSD type 'tt:SystemLogUri': */
class SOAP_CMAC tt__SystemLogUri {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:SystemLogType'
        tt__SystemLogType Type;
        /// Required element 'tt:Uri' of XSD type 'xsd:anyURI'
        std::string Uri;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUri
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUri, default initialized and not managed by a soap context
        virtual tt__SystemLogUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUri); }
      public:
        /// Constructor with initializations
        tt__SystemLogUri() : Type(), Uri(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__SystemLogUri() { }
        /// Friend allocator used by soap_new_tt__SystemLogUri(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1242 */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (417)
/* complex XSD type 'tt:SystemDateTime': */
class SOAP_CMAC tt__SystemDateTime {
      public:
        /// Required element 'tt:DateTimeType' of XSD type 'tt:SetDateTimeType'
        tt__SetDateTimeType DateTimeType;
        /// Required element 'tt:DaylightSavings' of XSD type 'xsd:boolean'
        bool DaylightSavings;
        /// Optional element 'tt:TimeZone' of XSD type 'tt:TimeZone'
        tt__TimeZone *TimeZone;
        /// Optional element 'tt:UTCDateTime' of XSD type 'tt:DateTime'
        tt__DateTime *UTCDateTime;
        /// Optional element 'tt:LocalDateTime' of XSD type 'tt:DateTime'
        tt__DateTime *LocalDateTime;
        /// Optional element 'tt:Extension' of XSD type 'tt:SystemDateTimeExtension'
        tt__SystemDateTimeExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTime, default initialized and not managed by a soap context
        virtual tt__SystemDateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTime); }
      public:
        /// Constructor with initializations
        tt__SystemDateTime() : DateTimeType(), DaylightSavings(), TimeZone(), UTCDateTime(), LocalDateTime(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SystemDateTime() { }
        /// Friend allocator used by soap_new_tt__SystemDateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1245 */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (418)
/* complex XSD type 'tt:SystemDateTimeExtension': */
class SOAP_CMAC tt__SystemDateTimeExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTimeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTimeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTimeExtension, default initialized and not managed by a soap context
        virtual tt__SystemDateTimeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTimeExtension); }
      public:
        /// Constructor with initializations
        tt__SystemDateTimeExtension() : __any(), soap() { }
        virtual ~tt__SystemDateTimeExtension() { }
        /// Friend allocator used by soap_new_tt__SystemDateTimeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1248 */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (419)
/* complex XSD type 'tt:DateTime': */
class SOAP_CMAC tt__DateTime {
      public:
        /// Required element 'tt:Time' of XSD type 'tt:Time'
        tt__Time *Time;
        /// Required element 'tt:Date' of XSD type 'tt:Date'
        tt__Date *Date;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTime, default initialized and not managed by a soap context
        virtual tt__DateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTime); }
      public:
        /// Constructor with initializations
        tt__DateTime() : Time(), Date(), soap() { }
        virtual ~tt__DateTime() { }
        /// Friend allocator used by soap_new_tt__DateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1251 */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (420)
/* complex XSD type 'tt:Date': */
class SOAP_CMAC tt__Date {
      public:
        /// Required element 'tt:Year' of XSD type 'xsd:int'
        int Year;
        /// Required element 'tt:Month' of XSD type 'xsd:int'
        int Month;
        /// Required element 'tt:Day' of XSD type 'xsd:int'
        int Day;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Date
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Date; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Date, default initialized and not managed by a soap context
        virtual tt__Date *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Date); }
      public:
        /// Constructor with initializations
        tt__Date() : Year(), Month(), Day(), soap() { }
        virtual ~tt__Date() { }
        /// Friend allocator used by soap_new_tt__Date(struct soap*, int)
        friend SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1254 */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (421)
/* complex XSD type 'tt:Time': */
class SOAP_CMAC tt__Time {
      public:
        /// Required element 'tt:Hour' of XSD type 'xsd:int'
        int Hour;
        /// Required element 'tt:Minute' of XSD type 'xsd:int'
        int Minute;
        /// Required element 'tt:Second' of XSD type 'xsd:int'
        int Second;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Time
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Time; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Time, default initialized and not managed by a soap context
        virtual tt__Time *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Time); }
      public:
        /// Constructor with initializations
        tt__Time() : Hour(), Minute(), Second(), soap() { }
        virtual ~tt__Time() { }
        /// Friend allocator used by soap_new_tt__Time(struct soap*, int)
        friend SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1257 */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (422)
/* complex XSD type 'tt:TimeZone': */
class SOAP_CMAC tt__TimeZone {
      public:
        /// Required element 'tt:TZ' of XSD type 'xsd:token'
        std::string TZ;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TimeZone
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TimeZone; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TimeZone, default initialized and not managed by a soap context
        virtual tt__TimeZone *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TimeZone); }
      public:
        /// Constructor with initializations
        tt__TimeZone() : TZ(), soap() { }
        virtual ~tt__TimeZone() { }
        /// Friend allocator used by soap_new_tt__TimeZone(struct soap*, int)
        friend SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1260 */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (423)
/* complex XSD type 'tt:RemoteUser': */
class SOAP_CMAC tt__RemoteUser {
      public:
        /// Required element 'tt:Username' of XSD type 'xsd:string'
        std::string Username;
        /// Optional element 'tt:Password' of XSD type 'xsd:string'
        std::string *Password;
        /// Required element 'tt:UseDerivedPassword' of XSD type 'xsd:boolean'
        bool UseDerivedPassword;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RemoteUser, default initialized and not managed by a soap context
        virtual tt__RemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RemoteUser); }
      public:
        /// Constructor with initializations
        tt__RemoteUser() : Username(), Password(), UseDerivedPassword(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RemoteUser() { }
        /// Friend allocator used by soap_new_tt__RemoteUser(struct soap*, int)
        friend SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1263 */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (424)
/* complex XSD type 'tt:User': */
class SOAP_CMAC tt__User {
      public:
        /// Required element 'tt:Username' of XSD type 'xsd:string'
        std::string Username;
        /// Optional element 'tt:Password' of XSD type 'xsd:string'
        std::string *Password;
        /// Required element 'tt:UserLevel' of XSD type 'tt:UserLevel'
        tt__UserLevel UserLevel;
        /// Optional element 'tt:Extension' of XSD type 'tt:UserExtension'
        tt__UserExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__User
        virtual long soap_type(void) const { return SOAP_TYPE_tt__User; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__User, default initialized and not managed by a soap context
        virtual tt__User *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__User); }
      public:
        /// Constructor with initializations
        tt__User() : Username(), Password(), UserLevel(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__User() { }
        /// Friend allocator used by soap_new_tt__User(struct soap*, int)
        friend SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1266 */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (425)
/* complex XSD type 'tt:UserExtension': */
class SOAP_CMAC tt__UserExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__UserExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__UserExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__UserExtension, default initialized and not managed by a soap context
        virtual tt__UserExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__UserExtension); }
      public:
        /// Constructor with initializations
        tt__UserExtension() : __any(), soap() { }
        virtual ~tt__UserExtension() { }
        /// Friend allocator used by soap_new_tt__UserExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1269 */
#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (426)
/* complex XSD type 'tt:CertificateGenerationParameters': */
class SOAP_CMAC tt__CertificateGenerationParameters {
      public:
        /// Optional element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string *CertificateID;
        /// Optional element 'tt:Subject' of XSD type 'xsd:string'
        std::string *Subject;
        /// Optional element 'tt:ValidNotBefore' of XSD type 'xsd:token'
        std::string *ValidNotBefore;
        /// Optional element 'tt:ValidNotAfter' of XSD type 'xsd:token'
        std::string *ValidNotAfter;
        /// Optional element 'tt:Extension' of XSD type 'tt:CertificateGenerationParametersExtension'
        tt__CertificateGenerationParametersExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateGenerationParameters
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateGenerationParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateGenerationParameters, default initialized and not managed by a soap context
        virtual tt__CertificateGenerationParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateGenerationParameters); }
      public:
        /// Constructor with initializations
        tt__CertificateGenerationParameters() : CertificateID(), Subject(), ValidNotBefore(), ValidNotAfter(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__CertificateGenerationParameters() { }
        /// Friend allocator used by soap_new_tt__CertificateGenerationParameters(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateGenerationParameters * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1272 */
#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (427)
/* complex XSD type 'tt:CertificateGenerationParametersExtension': */
class SOAP_CMAC tt__CertificateGenerationParametersExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateGenerationParametersExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateGenerationParametersExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateGenerationParametersExtension, default initialized and not managed by a soap context
        virtual tt__CertificateGenerationParametersExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateGenerationParametersExtension); }
      public:
        /// Constructor with initializations
        tt__CertificateGenerationParametersExtension() : __any(), soap() { }
        virtual ~tt__CertificateGenerationParametersExtension() { }
        /// Friend allocator used by soap_new_tt__CertificateGenerationParametersExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateGenerationParametersExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParametersExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1275 */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (428)
/* complex XSD type 'tt:Certificate': */
class SOAP_CMAC tt__Certificate {
      public:
        /// Required element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string CertificateID;
        /// Required element 'tt:Certificate' of XSD type 'tt:BinaryData'
        tt__BinaryData *Certificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Certificate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Certificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Certificate, default initialized and not managed by a soap context
        virtual tt__Certificate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Certificate); }
      public:
        /// Constructor with initializations
        tt__Certificate() : CertificateID(), Certificate(), soap() { }
        virtual ~tt__Certificate() { }
        /// Friend allocator used by soap_new_tt__Certificate(struct soap*, int)
        friend SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1278 */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (429)
/* complex XSD type 'tt:CertificateStatus': */
class SOAP_CMAC tt__CertificateStatus {
      public:
        /// Required element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string CertificateID;
        /// Required element 'tt:Status' of XSD type 'xsd:boolean'
        bool Status;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateStatus, default initialized and not managed by a soap context
        virtual tt__CertificateStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateStatus); }
      public:
        /// Constructor with initializations
        tt__CertificateStatus() : CertificateID(), Status(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__CertificateStatus() { }
        /// Friend allocator used by soap_new_tt__CertificateStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1281 */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (430)
/* complex XSD type 'tt:CertificateWithPrivateKey': */
class SOAP_CMAC tt__CertificateWithPrivateKey {
      public:
        /// Optional element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string *CertificateID;
        /// Required element 'tt:Certificate' of XSD type 'tt:BinaryData'
        tt__BinaryData *Certificate;
        /// Required element 'tt:PrivateKey' of XSD type 'tt:BinaryData'
        tt__BinaryData *PrivateKey;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateWithPrivateKey
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateWithPrivateKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateWithPrivateKey, default initialized and not managed by a soap context
        virtual tt__CertificateWithPrivateKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateWithPrivateKey); }
      public:
        /// Constructor with initializations
        tt__CertificateWithPrivateKey() : CertificateID(), Certificate(), PrivateKey(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__CertificateWithPrivateKey() { }
        /// Friend allocator used by soap_new_tt__CertificateWithPrivateKey(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1284 */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (431)
/* complex XSD type 'tt:CertificateInformation': */
class SOAP_CMAC tt__CertificateInformation {
      public:
        /// Required element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string CertificateID;
        /// Optional element 'tt:IssuerDN' of XSD type 'xsd:string'
        std::string *IssuerDN;
        /// Optional element 'tt:SubjectDN' of XSD type 'xsd:string'
        std::string *SubjectDN;
        /// Optional element 'tt:KeyUsage' of XSD type 'tt:CertificateUsage'
        tt__CertificateUsage *KeyUsage;
        /// Optional element 'tt:ExtendedKeyUsage' of XSD type 'tt:CertificateUsage'
        tt__CertificateUsage *ExtendedKeyUsage;
        /// Optional element 'tt:KeyLength' of XSD type 'xsd:int'
        int *KeyLength;
        /// Optional element 'tt:Version' of XSD type 'xsd:string'
        std::string *Version;
        /// Optional element 'tt:SerialNum' of XSD type 'xsd:string'
        std::string *SerialNum;
        /// Optional element 'tt:SignatureAlgorithm' of XSD type 'xsd:string'
        std::string *SignatureAlgorithm;
        /// Optional element 'tt:Validity' of XSD type 'tt:DateTimeRange'
        tt__DateTimeRange *Validity;
        /// Optional element 'tt:Extension' of XSD type 'tt:CertificateInformationExtension'
        tt__CertificateInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformation, default initialized and not managed by a soap context
        virtual tt__CertificateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformation); }
      public:
        /// Constructor with initializations
        tt__CertificateInformation() : CertificateID(), IssuerDN(), SubjectDN(), KeyUsage(), ExtendedKeyUsage(), KeyLength(), Version(), SerialNum(), SignatureAlgorithm(), Validity(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__CertificateInformation() { }
        /// Friend allocator used by soap_new_tt__CertificateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1290 */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (433)
/* complex XSD type 'tt:CertificateInformationExtension': */
class SOAP_CMAC tt__CertificateInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformationExtension, default initialized and not managed by a soap context
        virtual tt__CertificateInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformationExtension); }
      public:
        /// Constructor with initializations
        tt__CertificateInformationExtension() : __any(), soap() { }
        virtual ~tt__CertificateInformationExtension() { }
        /// Friend allocator used by soap_new_tt__CertificateInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1293 */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (434)
/* complex XSD type 'tt:Dot1XConfiguration': */
class SOAP_CMAC tt__Dot1XConfiguration {
      public:
        /// Required element 'tt:Dot1XConfigurationToken' of XSD type 'tt:ReferenceToken'
        std::string Dot1XConfigurationToken;
        /// Required element 'tt:Identity' of XSD type 'xsd:string'
        std::string Identity;
        /// Optional element 'tt:AnonymousID' of XSD type 'xsd:string'
        std::string *AnonymousID;
        /// Required element 'tt:EAPMethod' of XSD type 'xsd:int'
        int EAPMethod;
        /// Optional element 'tt:CACertificateID' of XSD type 'xsd:token'
        std::vector<std::string> CACertificateID;
        /// Optional element 'tt:EAPMethodConfiguration' of XSD type 'tt:EAPMethodConfiguration'
        tt__EAPMethodConfiguration *EAPMethodConfiguration;
        /// Optional element 'tt:Extension' of XSD type 'tt:Dot1XConfigurationExtension'
        tt__Dot1XConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfiguration); }
      public:
        /// Constructor with initializations
        tt__Dot1XConfiguration() : Dot1XConfigurationToken(), Identity(), AnonymousID(), EAPMethod(), CACertificateID(), EAPMethodConfiguration(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Dot1XConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1296 */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (435)
/* complex XSD type 'tt:Dot1XConfigurationExtension': */
class SOAP_CMAC tt__Dot1XConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot1XConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__Dot1XConfigurationExtension() : __any(), soap() { }
        virtual ~tt__Dot1XConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1299 */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (436)
/* complex XSD type 'tt:EAPMethodConfiguration': */
class SOAP_CMAC tt__EAPMethodConfiguration {
      public:
        /// Optional element 'tt:TLSConfiguration' of XSD type 'tt:TLSConfiguration'
        tt__TLSConfiguration *TLSConfiguration;
        /// Optional element 'tt:Password' of XSD type 'xsd:string'
        std::string *Password;
        /// Optional element 'tt:Extension' of XSD type 'tt:EapMethodExtension'
        tt__EapMethodExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EAPMethodConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EAPMethodConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EAPMethodConfiguration, default initialized and not managed by a soap context
        virtual tt__EAPMethodConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EAPMethodConfiguration); }
      public:
        /// Constructor with initializations
        tt__EAPMethodConfiguration() : TLSConfiguration(), Password(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__EAPMethodConfiguration() { }
        /// Friend allocator used by soap_new_tt__EAPMethodConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1302 */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (437)
/* complex XSD type 'tt:EapMethodExtension': */
class SOAP_CMAC tt__EapMethodExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EapMethodExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EapMethodExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EapMethodExtension, default initialized and not managed by a soap context
        virtual tt__EapMethodExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EapMethodExtension); }
      public:
        /// Constructor with initializations
        tt__EapMethodExtension() : __any(), soap() { }
        virtual ~tt__EapMethodExtension() { }
        /// Friend allocator used by soap_new_tt__EapMethodExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1305 */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (438)
/* complex XSD type 'tt:TLSConfiguration': */
class SOAP_CMAC tt__TLSConfiguration {
      public:
        /// Required element 'tt:CertificateID' of XSD type 'xsd:token'
        std::string CertificateID;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TLSConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TLSConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TLSConfiguration, default initialized and not managed by a soap context
        virtual tt__TLSConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TLSConfiguration); }
      public:
        /// Constructor with initializations
        tt__TLSConfiguration() : CertificateID(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__TLSConfiguration() { }
        /// Friend allocator used by soap_new_tt__TLSConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1308 */
#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (439)
/* complex XSD type 'tt:GenericEapPwdConfigurationExtension': */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GenericEapPwdConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GenericEapPwdConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__GenericEapPwdConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GenericEapPwdConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__GenericEapPwdConfigurationExtension() : __any(), soap() { }
        virtual ~tt__GenericEapPwdConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__GenericEapPwdConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__GenericEapPwdConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1311 */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (440)
/* complex XSD type 'tt:RelayOutputSettings': */
class SOAP_CMAC tt__RelayOutputSettings {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:RelayMode'
        tt__RelayMode Mode;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 DelayTime;
        /// Required element 'tt:IdleState' of XSD type 'tt:RelayIdleState'
        tt__RelayIdleState IdleState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutputSettings
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutputSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutputSettings, default initialized and not managed by a soap context
        virtual tt__RelayOutputSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutputSettings); }
      public:
        /// Constructor with initializations
        tt__RelayOutputSettings() : Mode(), DelayTime(), IdleState(), soap() { }
        virtual ~tt__RelayOutputSettings() { }
        /// Friend allocator used by soap_new_tt__RelayOutputSettings(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1323 */
#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (444)
/* complex XSD type 'tt:PTZNodeExtension': */
class SOAP_CMAC tt__PTZNodeExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:SupportedPresetTour' of XSD type 'tt:PTZPresetTourSupported'
        tt__PTZPresetTourSupported *SupportedPresetTour;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZNodeExtension2'
        tt__PTZNodeExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNodeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNodeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNodeExtension, default initialized and not managed by a soap context
        virtual tt__PTZNodeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNodeExtension); }
      public:
        /// Constructor with initializations
        tt__PTZNodeExtension() : __any(), SupportedPresetTour(), Extension(), soap() { }
        virtual ~tt__PTZNodeExtension() { }
        /// Friend allocator used by soap_new_tt__PTZNodeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1326 */
#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (445)
/* complex XSD type 'tt:PTZNodeExtension2': */
class SOAP_CMAC tt__PTZNodeExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNodeExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNodeExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNodeExtension2, default initialized and not managed by a soap context
        virtual tt__PTZNodeExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNodeExtension2); }
      public:
        /// Constructor with initializations
        tt__PTZNodeExtension2() : __any(), soap() { }
        virtual ~tt__PTZNodeExtension2() { }
        /// Friend allocator used by soap_new_tt__PTZNodeExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1329 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (446)
/* complex XSD type 'tt:PTZPresetTourSupported': */
class SOAP_CMAC tt__PTZPresetTourSupported {
      public:
        /// Required element 'tt:MaximumNumberOfPresetTours' of XSD type 'xsd:int'
        int MaximumNumberOfPresetTours;
        /// Optional element 'tt:PTZPresetTourOperation' of XSD type 'tt:PTZPresetTourOperation'
        std::vector<tt__PTZPresetTourOperation> PTZPresetTourOperation;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourSupportedExtension'
        tt__PTZPresetTourSupportedExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSupported
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSupported; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSupported, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSupported *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSupported); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourSupported() : MaximumNumberOfPresetTours(), PTZPresetTourOperation(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourSupported() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSupported(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1332 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (447)
/* complex XSD type 'tt:PTZPresetTourSupportedExtension': */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSupportedExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSupportedExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSupportedExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSupportedExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSupportedExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourSupportedExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourSupportedExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSupportedExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1338 */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (449)
/* complex XSD type 'tt:PTZConfigurationExtension': */
class SOAP_CMAC tt__PTZConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:PTControlDirection' of XSD type 'tt:PTControlDirection'
        tt__PTControlDirection *PTControlDirection;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZConfigurationExtension2'
        tt__PTZConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__PTZConfigurationExtension() : __any(), PTControlDirection(), Extension(), soap() { }
        virtual ~tt__PTZConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1341 */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (450)
/* complex XSD type 'tt:PTZConfigurationExtension2': */
class SOAP_CMAC tt__PTZConfigurationExtension2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationExtension2); }
      public:
        /// Constructor with initializations
        tt__PTZConfigurationExtension2() : __any(), soap() { }
        virtual ~tt__PTZConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1344 */
#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (451)
/* complex XSD type 'tt:PTControlDirection': */
class SOAP_CMAC tt__PTControlDirection {
      public:
        /// Optional element 'tt:EFlip' of XSD type 'tt:EFlip'
        tt__EFlip *EFlip;
        /// Optional element 'tt:Reverse' of XSD type 'tt:Reverse'
        tt__Reverse *Reverse;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTControlDirectionExtension'
        tt__PTControlDirectionExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirection, default initialized and not managed by a soap context
        virtual tt__PTControlDirection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirection); }
      public:
        /// Constructor with initializations
        tt__PTControlDirection() : EFlip(), Reverse(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTControlDirection() { }
        /// Friend allocator used by soap_new_tt__PTControlDirection(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1347 */
#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (452)
/* complex XSD type 'tt:PTControlDirectionExtension': */
class SOAP_CMAC tt__PTControlDirectionExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionExtension, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionExtension); }
      public:
        /// Constructor with initializations
        tt__PTControlDirectionExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTControlDirectionExtension() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1350 */
#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (453)
/* complex XSD type 'tt:EFlip': */
class SOAP_CMAC tt__EFlip {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:EFlipMode'
        tt__EFlipMode Mode;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlip
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlip; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlip, default initialized and not managed by a soap context
        virtual tt__EFlip *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlip); }
      public:
        /// Constructor with initializations
        tt__EFlip() : Mode(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__EFlip() { }
        /// Friend allocator used by soap_new_tt__EFlip(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1353 */
#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (454)
/* complex XSD type 'tt:Reverse': */
class SOAP_CMAC tt__Reverse {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ReverseMode'
        tt__ReverseMode Mode;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Reverse
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Reverse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Reverse, default initialized and not managed by a soap context
        virtual tt__Reverse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Reverse); }
      public:
        /// Constructor with initializations
        tt__Reverse() : Mode(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Reverse() { }
        /// Friend allocator used by soap_new_tt__Reverse(struct soap*, int)
        friend SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1356 */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (455)
/* complex XSD type 'tt:PTZConfigurationOptions': */
class SOAP_CMAC tt__PTZConfigurationOptions {
      public:
        /// Required element 'tt:Spaces' of XSD type 'tt:PTZSpaces'
        tt__PTZSpaces *Spaces;
        /// Required element 'tt:PTZTimeout' of XSD type 'tt:DurationRange'
        tt__DurationRange *PTZTimeout;
        std::vector<char *> __any;
        /// Optional element 'tt:PTControlDirection' of XSD type 'tt:PTControlDirectionOptions'
        tt__PTControlDirectionOptions *PTControlDirection;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZConfigurationOptions2'
        tt__PTZConfigurationOptions2 *Extension;
        /// optional attribute 'PTZRamps' of XSD type 'tt:IntAttrList'
        std::string *PTZRamps;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__PTZConfigurationOptions() : Spaces(), PTZTimeout(), __any(), PTControlDirection(), Extension(), PTZRamps(), __anyAttribute(), soap() { }
        virtual ~tt__PTZConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1359 */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (456)
/* complex XSD type 'tt:PTZConfigurationOptions2': */
class SOAP_CMAC tt__PTZConfigurationOptions2 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationOptions2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationOptions2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationOptions2, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationOptions2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationOptions2); }
      public:
        /// Constructor with initializations
        tt__PTZConfigurationOptions2() : __any(), soap() { }
        virtual ~tt__PTZConfigurationOptions2() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationOptions2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1362 */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (457)
/* complex XSD type 'tt:PTControlDirectionOptions': */
class SOAP_CMAC tt__PTControlDirectionOptions {
      public:
        /// Optional element 'tt:EFlip' of XSD type 'tt:EFlipOptions'
        tt__EFlipOptions *EFlip;
        /// Optional element 'tt:Reverse' of XSD type 'tt:ReverseOptions'
        tt__ReverseOptions *Reverse;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTControlDirectionOptionsExtension'
        tt__PTControlDirectionOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionOptions, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionOptions); }
      public:
        /// Constructor with initializations
        tt__PTControlDirectionOptions() : EFlip(), Reverse(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTControlDirectionOptions() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1365 */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (458)
/* complex XSD type 'tt:PTControlDirectionOptionsExtension': */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__PTControlDirectionOptionsExtension() : __any(), soap() { }
        virtual ~tt__PTControlDirectionOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1368 */
#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (459)
/* complex XSD type 'tt:EFlipOptions': */
class SOAP_CMAC tt__EFlipOptions {
      public:
        /// Optional element 'tt:Mode' of XSD type 'tt:EFlipMode'
        std::vector<tt__EFlipMode> Mode;
        /// Optional element 'tt:Extension' of XSD type 'tt:EFlipOptionsExtension'
        tt__EFlipOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlipOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlipOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlipOptions, default initialized and not managed by a soap context
        virtual tt__EFlipOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlipOptions); }
      public:
        /// Constructor with initializations
        tt__EFlipOptions() : Mode(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__EFlipOptions() { }
        /// Friend allocator used by soap_new_tt__EFlipOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1371 */
#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (460)
/* complex XSD type 'tt:EFlipOptionsExtension': */
class SOAP_CMAC tt__EFlipOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlipOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlipOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlipOptionsExtension, default initialized and not managed by a soap context
        virtual tt__EFlipOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlipOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__EFlipOptionsExtension() : __any(), soap() { }
        virtual ~tt__EFlipOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__EFlipOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1374 */
#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (461)
/* complex XSD type 'tt:ReverseOptions': */
class SOAP_CMAC tt__ReverseOptions {
      public:
        /// Optional element 'tt:Mode' of XSD type 'tt:ReverseMode'
        std::vector<tt__ReverseMode> Mode;
        /// Optional element 'tt:Extension' of XSD type 'tt:ReverseOptionsExtension'
        tt__ReverseOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReverseOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReverseOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReverseOptions, default initialized and not managed by a soap context
        virtual tt__ReverseOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReverseOptions); }
      public:
        /// Constructor with initializations
        tt__ReverseOptions() : Mode(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ReverseOptions() { }
        /// Friend allocator used by soap_new_tt__ReverseOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1377 */
#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (462)
/* complex XSD type 'tt:ReverseOptionsExtension': */
class SOAP_CMAC tt__ReverseOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReverseOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReverseOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReverseOptionsExtension, default initialized and not managed by a soap context
        virtual tt__ReverseOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReverseOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__ReverseOptionsExtension() : __any(), soap() { }
        virtual ~tt__ReverseOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__ReverseOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1380 */
#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (463)
/* complex XSD type 'tt:PanTiltLimits': */
class SOAP_CMAC tt__PanTiltLimits {
      public:
        /// Required element 'tt:Range' of XSD type 'tt:Space2DDescription'
        tt__Space2DDescription *Range;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PanTiltLimits
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PanTiltLimits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PanTiltLimits, default initialized and not managed by a soap context
        virtual tt__PanTiltLimits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PanTiltLimits); }
      public:
        /// Constructor with initializations
        tt__PanTiltLimits() : Range(), soap() { }
        virtual ~tt__PanTiltLimits() { }
        /// Friend allocator used by soap_new_tt__PanTiltLimits(struct soap*, int)
        friend SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1383 */
#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (464)
/* complex XSD type 'tt:ZoomLimits': */
class SOAP_CMAC tt__ZoomLimits {
      public:
        /// Required element 'tt:Range' of XSD type 'tt:Space1DDescription'
        tt__Space1DDescription *Range;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ZoomLimits
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ZoomLimits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ZoomLimits, default initialized and not managed by a soap context
        virtual tt__ZoomLimits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ZoomLimits); }
      public:
        /// Constructor with initializations
        tt__ZoomLimits() : Range(), soap() { }
        virtual ~tt__ZoomLimits() { }
        /// Friend allocator used by soap_new_tt__ZoomLimits(struct soap*, int)
        friend SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1386 */
#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (465)
/* complex XSD type 'tt:PTZSpaces': */
class SOAP_CMAC tt__PTZSpaces {
      public:
        /// Optional element 'tt:AbsolutePanTiltPositionSpace' of XSD type 'tt:Space2DDescription'
        std::vector<tt__Space2DDescription *> AbsolutePanTiltPositionSpace;
        /// Optional element 'tt:AbsoluteZoomPositionSpace' of XSD type 'tt:Space1DDescription'
        std::vector<tt__Space1DDescription *> AbsoluteZoomPositionSpace;
        /// Optional element 'tt:RelativePanTiltTranslationSpace' of XSD type 'tt:Space2DDescription'
        std::vector<tt__Space2DDescription *> RelativePanTiltTranslationSpace;
        /// Optional element 'tt:RelativeZoomTranslationSpace' of XSD type 'tt:Space1DDescription'
        std::vector<tt__Space1DDescription *> RelativeZoomTranslationSpace;
        /// Optional element 'tt:ContinuousPanTiltVelocitySpace' of XSD type 'tt:Space2DDescription'
        std::vector<tt__Space2DDescription *> ContinuousPanTiltVelocitySpace;
        /// Optional element 'tt:ContinuousZoomVelocitySpace' of XSD type 'tt:Space1DDescription'
        std::vector<tt__Space1DDescription *> ContinuousZoomVelocitySpace;
        /// Optional element 'tt:PanTiltSpeedSpace' of XSD type 'tt:Space1DDescription'
        std::vector<tt__Space1DDescription *> PanTiltSpeedSpace;
        /// Optional element 'tt:ZoomSpeedSpace' of XSD type 'tt:Space1DDescription'
        std::vector<tt__Space1DDescription *> ZoomSpeedSpace;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZSpacesExtension'
        tt__PTZSpacesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpaces
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpaces, default initialized and not managed by a soap context
        virtual tt__PTZSpaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpaces); }
      public:
        /// Constructor with initializations
        tt__PTZSpaces() : AbsolutePanTiltPositionSpace(), AbsoluteZoomPositionSpace(), RelativePanTiltTranslationSpace(), RelativeZoomTranslationSpace(), ContinuousPanTiltVelocitySpace(), ContinuousZoomVelocitySpace(), PanTiltSpeedSpace(), ZoomSpeedSpace(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZSpaces() { }
        /// Friend allocator used by soap_new_tt__PTZSpaces(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1389 */
#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (466)
/* complex XSD type 'tt:PTZSpacesExtension': */
class SOAP_CMAC tt__PTZSpacesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpacesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpacesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpacesExtension, default initialized and not managed by a soap context
        virtual tt__PTZSpacesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpacesExtension); }
      public:
        /// Constructor with initializations
        tt__PTZSpacesExtension() : __any(), soap() { }
        virtual ~tt__PTZSpacesExtension() { }
        /// Friend allocator used by soap_new_tt__PTZSpacesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1392 */
#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (467)
/* complex XSD type 'tt:Space2DDescription': */
class SOAP_CMAC tt__Space2DDescription {
      public:
        /// Required element 'tt:URI' of XSD type 'xsd:anyURI'
        std::string URI;
        /// Required element 'tt:XRange' of XSD type 'tt:FloatRange'
        tt__FloatRange *XRange;
        /// Required element 'tt:YRange' of XSD type 'tt:FloatRange'
        tt__FloatRange *YRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Space2DDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Space2DDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Space2DDescription, default initialized and not managed by a soap context
        virtual tt__Space2DDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Space2DDescription); }
      public:
        /// Constructor with initializations
        tt__Space2DDescription() : URI(), XRange(), YRange(), soap() { }
        virtual ~tt__Space2DDescription() { }
        /// Friend allocator used by soap_new_tt__Space2DDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1395 */
#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (468)
/* complex XSD type 'tt:Space1DDescription': */
class SOAP_CMAC tt__Space1DDescription {
      public:
        /// Required element 'tt:URI' of XSD type 'xsd:anyURI'
        std::string URI;
        /// Required element 'tt:XRange' of XSD type 'tt:FloatRange'
        tt__FloatRange *XRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Space1DDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Space1DDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Space1DDescription, default initialized and not managed by a soap context
        virtual tt__Space1DDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Space1DDescription); }
      public:
        /// Constructor with initializations
        tt__Space1DDescription() : URI(), XRange(), soap() { }
        virtual ~tt__Space1DDescription() { }
        /// Friend allocator used by soap_new_tt__Space1DDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1398 */
#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (469)
/* complex XSD type 'tt:PTZSpeed': */
class SOAP_CMAC tt__PTZSpeed {
      public:
        /// Optional element 'tt:PanTilt' of XSD type 'tt:Vector2D'
        tt__Vector2D *PanTilt;
        /// Optional element 'tt:Zoom' of XSD type 'tt:Vector1D'
        tt__Vector1D *Zoom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpeed
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpeed; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpeed, default initialized and not managed by a soap context
        virtual tt__PTZSpeed *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpeed); }
      public:
        /// Constructor with initializations
        tt__PTZSpeed() : PanTilt(), Zoom(), soap() { }
        virtual ~tt__PTZSpeed() { }
        /// Friend allocator used by soap_new_tt__PTZSpeed(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1401 */
#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (470)
/* complex XSD type 'tt:PTZPreset': */
class SOAP_CMAC tt__PTZPreset {
      public:
        /// Optional element 'tt:Name' of XSD type 'tt:Name'
        std::string *Name;
        /// Optional element 'tt:PTZPosition' of XSD type 'tt:PTZVector'
        tt__PTZVector *PTZPosition;
        /// optional attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string *token;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPreset
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPreset, default initialized and not managed by a soap context
        virtual tt__PTZPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPreset); }
      public:
        /// Constructor with initializations
        tt__PTZPreset() : Name(), PTZPosition(), token(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPreset() { }
        /// Friend allocator used by soap_new_tt__PTZPreset(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1404 */
#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (471)
/* complex XSD type 'tt:PresetTour': */
class SOAP_CMAC tt__PresetTour {
      public:
        /// Optional element 'tt:Name' of XSD type 'tt:Name'
        std::string *Name;
        /// Required element 'tt:Status' of XSD type 'tt:PTZPresetTourStatus'
        tt__PTZPresetTourStatus *Status;
        /// Required element 'tt:AutoStart' of XSD type 'xsd:boolean'
        bool AutoStart;
        /// Required element 'tt:StartingCondition' of XSD type 'tt:PTZPresetTourStartingCondition'
        tt__PTZPresetTourStartingCondition *StartingCondition;
        /// Optional element 'tt:TourSpot' of XSD type 'tt:PTZPresetTourSpot'
        std::vector<tt__PTZPresetTourSpot *> TourSpot;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourExtension'
        tt__PTZPresetTourExtension *Extension;
        /// optional attribute 'token' of XSD type 'tt:ReferenceToken'
        std::string *token;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PresetTour
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PresetTour, default initialized and not managed by a soap context
        virtual tt__PresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PresetTour); }
      public:
        /// Constructor with initializations
        tt__PresetTour() : Name(), Status(), AutoStart(), StartingCondition(), TourSpot(), Extension(), token(), __anyAttribute(), soap() { }
        virtual ~tt__PresetTour() { }
        /// Friend allocator used by soap_new_tt__PresetTour(struct soap*, int)
        friend SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1407 */
#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (472)
/* complex XSD type 'tt:PTZPresetTourExtension': */
class SOAP_CMAC tt__PTZPresetTourExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1410 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (473)
/* complex XSD type 'tt:PTZPresetTourSpot': */
class SOAP_CMAC tt__PTZPresetTourSpot {
      public:
        /// Required element 'tt:PresetDetail' of XSD type 'tt:PTZPresetTourPresetDetail'
        tt__PTZPresetTourPresetDetail *PresetDetail;
        /// Optional element 'tt:Speed' of XSD type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Optional element 'tt:StayTime' of XSD type 'xsd:duration'
        LONG64 *StayTime;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourSpotExtension'
        tt__PTZPresetTourSpotExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpot
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpot, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpot); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourSpot() : PresetDetail(), Speed(), StayTime(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourSpot() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpot(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1413 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (474)
/* complex XSD type 'tt:PTZPresetTourSpotExtension': */
class SOAP_CMAC tt__PTZPresetTourSpotExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpotExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpotExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpotExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpotExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpotExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourSpotExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourSpotExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpotExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14530 */
#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1115)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _tt__union_PTZPresetTourPresetDetail
{
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)	/**< union variant selector value for member PresetToken */
        std::string *PresetToken;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)	/**< union variant selector value for member Home */
        bool Home;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)	/**< union variant selector value for member PTZPosition */
        tt__PTZVector *PTZPosition;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)	/**< union variant selector value for member TypeExtension */
        tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

/* onvif.h:1416 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (475)
/* complex XSD type 'tt:PTZPresetTourPresetDetail': */
class SOAP_CMAC tt__PTZPresetTourPresetDetail {
      public:
        /// Union with union _tt__union_PTZPresetTourPresetDetail variant selector __union_PTZPresetTourPresetDetail set to one of: SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension
        int __union_PTZPresetTourPresetDetail;
        union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetail
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetail; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetail, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetail *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetail); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourPresetDetail() : __union_PTZPresetTourPresetDetail(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourPresetDetail() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetail(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1419 */
#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (476)
/* complex XSD type 'tt:PTZPresetTourTypeExtension': */
class SOAP_CMAC tt__PTZPresetTourTypeExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourTypeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourTypeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourTypeExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourTypeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourTypeExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourTypeExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourTypeExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourTypeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1422 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (477)
/* complex XSD type 'tt:PTZPresetTourStatus': */
class SOAP_CMAC tt__PTZPresetTourStatus {
      public:
        /// Required element 'tt:State' of XSD type 'tt:PTZPresetTourState'
        tt__PTZPresetTourState State;
        /// Optional element 'tt:CurrentTourSpot' of XSD type 'tt:PTZPresetTourSpot'
        tt__PTZPresetTourSpot *CurrentTourSpot;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourStatusExtension'
        tt__PTZPresetTourStatusExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStatus, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStatus); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStatus() : State(), CurrentTourSpot(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourStatus() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1425 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (478)
/* complex XSD type 'tt:PTZPresetTourStatusExtension': */
class SOAP_CMAC tt__PTZPresetTourStatusExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStatusExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStatusExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStatusExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStatusExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStatusExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStatusExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourStatusExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStatusExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1428 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (479)
/* complex XSD type 'tt:PTZPresetTourStartingCondition': */
class SOAP_CMAC tt__PTZPresetTourStartingCondition {
      public:
        /// Optional element 'tt:RecurringTime' of XSD type 'xsd:int'
        int *RecurringTime;
        /// Optional element 'tt:RecurringDuration' of XSD type 'xsd:duration'
        LONG64 *RecurringDuration;
        /// Optional element 'tt:Direction' of XSD type 'tt:PTZPresetTourDirection'
        tt__PTZPresetTourDirection *Direction;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourStartingConditionExtension'
        tt__PTZPresetTourStartingConditionExtension *Extension;
        /// optional attribute 'RandomPresetOrder' of XSD type 'xsd:boolean'
        bool *RandomPresetOrder;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingCondition
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingCondition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingCondition, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingCondition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingCondition); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStartingCondition() : RecurringTime(), RecurringDuration(), Direction(), Extension(), RandomPresetOrder(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourStartingCondition() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingCondition(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1431 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (480)
/* complex XSD type 'tt:PTZPresetTourStartingConditionExtension': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStartingConditionExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourStartingConditionExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1434 */
#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (481)
/* complex XSD type 'tt:PTZPresetTourOptions': */
class SOAP_CMAC tt__PTZPresetTourOptions {
      public:
        /// Required element 'tt:AutoStart' of XSD type 'xsd:boolean'
        bool AutoStart;
        /// Required element 'tt:StartingCondition' of XSD type 'tt:PTZPresetTourStartingConditionOptions'
        tt__PTZPresetTourStartingConditionOptions *StartingCondition;
        /// Required element 'tt:TourSpot' of XSD type 'tt:PTZPresetTourSpotOptions'
        tt__PTZPresetTourSpotOptions *TourSpot;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourOptions); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourOptions() : AutoStart(), StartingCondition(), TourSpot(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1437 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (482)
/* complex XSD type 'tt:PTZPresetTourSpotOptions': */
class SOAP_CMAC tt__PTZPresetTourSpotOptions {
      public:
        /// Required element 'tt:PresetDetail' of XSD type 'tt:PTZPresetTourPresetDetailOptions'
        tt__PTZPresetTourPresetDetailOptions *PresetDetail;
        /// Required element 'tt:StayTime' of XSD type 'tt:DurationRange'
        tt__DurationRange *StayTime;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpotOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpotOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpotOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpotOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpotOptions); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourSpotOptions() : PresetDetail(), StayTime(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourSpotOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpotOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1440 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (483)
/* complex XSD type 'tt:PTZPresetTourPresetDetailOptions': */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions {
      public:
        /// Optional element 'tt:PresetToken' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> PresetToken;
        /// Optional element 'tt:Home' of XSD type 'xsd:boolean'
        bool *Home;
        /// Optional element 'tt:PanTiltPositionSpace' of XSD type 'tt:Space2DDescription'
        tt__Space2DDescription *PanTiltPositionSpace;
        /// Optional element 'tt:ZoomPositionSpace' of XSD type 'tt:Space1DDescription'
        tt__Space1DDescription *ZoomPositionSpace;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourPresetDetailOptionsExtension'
        tt__PTZPresetTourPresetDetailOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetailOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetailOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetailOptions); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourPresetDetailOptions() : PresetToken(), Home(), PanTiltPositionSpace(), ZoomPositionSpace(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourPresetDetailOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1443 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (484)
/* complex XSD type 'tt:PTZPresetTourPresetDetailOptionsExtension': */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetailOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetailOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetailOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourPresetDetailOptionsExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1446 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (485)
/* complex XSD type 'tt:PTZPresetTourStartingConditionOptions': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions {
      public:
        /// Optional element 'tt:RecurringTime' of XSD type 'tt:IntRange'
        tt__IntRange *RecurringTime;
        /// Optional element 'tt:RecurringDuration' of XSD type 'tt:DurationRange'
        tt__DurationRange *RecurringDuration;
        /// Optional element 'tt:Direction' of XSD type 'tt:PTZPresetTourDirection'
        std::vector<tt__PTZPresetTourDirection> Direction;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZPresetTourStartingConditionOptionsExtension'
        tt__PTZPresetTourStartingConditionOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionOptions); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStartingConditionOptions() : RecurringTime(), RecurringDuration(), Direction(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPresetTourStartingConditionOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1449 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (486)
/* complex XSD type 'tt:PTZPresetTourStartingConditionOptionsExtension': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__PTZPresetTourStartingConditionOptionsExtension() : __any(), soap() { }
        virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1452 */
#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (487)
/* complex XSD type 'tt:ImagingStatus': */
class SOAP_CMAC tt__ImagingStatus {
      public:
        /// Required element 'tt:FocusStatus' of XSD type 'tt:FocusStatus'
        tt__FocusStatus *FocusStatus;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus, default initialized and not managed by a soap context
        virtual tt__ImagingStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus); }
      public:
        /// Constructor with initializations
        tt__ImagingStatus() : FocusStatus(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingStatus() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1455 */
#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (488)
/* complex XSD type 'tt:FocusStatus': */
class SOAP_CMAC tt__FocusStatus {
      public:
        /// Required element 'tt:Position' of XSD type 'xsd:float'
        float Position;
        /// Required element 'tt:MoveStatus' of XSD type 'tt:MoveStatus'
        tt__MoveStatus MoveStatus;
        /// Required element 'tt:Error' of XSD type 'xsd:string'
        std::string Error;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus, default initialized and not managed by a soap context
        virtual tt__FocusStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus); }
      public:
        /// Constructor with initializations
        tt__FocusStatus() : Position(), MoveStatus(), Error(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FocusStatus() { }
        /// Friend allocator used by soap_new_tt__FocusStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus * SOAP_FMAC2 soap_instantiate_tt__FocusStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1458 */
#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (489)
/* complex XSD type 'tt:FocusConfiguration': */
class SOAP_CMAC tt__FocusConfiguration {
      public:
        /// Required element 'tt:AutoFocusMode' of XSD type 'tt:AutoFocusMode'
        tt__AutoFocusMode AutoFocusMode;
        /// Required element 'tt:DefaultSpeed' of XSD type 'xsd:float'
        float DefaultSpeed;
        /// Required element 'tt:NearLimit' of XSD type 'xsd:float'
        float NearLimit;
        /// Required element 'tt:FarLimit' of XSD type 'xsd:float'
        float FarLimit;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration); }
      public:
        /// Constructor with initializations
        tt__FocusConfiguration() : AutoFocusMode(), DefaultSpeed(), NearLimit(), FarLimit(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FocusConfiguration() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1461 */
#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (490)
/* complex XSD type 'tt:ImagingSettings': */
class SOAP_CMAC tt__ImagingSettings {
      public:
        /// Optional element 'tt:BacklightCompensation' of XSD type 'tt:BacklightCompensation'
        tt__BacklightCompensation *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XSD type 'xsd:float'
        float *Brightness;
        /// Optional element 'tt:ColorSaturation' of XSD type 'xsd:float'
        float *ColorSaturation;
        /// Optional element 'tt:Contrast' of XSD type 'xsd:float'
        float *Contrast;
        /// Optional element 'tt:Exposure' of XSD type 'tt:Exposure'
        tt__Exposure *Exposure;
        /// Optional element 'tt:Focus' of XSD type 'tt:FocusConfiguration'
        tt__FocusConfiguration *Focus;
        /// Optional element 'tt:IrCutFilter' of XSD type 'tt:IrCutFilterMode'
        tt__IrCutFilterMode *IrCutFilter;
        /// Optional element 'tt:Sharpness' of XSD type 'xsd:float'
        float *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XSD type 'tt:WideDynamicRange'
        tt__WideDynamicRange *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XSD type 'tt:WhiteBalance'
        tt__WhiteBalance *WhiteBalance;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingSettingsExtension'
        tt__ImagingSettingsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettings
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettings, default initialized and not managed by a soap context
        virtual tt__ImagingSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettings); }
      public:
        /// Constructor with initializations
        tt__ImagingSettings() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilter(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingSettings() { }
        /// Friend allocator used by soap_new_tt__ImagingSettings(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettings * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1464 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (491)
/* complex XSD type 'tt:ImagingSettingsExtension': */
class SOAP_CMAC tt__ImagingSettingsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension); }
      public:
        /// Constructor with initializations
        tt__ImagingSettingsExtension() : __any(), soap() { }
        virtual ~tt__ImagingSettingsExtension() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1467 */
#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (492)
/* complex XSD type 'tt:Exposure': */
class SOAP_CMAC tt__Exposure {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ExposureMode'
        tt__ExposureMode Mode;
        /// Required element 'tt:Priority' of XSD type 'tt:ExposurePriority'
        tt__ExposurePriority Priority;
        /// Required element 'tt:Window' of XSD type 'tt:Rectangle'
        tt__Rectangle *Window;
        /// Required element 'tt:MinExposureTime' of XSD type 'xsd:float'
        float MinExposureTime;
        /// Required element 'tt:MaxExposureTime' of XSD type 'xsd:float'
        float MaxExposureTime;
        /// Required element 'tt:MinGain' of XSD type 'xsd:float'
        float MinGain;
        /// Required element 'tt:MaxGain' of XSD type 'xsd:float'
        float MaxGain;
        /// Required element 'tt:MinIris' of XSD type 'xsd:float'
        float MinIris;
        /// Required element 'tt:MaxIris' of XSD type 'xsd:float'
        float MaxIris;
        /// Required element 'tt:ExposureTime' of XSD type 'xsd:float'
        float ExposureTime;
        /// Required element 'tt:Gain' of XSD type 'xsd:float'
        float Gain;
        /// Required element 'tt:Iris' of XSD type 'xsd:float'
        float Iris;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Exposure
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Exposure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Exposure, default initialized and not managed by a soap context
        virtual tt__Exposure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Exposure); }
      public:
        /// Constructor with initializations
        tt__Exposure() : Mode(), Priority(), Window(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris(), soap() { }
        virtual ~tt__Exposure() { }
        /// Friend allocator used by soap_new_tt__Exposure(struct soap*, int)
        friend SOAP_FMAC1 tt__Exposure * SOAP_FMAC2 soap_instantiate_tt__Exposure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1470 */
#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (493)
/* complex XSD type 'tt:WideDynamicRange': */
class SOAP_CMAC tt__WideDynamicRange {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WideDynamicMode'
        tt__WideDynamicMode Mode;
        /// Required element 'tt:Level' of XSD type 'xsd:float'
        float Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRange, default initialized and not managed by a soap context
        virtual tt__WideDynamicRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRange); }
      public:
        /// Constructor with initializations
        tt__WideDynamicRange() : Mode(), Level(), soap() { }
        virtual ~tt__WideDynamicRange() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRange(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRange * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1473 */
#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (494)
/* complex XSD type 'tt:BacklightCompensation': */
class SOAP_CMAC tt__BacklightCompensation {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:BacklightCompensationMode'
        tt__BacklightCompensationMode Mode;
        /// Required element 'tt:Level' of XSD type 'xsd:float'
        float Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensation, default initialized and not managed by a soap context
        virtual tt__BacklightCompensation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensation); }
      public:
        /// Constructor with initializations
        tt__BacklightCompensation() : Mode(), Level(), soap() { }
        virtual ~tt__BacklightCompensation() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensation(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensation * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1476 */
#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (495)
/* complex XSD type 'tt:ImagingOptions': */
class SOAP_CMAC tt__ImagingOptions {
      public:
        /// Required element 'tt:BacklightCompensation' of XSD type 'tt:BacklightCompensationOptions'
        tt__BacklightCompensationOptions *BacklightCompensation;
        /// Required element 'tt:Brightness' of XSD type 'tt:FloatRange'
        tt__FloatRange *Brightness;
        /// Required element 'tt:ColorSaturation' of XSD type 'tt:FloatRange'
        tt__FloatRange *ColorSaturation;
        /// Required element 'tt:Contrast' of XSD type 'tt:FloatRange'
        tt__FloatRange *Contrast;
        /// Required element 'tt:Exposure' of XSD type 'tt:ExposureOptions'
        tt__ExposureOptions *Exposure;
        /// Required element 'tt:Focus' of XSD type 'tt:FocusOptions'
        tt__FocusOptions *Focus;
        /// Required element 'tt:IrCutFilterModes' of XSD type 'tt:IrCutFilterMode'
        std::vector<tt__IrCutFilterMode> IrCutFilterModes;
        /// Required element 'tt:Sharpness' of XSD type 'tt:FloatRange'
        tt__FloatRange *Sharpness;
        /// Required element 'tt:WideDynamicRange' of XSD type 'tt:WideDynamicRangeOptions'
        tt__WideDynamicRangeOptions *WideDynamicRange;
        /// Required element 'tt:WhiteBalance' of XSD type 'tt:WhiteBalanceOptions'
        tt__WhiteBalanceOptions *WhiteBalance;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions, default initialized and not managed by a soap context
        virtual tt__ImagingOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilterModes(), Sharpness(), WideDynamicRange(), WhiteBalance(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingOptions() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1479 */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (496)
/* complex XSD type 'tt:WideDynamicRangeOptions': */
class SOAP_CMAC tt__WideDynamicRangeOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WideDynamicMode'
        std::vector<tt__WideDynamicMode> Mode;
        /// Required element 'tt:Level' of XSD type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRangeOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRangeOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRangeOptions, default initialized and not managed by a soap context
        virtual tt__WideDynamicRangeOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRangeOptions); }
      public:
        /// Constructor with initializations
        tt__WideDynamicRangeOptions() : Mode(), Level(), soap() { }
        virtual ~tt__WideDynamicRangeOptions() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRangeOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRangeOptions * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1482 */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (497)
/* complex XSD type 'tt:BacklightCompensationOptions': */
class SOAP_CMAC tt__BacklightCompensationOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WideDynamicMode'
        std::vector<tt__WideDynamicMode> Mode;
        /// Required element 'tt:Level' of XSD type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensationOptions, default initialized and not managed by a soap context
        virtual tt__BacklightCompensationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensationOptions); }
      public:
        /// Constructor with initializations
        tt__BacklightCompensationOptions() : Mode(), Level(), soap() { }
        virtual ~tt__BacklightCompensationOptions() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1485 */
#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (498)
/* complex XSD type 'tt:FocusOptions': */
class SOAP_CMAC tt__FocusOptions {
      public:
        /// Optional element 'tt:AutoFocusModes' of XSD type 'tt:AutoFocusMode'
        std::vector<tt__AutoFocusMode> AutoFocusModes;
        /// Required element 'tt:DefaultSpeed' of XSD type 'tt:FloatRange'
        tt__FloatRange *DefaultSpeed;
        /// Required element 'tt:NearLimit' of XSD type 'tt:FloatRange'
        tt__FloatRange *NearLimit;
        /// Required element 'tt:FarLimit' of XSD type 'tt:FloatRange'
        tt__FloatRange *FarLimit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions, default initialized and not managed by a soap context
        virtual tt__FocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions); }
      public:
        /// Constructor with initializations
        tt__FocusOptions() : AutoFocusModes(), DefaultSpeed(), NearLimit(), FarLimit(), soap() { }
        virtual ~tt__FocusOptions() { }
        /// Friend allocator used by soap_new_tt__FocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions * SOAP_FMAC2 soap_instantiate_tt__FocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1488 */
#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (499)
/* complex XSD type 'tt:ExposureOptions': */
class SOAP_CMAC tt__ExposureOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ExposureMode'
        std::vector<tt__ExposureMode> Mode;
        /// Required element 'tt:Priority' of XSD type 'tt:ExposurePriority'
        std::vector<tt__ExposurePriority> Priority;
        /// Required element 'tt:MinExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinExposureTime;
        /// Required element 'tt:MaxExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxExposureTime;
        /// Required element 'tt:MinGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinGain;
        /// Required element 'tt:MaxGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxGain;
        /// Required element 'tt:MinIris' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinIris;
        /// Required element 'tt:MaxIris' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxIris;
        /// Required element 'tt:ExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *ExposureTime;
        /// Required element 'tt:Gain' of XSD type 'tt:FloatRange'
        tt__FloatRange *Gain;
        /// Required element 'tt:Iris' of XSD type 'tt:FloatRange'
        tt__FloatRange *Iris;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposureOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposureOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposureOptions, default initialized and not managed by a soap context
        virtual tt__ExposureOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposureOptions); }
      public:
        /// Constructor with initializations
        tt__ExposureOptions() : Mode(), Priority(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris(), soap() { }
        virtual ~tt__ExposureOptions() { }
        /// Friend allocator used by soap_new_tt__ExposureOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposureOptions * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1491 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (500)
/* complex XSD type 'tt:WhiteBalanceOptions': */
class SOAP_CMAC tt__WhiteBalanceOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WhiteBalanceMode'
        std::vector<tt__WhiteBalanceMode> Mode;
        /// Required element 'tt:YrGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *YrGain;
        /// Required element 'tt:YbGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *YbGain;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions); }
      public:
        /// Constructor with initializations
        tt__WhiteBalanceOptions() : Mode(), YrGain(), YbGain(), soap() { }
        virtual ~tt__WhiteBalanceOptions() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1494 */
#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (501)
/* complex XSD type 'tt:FocusMove': */
class SOAP_CMAC tt__FocusMove {
      public:
        /// Optional element 'tt:Absolute' of XSD type 'tt:AbsoluteFocus'
        tt__AbsoluteFocus *Absolute;
        /// Optional element 'tt:Relative' of XSD type 'tt:RelativeFocus'
        tt__RelativeFocus *Relative;
        /// Optional element 'tt:Continuous' of XSD type 'tt:ContinuousFocus'
        tt__ContinuousFocus *Continuous;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusMove
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusMove, default initialized and not managed by a soap context
        virtual tt__FocusMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusMove); }
      public:
        /// Constructor with initializations
        tt__FocusMove() : Absolute(), Relative(), Continuous(), soap() { }
        virtual ~tt__FocusMove() { }
        /// Friend allocator used by soap_new_tt__FocusMove(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusMove * SOAP_FMAC2 soap_instantiate_tt__FocusMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1497 */
#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (502)
/* complex XSD type 'tt:AbsoluteFocus': */
class SOAP_CMAC tt__AbsoluteFocus {
      public:
        /// Required element 'tt:Position' of XSD type 'xsd:float'
        float Position;
        /// Optional element 'tt:Speed' of XSD type 'xsd:float'
        float *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AbsoluteFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AbsoluteFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AbsoluteFocus, default initialized and not managed by a soap context
        virtual tt__AbsoluteFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AbsoluteFocus); }
      public:
        /// Constructor with initializations
        tt__AbsoluteFocus() : Position(), Speed(), soap() { }
        virtual ~tt__AbsoluteFocus() { }
        /// Friend allocator used by soap_new_tt__AbsoluteFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__AbsoluteFocus * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1500 */
#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (503)
/* complex XSD type 'tt:RelativeFocus': */
class SOAP_CMAC tt__RelativeFocus {
      public:
        /// Required element 'tt:Distance' of XSD type 'xsd:float'
        float Distance;
        /// Optional element 'tt:Speed' of XSD type 'xsd:float'
        float *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocus, default initialized and not managed by a soap context
        virtual tt__RelativeFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocus); }
      public:
        /// Constructor with initializations
        tt__RelativeFocus() : Distance(), Speed(), soap() { }
        virtual ~tt__RelativeFocus() { }
        /// Friend allocator used by soap_new_tt__RelativeFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocus * SOAP_FMAC2 soap_instantiate_tt__RelativeFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1503 */
#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (504)
/* complex XSD type 'tt:ContinuousFocus': */
class SOAP_CMAC tt__ContinuousFocus {
      public:
        /// Required element 'tt:Speed' of XSD type 'xsd:float'
        float Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ContinuousFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ContinuousFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ContinuousFocus, default initialized and not managed by a soap context
        virtual tt__ContinuousFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ContinuousFocus); }
      public:
        /// Constructor with initializations
        tt__ContinuousFocus() : Speed(), soap() { }
        virtual ~tt__ContinuousFocus() { }
        /// Friend allocator used by soap_new_tt__ContinuousFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__ContinuousFocus * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1506 */
#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (505)
/* complex XSD type 'tt:MoveOptions': */
class SOAP_CMAC tt__MoveOptions {
      public:
        /// Optional element 'tt:Absolute' of XSD type 'tt:AbsoluteFocusOptions'
        tt__AbsoluteFocusOptions *Absolute;
        /// Optional element 'tt:Relative' of XSD type 'tt:RelativeFocusOptions'
        tt__RelativeFocusOptions *Relative;
        /// Optional element 'tt:Continuous' of XSD type 'tt:ContinuousFocusOptions'
        tt__ContinuousFocusOptions *Continuous;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveOptions, default initialized and not managed by a soap context
        virtual tt__MoveOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveOptions); }
      public:
        /// Constructor with initializations
        tt__MoveOptions() : Absolute(), Relative(), Continuous(), soap() { }
        virtual ~tt__MoveOptions() { }
        /// Friend allocator used by soap_new_tt__MoveOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveOptions * SOAP_FMAC2 soap_instantiate_tt__MoveOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1509 */
#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (506)
/* complex XSD type 'tt:AbsoluteFocusOptions': */
class SOAP_CMAC tt__AbsoluteFocusOptions {
      public:
        /// Required element 'tt:Position' of XSD type 'tt:FloatRange'
        tt__FloatRange *Position;
        /// Optional element 'tt:Speed' of XSD type 'tt:FloatRange'
        tt__FloatRange *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AbsoluteFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AbsoluteFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AbsoluteFocusOptions, default initialized and not managed by a soap context
        virtual tt__AbsoluteFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AbsoluteFocusOptions); }
      public:
        /// Constructor with initializations
        tt__AbsoluteFocusOptions() : Position(), Speed(), soap() { }
        virtual ~tt__AbsoluteFocusOptions() { }
        /// Friend allocator used by soap_new_tt__AbsoluteFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AbsoluteFocusOptions * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1512 */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (507)
/* complex XSD type 'tt:RelativeFocusOptions': */
class SOAP_CMAC tt__RelativeFocusOptions {
      public:
        /// Required element 'tt:Distance' of XSD type 'tt:FloatRange'
        tt__FloatRange *Distance;
        /// Required element 'tt:Speed' of XSD type 'tt:FloatRange'
        tt__FloatRange *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocusOptions, default initialized and not managed by a soap context
        virtual tt__RelativeFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocusOptions); }
      public:
        /// Constructor with initializations
        tt__RelativeFocusOptions() : Distance(), Speed(), soap() { }
        virtual ~tt__RelativeFocusOptions() { }
        /// Friend allocator used by soap_new_tt__RelativeFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocusOptions * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1515 */
#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (508)
/* complex XSD type 'tt:ContinuousFocusOptions': */
class SOAP_CMAC tt__ContinuousFocusOptions {
      public:
        /// Required element 'tt:Speed' of XSD type 'tt:FloatRange'
        tt__FloatRange *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ContinuousFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ContinuousFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ContinuousFocusOptions, default initialized and not managed by a soap context
        virtual tt__ContinuousFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ContinuousFocusOptions); }
      public:
        /// Constructor with initializations
        tt__ContinuousFocusOptions() : Speed(), soap() { }
        virtual ~tt__ContinuousFocusOptions() { }
        /// Friend allocator used by soap_new_tt__ContinuousFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ContinuousFocusOptions * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1518 */
#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (509)
/* complex XSD type 'tt:WhiteBalance': */
class SOAP_CMAC tt__WhiteBalance {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WhiteBalanceMode'
        tt__WhiteBalanceMode Mode;
        /// Required element 'tt:CrGain' of XSD type 'xsd:float'
        float CrGain;
        /// Required element 'tt:CbGain' of XSD type 'xsd:float'
        float CbGain;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance, default initialized and not managed by a soap context
        virtual tt__WhiteBalance *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance); }
      public:
        /// Constructor with initializations
        tt__WhiteBalance() : Mode(), CrGain(), CbGain(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__WhiteBalance() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1521 */
#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (510)
/* complex XSD type 'tt:ImagingStatus20': */
class SOAP_CMAC tt__ImagingStatus20 {
      public:
        /// Optional element 'tt:FocusStatus20' of XSD type 'tt:FocusStatus20'
        tt__FocusStatus20 *FocusStatus20;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingStatus20Extension'
        tt__ImagingStatus20Extension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus20, default initialized and not managed by a soap context
        virtual tt__ImagingStatus20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus20); }
      public:
        /// Constructor with initializations
        tt__ImagingStatus20() : FocusStatus20(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingStatus20() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus20 * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1524 */
#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (511)
/* complex XSD type 'tt:ImagingStatus20Extension': */
class SOAP_CMAC tt__ImagingStatus20Extension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus20Extension, default initialized and not managed by a soap context
        virtual tt__ImagingStatus20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus20Extension); }
      public:
        /// Constructor with initializations
        tt__ImagingStatus20Extension() : __any(), soap() { }
        virtual ~tt__ImagingStatus20Extension() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1527 */
#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (512)
/* complex XSD type 'tt:FocusStatus20': */
class SOAP_CMAC tt__FocusStatus20 {
      public:
        /// Required element 'tt:Position' of XSD type 'xsd:float'
        float Position;
        /// Required element 'tt:MoveStatus' of XSD type 'tt:MoveStatus'
        tt__MoveStatus MoveStatus;
        /// Optional element 'tt:Error' of XSD type 'xsd:string'
        std::string *Error;
        /// Optional element 'tt:Extension' of XSD type 'tt:FocusStatus20Extension'
        tt__FocusStatus20Extension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus20, default initialized and not managed by a soap context
        virtual tt__FocusStatus20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus20); }
      public:
        /// Constructor with initializations
        tt__FocusStatus20() : Position(), MoveStatus(), Error(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__FocusStatus20() { }
        /// Friend allocator used by soap_new_tt__FocusStatus20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus20 * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1530 */
#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (513)
/* complex XSD type 'tt:FocusStatus20Extension': */
class SOAP_CMAC tt__FocusStatus20Extension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus20Extension, default initialized and not managed by a soap context
        virtual tt__FocusStatus20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus20Extension); }
      public:
        /// Constructor with initializations
        tt__FocusStatus20Extension() : __any(), soap() { }
        virtual ~tt__FocusStatus20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusStatus20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1533 */
#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (514)
/* complex XSD type 'tt:ImagingSettings20': */
class SOAP_CMAC tt__ImagingSettings20 {
      public:
        /// Optional element 'tt:BacklightCompensation' of XSD type 'tt:BacklightCompensation20'
        tt__BacklightCompensation20 *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XSD type 'xsd:float'
        float *Brightness;
        /// Optional element 'tt:ColorSaturation' of XSD type 'xsd:float'
        float *ColorSaturation;
        /// Optional element 'tt:Contrast' of XSD type 'xsd:float'
        float *Contrast;
        /// Optional element 'tt:Exposure' of XSD type 'tt:Exposure20'
        tt__Exposure20 *Exposure;
        /// Optional element 'tt:Focus' of XSD type 'tt:FocusConfiguration20'
        tt__FocusConfiguration20 *Focus;
        /// Optional element 'tt:IrCutFilter' of XSD type 'tt:IrCutFilterMode'
        tt__IrCutFilterMode *IrCutFilter;
        /// Optional element 'tt:Sharpness' of XSD type 'xsd:float'
        float *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XSD type 'tt:WideDynamicRange20'
        tt__WideDynamicRange20 *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XSD type 'tt:WhiteBalance20'
        tt__WhiteBalance20 *WhiteBalance;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingSettingsExtension20'
        tt__ImagingSettingsExtension20 *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettings20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettings20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettings20, default initialized and not managed by a soap context
        virtual tt__ImagingSettings20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettings20); }
      public:
        /// Constructor with initializations
        tt__ImagingSettings20() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilter(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingSettings20() { }
        /// Friend allocator used by soap_new_tt__ImagingSettings20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1536 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (515)
/* complex XSD type 'tt:ImagingSettingsExtension20': */
class SOAP_CMAC tt__ImagingSettingsExtension20 {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:ImageStabilization' of XSD type 'tt:ImageStabilization'
        tt__ImageStabilization *ImageStabilization;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingSettingsExtension202'
        tt__ImagingSettingsExtension202 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension20, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension20); }
      public:
        /// Constructor with initializations
        tt__ImagingSettingsExtension20() : __any(), ImageStabilization(), Extension(), soap() { }
        virtual ~tt__ImagingSettingsExtension20() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1539 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (516)
/* complex XSD type 'tt:ImagingSettingsExtension202': */
class SOAP_CMAC tt__ImagingSettingsExtension202 {
      public:
        /// Optional element 'tt:IrCutFilterAutoAdjustment' of XSD type 'tt:IrCutFilterAutoAdjustment'
        std::vector<tt__IrCutFilterAutoAdjustment *> IrCutFilterAutoAdjustment;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingSettingsExtension203'
        tt__ImagingSettingsExtension203 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension202
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension202; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension202, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension202 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension202); }
      public:
        /// Constructor with initializations
        tt__ImagingSettingsExtension202() : IrCutFilterAutoAdjustment(), Extension(), soap() { }
        virtual ~tt__ImagingSettingsExtension202() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension202(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1542 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (517)
/* complex XSD type 'tt:ImagingSettingsExtension203': */
class SOAP_CMAC tt__ImagingSettingsExtension203 {
      public:
        /// Optional element 'tt:ToneCompensation' of XSD type 'tt:ToneCompensation'
        tt__ToneCompensation *ToneCompensation;
        /// Optional element 'tt:Defogging' of XSD type 'tt:Defogging'
        tt__Defogging *Defogging;
        /// Optional element 'tt:NoiseReduction' of XSD type 'tt:NoiseReduction'
        tt__NoiseReduction *NoiseReduction;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingSettingsExtension204'
        tt__ImagingSettingsExtension204 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension203
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension203; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension203, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension203 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension203); }
      public:
        /// Constructor with initializations
        tt__ImagingSettingsExtension203() : ToneCompensation(), Defogging(), NoiseReduction(), Extension(), soap() { }
        virtual ~tt__ImagingSettingsExtension203() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension203(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1545 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (518)
/* complex XSD type 'tt:ImagingSettingsExtension204': */
class SOAP_CMAC tt__ImagingSettingsExtension204 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension204
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension204; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension204, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension204 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension204); }
      public:
        /// Constructor with initializations
        tt__ImagingSettingsExtension204() : __any(), soap() { }
        virtual ~tt__ImagingSettingsExtension204() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension204(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1548 */
#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (519)
/* complex XSD type 'tt:ImageStabilization': */
class SOAP_CMAC tt__ImageStabilization {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ImageStabilizationMode'
        tt__ImageStabilizationMode Mode;
        /// Optional element 'tt:Level' of XSD type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImageStabilizationExtension'
        tt__ImageStabilizationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilization
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilization; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilization, default initialized and not managed by a soap context
        virtual tt__ImageStabilization *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilization); }
      public:
        /// Constructor with initializations
        tt__ImageStabilization() : Mode(), Level(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImageStabilization() { }
        /// Friend allocator used by soap_new_tt__ImageStabilization(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilization * SOAP_FMAC2 soap_instantiate_tt__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1551 */
#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (520)
/* complex XSD type 'tt:ImageStabilizationExtension': */
class SOAP_CMAC tt__ImageStabilizationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationExtension, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationExtension); }
      public:
        /// Constructor with initializations
        tt__ImageStabilizationExtension() : __any(), soap() { }
        virtual ~tt__ImageStabilizationExtension() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1554 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (521)
/* complex XSD type 'tt:IrCutFilterAutoAdjustment': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustment {
      public:
        /// Required element 'tt:BoundaryType' of XSD type 'xsd:string'
        std::string BoundaryType;
        /// Optional element 'tt:BoundaryOffset' of XSD type 'xsd:float'
        float *BoundaryOffset;
        /// Optional element 'tt:ResponseTime' of XSD type 'xsd:duration'
        LONG64 *ResponseTime;
        /// Optional element 'tt:Extension' of XSD type 'tt:IrCutFilterAutoAdjustmentExtension'
        tt__IrCutFilterAutoAdjustmentExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustment
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustment, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustment); }
      public:
        /// Constructor with initializations
        tt__IrCutFilterAutoAdjustment() : BoundaryType(), BoundaryOffset(), ResponseTime(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IrCutFilterAutoAdjustment() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustment(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1557 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (522)
/* complex XSD type 'tt:IrCutFilterAutoAdjustmentExtension': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentExtension, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentExtension); }
      public:
        /// Constructor with initializations
        tt__IrCutFilterAutoAdjustmentExtension() : __any(), soap() { }
        virtual ~tt__IrCutFilterAutoAdjustmentExtension() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1560 */
#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (523)
/* complex XSD type 'tt:WideDynamicRange20': */
class SOAP_CMAC tt__WideDynamicRange20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WideDynamicMode'
        tt__WideDynamicMode Mode;
        /// Optional element 'tt:Level' of XSD type 'xsd:float'
        float *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRange20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRange20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRange20, default initialized and not managed by a soap context
        virtual tt__WideDynamicRange20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRange20); }
      public:
        /// Constructor with initializations
        tt__WideDynamicRange20() : Mode(), Level(), soap() { }
        virtual ~tt__WideDynamicRange20() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRange20(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1563 */
#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (524)
/* complex XSD type 'tt:BacklightCompensation20': */
class SOAP_CMAC tt__BacklightCompensation20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:BacklightCompensationMode'
        tt__BacklightCompensationMode Mode;
        /// Optional element 'tt:Level' of XSD type 'xsd:float'
        float *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensation20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensation20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensation20, default initialized and not managed by a soap context
        virtual tt__BacklightCompensation20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensation20); }
      public:
        /// Constructor with initializations
        tt__BacklightCompensation20() : Mode(), Level(), soap() { }
        virtual ~tt__BacklightCompensation20() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensation20(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1566 */
#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (525)
/* complex XSD type 'tt:Exposure20': */
class SOAP_CMAC tt__Exposure20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ExposureMode'
        tt__ExposureMode Mode;
        /// Optional element 'tt:Priority' of XSD type 'tt:ExposurePriority'
        tt__ExposurePriority *Priority;
        /// Optional element 'tt:Window' of XSD type 'tt:Rectangle'
        tt__Rectangle *Window;
        /// Optional element 'tt:MinExposureTime' of XSD type 'xsd:float'
        float *MinExposureTime;
        /// Optional element 'tt:MaxExposureTime' of XSD type 'xsd:float'
        float *MaxExposureTime;
        /// Optional element 'tt:MinGain' of XSD type 'xsd:float'
        float *MinGain;
        /// Optional element 'tt:MaxGain' of XSD type 'xsd:float'
        float *MaxGain;
        /// Optional element 'tt:MinIris' of XSD type 'xsd:float'
        float *MinIris;
        /// Optional element 'tt:MaxIris' of XSD type 'xsd:float'
        float *MaxIris;
        /// Optional element 'tt:ExposureTime' of XSD type 'xsd:float'
        float *ExposureTime;
        /// Optional element 'tt:Gain' of XSD type 'xsd:float'
        float *Gain;
        /// Optional element 'tt:Iris' of XSD type 'xsd:float'
        float *Iris;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Exposure20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Exposure20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Exposure20, default initialized and not managed by a soap context
        virtual tt__Exposure20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Exposure20); }
      public:
        /// Constructor with initializations
        tt__Exposure20() : Mode(), Priority(), Window(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris(), soap() { }
        virtual ~tt__Exposure20() { }
        /// Friend allocator used by soap_new_tt__Exposure20(struct soap*, int)
        friend SOAP_FMAC1 tt__Exposure20 * SOAP_FMAC2 soap_instantiate_tt__Exposure20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1569 */
#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (526)
/* complex XSD type 'tt:ToneCompensation': */
class SOAP_CMAC tt__ToneCompensation {
      public:
        /// Required element 'tt:Mode' of XSD type 'xsd:string'
        std::string Mode;
        /// Optional element 'tt:Level' of XSD type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XSD type 'tt:ToneCompensationExtension'
        tt__ToneCompensationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensation, default initialized and not managed by a soap context
        virtual tt__ToneCompensation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensation); }
      public:
        /// Constructor with initializations
        tt__ToneCompensation() : Mode(), Level(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ToneCompensation() { }
        /// Friend allocator used by soap_new_tt__ToneCompensation(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensation * SOAP_FMAC2 soap_instantiate_tt__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1572 */
#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (527)
/* complex XSD type 'tt:ToneCompensationExtension': */
class SOAP_CMAC tt__ToneCompensationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensationExtension, default initialized and not managed by a soap context
        virtual tt__ToneCompensationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensationExtension); }
      public:
        /// Constructor with initializations
        tt__ToneCompensationExtension() : __any(), soap() { }
        virtual ~tt__ToneCompensationExtension() { }
        /// Friend allocator used by soap_new_tt__ToneCompensationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1575 */
#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (528)
/* complex XSD type 'tt:Defogging': */
class SOAP_CMAC tt__Defogging {
      public:
        /// Required element 'tt:Mode' of XSD type 'xsd:string'
        std::string Mode;
        /// Optional element 'tt:Level' of XSD type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XSD type 'tt:DefoggingExtension'
        tt__DefoggingExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Defogging
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Defogging; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Defogging, default initialized and not managed by a soap context
        virtual tt__Defogging *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Defogging); }
      public:
        /// Constructor with initializations
        tt__Defogging() : Mode(), Level(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Defogging() { }
        /// Friend allocator used by soap_new_tt__Defogging(struct soap*, int)
        friend SOAP_FMAC1 tt__Defogging * SOAP_FMAC2 soap_instantiate_tt__Defogging(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1578 */
#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (529)
/* complex XSD type 'tt:DefoggingExtension': */
class SOAP_CMAC tt__DefoggingExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DefoggingExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DefoggingExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DefoggingExtension, default initialized and not managed by a soap context
        virtual tt__DefoggingExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DefoggingExtension); }
      public:
        /// Constructor with initializations
        tt__DefoggingExtension() : __any(), soap() { }
        virtual ~tt__DefoggingExtension() { }
        /// Friend allocator used by soap_new_tt__DefoggingExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DefoggingExtension * SOAP_FMAC2 soap_instantiate_tt__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1581 */
#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (530)
/* complex XSD type 'tt:NoiseReduction': */
class SOAP_CMAC tt__NoiseReduction {
      public:
        /// Required element 'tt:Level' of XSD type 'xsd:float'
        float Level;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NoiseReduction
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NoiseReduction; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NoiseReduction, default initialized and not managed by a soap context
        virtual tt__NoiseReduction *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NoiseReduction); }
      public:
        /// Constructor with initializations
        tt__NoiseReduction() : Level(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__NoiseReduction() { }
        /// Friend allocator used by soap_new_tt__NoiseReduction(struct soap*, int)
        friend SOAP_FMAC1 tt__NoiseReduction * SOAP_FMAC2 soap_instantiate_tt__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1584 */
#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (531)
/* complex XSD type 'tt:ImagingOptions20': */
class SOAP_CMAC tt__ImagingOptions20 {
      public:
        /// Optional element 'tt:BacklightCompensation' of XSD type 'tt:BacklightCompensationOptions20'
        tt__BacklightCompensationOptions20 *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XSD type 'tt:FloatRange'
        tt__FloatRange *Brightness;
        /// Optional element 'tt:ColorSaturation' of XSD type 'tt:FloatRange'
        tt__FloatRange *ColorSaturation;
        /// Optional element 'tt:Contrast' of XSD type 'tt:FloatRange'
        tt__FloatRange *Contrast;
        /// Optional element 'tt:Exposure' of XSD type 'tt:ExposureOptions20'
        tt__ExposureOptions20 *Exposure;
        /// Optional element 'tt:Focus' of XSD type 'tt:FocusOptions20'
        tt__FocusOptions20 *Focus;
        /// Optional element 'tt:IrCutFilterModes' of XSD type 'tt:IrCutFilterMode'
        std::vector<tt__IrCutFilterMode> IrCutFilterModes;
        /// Optional element 'tt:Sharpness' of XSD type 'tt:FloatRange'
        tt__FloatRange *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XSD type 'tt:WideDynamicRangeOptions20'
        tt__WideDynamicRangeOptions20 *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XSD type 'tt:WhiteBalanceOptions20'
        tt__WhiteBalanceOptions20 *WhiteBalance;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingOptions20Extension'
        tt__ImagingOptions20Extension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions20() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilterModes(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImagingOptions20() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1587 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (532)
/* complex XSD type 'tt:ImagingOptions20Extension': */
class SOAP_CMAC tt__ImagingOptions20Extension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:ImageStabilization' of XSD type 'tt:ImageStabilizationOptions'
        tt__ImageStabilizationOptions *ImageStabilization;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingOptions20Extension2'
        tt__ImagingOptions20Extension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions20Extension() : __any(), ImageStabilization(), Extension(), soap() { }
        virtual ~tt__ImagingOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1590 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (533)
/* complex XSD type 'tt:ImagingOptions20Extension2': */
class SOAP_CMAC tt__ImagingOptions20Extension2 {
      public:
        /// Optional element 'tt:IrCutFilterAutoAdjustment' of XSD type 'tt:IrCutFilterAutoAdjustmentOptions'
        tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingOptions20Extension3'
        tt__ImagingOptions20Extension3 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension2, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension2); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions20Extension2() : IrCutFilterAutoAdjustment(), Extension(), soap() { }
        virtual ~tt__ImagingOptions20Extension2() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension2(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension2 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1593 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (534)
/* complex XSD type 'tt:ImagingOptions20Extension3': */
class SOAP_CMAC tt__ImagingOptions20Extension3 {
      public:
        /// Optional element 'tt:ToneCompensationOptions' of XSD type 'tt:ToneCompensationOptions'
        tt__ToneCompensationOptions *ToneCompensationOptions;
        /// Optional element 'tt:DefoggingOptions' of XSD type 'tt:DefoggingOptions'
        tt__DefoggingOptions *DefoggingOptions;
        /// Optional element 'tt:NoiseReductionOptions' of XSD type 'tt:NoiseReductionOptions'
        tt__NoiseReductionOptions *NoiseReductionOptions;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImagingOptions20Extension4'
        tt__ImagingOptions20Extension4 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension3
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension3; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension3, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension3 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension3); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions20Extension3() : ToneCompensationOptions(), DefoggingOptions(), NoiseReductionOptions(), Extension(), soap() { }
        virtual ~tt__ImagingOptions20Extension3() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension3(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension3 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension3(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1596 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (535)
/* complex XSD type 'tt:ImagingOptions20Extension4': */
class SOAP_CMAC tt__ImagingOptions20Extension4 {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension4
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension4; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension4, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension4 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension4); }
      public:
        /// Constructor with initializations
        tt__ImagingOptions20Extension4() : __any(), soap() { }
        virtual ~tt__ImagingOptions20Extension4() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension4(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension4 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension4(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1599 */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (536)
/* complex XSD type 'tt:ImageStabilizationOptions': */
class SOAP_CMAC tt__ImageStabilizationOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ImageStabilizationMode'
        std::vector<tt__ImageStabilizationMode> Mode;
        /// Optional element 'tt:Level' of XSD type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Optional element 'tt:Extension' of XSD type 'tt:ImageStabilizationOptionsExtension'
        tt__ImageStabilizationOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationOptions, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationOptions); }
      public:
        /// Constructor with initializations
        tt__ImageStabilizationOptions() : Mode(), Level(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ImageStabilizationOptions() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationOptions * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1602 */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (537)
/* complex XSD type 'tt:ImageStabilizationOptionsExtension': */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__ImageStabilizationOptionsExtension() : __any(), soap() { }
        virtual ~tt__ImageStabilizationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1605 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (538)
/* complex XSD type 'tt:IrCutFilterAutoAdjustmentOptions': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptions {
      public:
        /// Required element 'tt:BoundaryType' of XSD type 'xsd:string'
        std::vector<std::string> BoundaryType;
        /// Optional element 'tt:BoundaryOffset' of XSD type 'xsd:boolean'
        bool *BoundaryOffset;
        /// Optional element 'tt:ResponseTimeRange' of XSD type 'tt:DurationRange'
        tt__DurationRange *ResponseTimeRange;
        /// Optional element 'tt:Extension' of XSD type 'tt:IrCutFilterAutoAdjustmentOptionsExtension'
        tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentOptions, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentOptions); }
      public:
        /// Constructor with initializations
        tt__IrCutFilterAutoAdjustmentOptions() : BoundaryType(), BoundaryOffset(), ResponseTimeRange(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__IrCutFilterAutoAdjustmentOptions() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1608 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (539)
/* complex XSD type 'tt:IrCutFilterAutoAdjustmentOptionsExtension': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentOptionsExtension, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__IrCutFilterAutoAdjustmentOptionsExtension() : __any(), soap() { }
        virtual ~tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1611 */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (540)
/* complex XSD type 'tt:WideDynamicRangeOptions20': */
class SOAP_CMAC tt__WideDynamicRangeOptions20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WideDynamicMode'
        std::vector<tt__WideDynamicMode> Mode;
        /// Optional element 'tt:Level' of XSD type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRangeOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRangeOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRangeOptions20, default initialized and not managed by a soap context
        virtual tt__WideDynamicRangeOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRangeOptions20); }
      public:
        /// Constructor with initializations
        tt__WideDynamicRangeOptions20() : Mode(), Level(), soap() { }
        virtual ~tt__WideDynamicRangeOptions20() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRangeOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRangeOptions20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1614 */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (541)
/* complex XSD type 'tt:BacklightCompensationOptions20': */
class SOAP_CMAC tt__BacklightCompensationOptions20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:BacklightCompensationMode'
        std::vector<tt__BacklightCompensationMode> Mode;
        /// Optional element 'tt:Level' of XSD type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensationOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensationOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensationOptions20, default initialized and not managed by a soap context
        virtual tt__BacklightCompensationOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensationOptions20); }
      public:
        /// Constructor with initializations
        tt__BacklightCompensationOptions20() : Mode(), Level(), soap() { }
        virtual ~tt__BacklightCompensationOptions20() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensationOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensationOptions20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1617 */
#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (542)
/* complex XSD type 'tt:ExposureOptions20': */
class SOAP_CMAC tt__ExposureOptions20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ExposureMode'
        std::vector<tt__ExposureMode> Mode;
        /// Optional element 'tt:Priority' of XSD type 'tt:ExposurePriority'
        std::vector<tt__ExposurePriority> Priority;
        /// Optional element 'tt:MinExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinExposureTime;
        /// Optional element 'tt:MaxExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxExposureTime;
        /// Optional element 'tt:MinGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinGain;
        /// Optional element 'tt:MaxGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxGain;
        /// Optional element 'tt:MinIris' of XSD type 'tt:FloatRange'
        tt__FloatRange *MinIris;
        /// Optional element 'tt:MaxIris' of XSD type 'tt:FloatRange'
        tt__FloatRange *MaxIris;
        /// Optional element 'tt:ExposureTime' of XSD type 'tt:FloatRange'
        tt__FloatRange *ExposureTime;
        /// Optional element 'tt:Gain' of XSD type 'tt:FloatRange'
        tt__FloatRange *Gain;
        /// Optional element 'tt:Iris' of XSD type 'tt:FloatRange'
        tt__FloatRange *Iris;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposureOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposureOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposureOptions20, default initialized and not managed by a soap context
        virtual tt__ExposureOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposureOptions20); }
      public:
        /// Constructor with initializations
        tt__ExposureOptions20() : Mode(), Priority(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris(), soap() { }
        virtual ~tt__ExposureOptions20() { }
        /// Friend allocator used by soap_new_tt__ExposureOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposureOptions20 * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1620 */
#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (543)
/* complex XSD type 'tt:MoveOptions20': */
class SOAP_CMAC tt__MoveOptions20 {
      public:
        /// Optional element 'tt:Absolute' of XSD type 'tt:AbsoluteFocusOptions'
        tt__AbsoluteFocusOptions *Absolute;
        /// Optional element 'tt:Relative' of XSD type 'tt:RelativeFocusOptions20'
        tt__RelativeFocusOptions20 *Relative;
        /// Optional element 'tt:Continuous' of XSD type 'tt:ContinuousFocusOptions'
        tt__ContinuousFocusOptions *Continuous;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveOptions20, default initialized and not managed by a soap context
        virtual tt__MoveOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveOptions20); }
      public:
        /// Constructor with initializations
        tt__MoveOptions20() : Absolute(), Relative(), Continuous(), soap() { }
        virtual ~tt__MoveOptions20() { }
        /// Friend allocator used by soap_new_tt__MoveOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveOptions20 * SOAP_FMAC2 soap_instantiate_tt__MoveOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1623 */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (544)
/* complex XSD type 'tt:RelativeFocusOptions20': */
class SOAP_CMAC tt__RelativeFocusOptions20 {
      public:
        /// Required element 'tt:Distance' of XSD type 'tt:FloatRange'
        tt__FloatRange *Distance;
        /// Optional element 'tt:Speed' of XSD type 'tt:FloatRange'
        tt__FloatRange *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocusOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocusOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocusOptions20, default initialized and not managed by a soap context
        virtual tt__RelativeFocusOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocusOptions20); }
      public:
        /// Constructor with initializations
        tt__RelativeFocusOptions20() : Distance(), Speed(), soap() { }
        virtual ~tt__RelativeFocusOptions20() { }
        /// Friend allocator used by soap_new_tt__RelativeFocusOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1626 */
#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (545)
/* complex XSD type 'tt:WhiteBalance20': */
class SOAP_CMAC tt__WhiteBalance20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WhiteBalanceMode'
        tt__WhiteBalanceMode Mode;
        /// Optional element 'tt:CrGain' of XSD type 'xsd:float'
        float *CrGain;
        /// Optional element 'tt:CbGain' of XSD type 'xsd:float'
        float *CbGain;
        /// Optional element 'tt:Extension' of XSD type 'tt:WhiteBalance20Extension'
        tt__WhiteBalance20Extension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance20, default initialized and not managed by a soap context
        virtual tt__WhiteBalance20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance20); }
      public:
        /// Constructor with initializations
        tt__WhiteBalance20() : Mode(), CrGain(), CbGain(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__WhiteBalance20() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance20(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1629 */
#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (546)
/* complex XSD type 'tt:WhiteBalance20Extension': */
class SOAP_CMAC tt__WhiteBalance20Extension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance20Extension, default initialized and not managed by a soap context
        virtual tt__WhiteBalance20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance20Extension); }
      public:
        /// Constructor with initializations
        tt__WhiteBalance20Extension() : __any(), soap() { }
        virtual ~tt__WhiteBalance20Extension() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1632 */
#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (547)
/* complex XSD type 'tt:FocusConfiguration20': */
class SOAP_CMAC tt__FocusConfiguration20 {
      public:
        /// Required element 'tt:AutoFocusMode' of XSD type 'tt:AutoFocusMode'
        tt__AutoFocusMode AutoFocusMode;
        /// Optional element 'tt:DefaultSpeed' of XSD type 'xsd:float'
        float *DefaultSpeed;
        /// Optional element 'tt:NearLimit' of XSD type 'xsd:float'
        float *NearLimit;
        /// Optional element 'tt:FarLimit' of XSD type 'xsd:float'
        float *FarLimit;
        /// Optional element 'tt:Extension' of XSD type 'tt:FocusConfiguration20Extension'
        tt__FocusConfiguration20Extension *Extension;
        /// optional attribute 'AFMode' of XSD type 'tt:StringAttrList'
        std::string *AFMode;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration20, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration20); }
      public:
        /// Constructor with initializations
        tt__FocusConfiguration20() : AutoFocusMode(), DefaultSpeed(), NearLimit(), FarLimit(), Extension(), AFMode(), __anyAttribute(), soap() { }
        virtual ~tt__FocusConfiguration20() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1635 */
#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (548)
/* complex XSD type 'tt:FocusConfiguration20Extension': */
class SOAP_CMAC tt__FocusConfiguration20Extension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration20Extension, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration20Extension); }
      public:
        /// Constructor with initializations
        tt__FocusConfiguration20Extension() : __any(), soap() { }
        virtual ~tt__FocusConfiguration20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1638 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (549)
/* complex XSD type 'tt:WhiteBalanceOptions20': */
class SOAP_CMAC tt__WhiteBalanceOptions20 {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:WhiteBalanceMode'
        std::vector<tt__WhiteBalanceMode> Mode;
        /// Optional element 'tt:YrGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *YrGain;
        /// Optional element 'tt:YbGain' of XSD type 'tt:FloatRange'
        tt__FloatRange *YbGain;
        /// Optional element 'tt:Extension' of XSD type 'tt:WhiteBalanceOptions20Extension'
        tt__WhiteBalanceOptions20Extension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions20, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions20); }
      public:
        /// Constructor with initializations
        tt__WhiteBalanceOptions20() : Mode(), YrGain(), YbGain(), Extension(), soap() { }
        virtual ~tt__WhiteBalanceOptions20() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1641 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (550)
/* complex XSD type 'tt:WhiteBalanceOptions20Extension': */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions20Extension, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions20Extension); }
      public:
        /// Constructor with initializations
        tt__WhiteBalanceOptions20Extension() : __any(), soap() { }
        virtual ~tt__WhiteBalanceOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1644 */
#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (551)
/* complex XSD type 'tt:FocusOptions20': */
class SOAP_CMAC tt__FocusOptions20 {
      public:
        /// Optional element 'tt:AutoFocusModes' of XSD type 'tt:AutoFocusMode'
        std::vector<tt__AutoFocusMode> AutoFocusModes;
        /// Optional element 'tt:DefaultSpeed' of XSD type 'tt:FloatRange'
        tt__FloatRange *DefaultSpeed;
        /// Optional element 'tt:NearLimit' of XSD type 'tt:FloatRange'
        tt__FloatRange *NearLimit;
        /// Optional element 'tt:FarLimit' of XSD type 'tt:FloatRange'
        tt__FloatRange *FarLimit;
        /// Optional element 'tt:Extension' of XSD type 'tt:FocusOptions20Extension'
        tt__FocusOptions20Extension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions20, default initialized and not managed by a soap context
        virtual tt__FocusOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions20); }
      public:
        /// Constructor with initializations
        tt__FocusOptions20() : AutoFocusModes(), DefaultSpeed(), NearLimit(), FarLimit(), Extension(), soap() { }
        virtual ~tt__FocusOptions20() { }
        /// Friend allocator used by soap_new_tt__FocusOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1647 */
#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (552)
/* complex XSD type 'tt:FocusOptions20Extension': */
class SOAP_CMAC tt__FocusOptions20Extension {
      public:
        std::vector<char *> __any;
        /// Optional element 'tt:AFModes' of XSD type 'tt:StringAttrList'
        std::string *AFModes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions20Extension, default initialized and not managed by a soap context
        virtual tt__FocusOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions20Extension); }
      public:
        /// Constructor with initializations
        tt__FocusOptions20Extension() : __any(), AFModes(), soap() { }
        virtual ~tt__FocusOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1650 */
#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (553)
/* complex XSD type 'tt:ToneCompensationOptions': */
class SOAP_CMAC tt__ToneCompensationOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'xsd:string'
        std::vector<std::string> Mode;
        /// Required element 'tt:Level' of XSD type 'xsd:boolean'
        bool Level;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensationOptions, default initialized and not managed by a soap context
        virtual tt__ToneCompensationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensationOptions); }
      public:
        /// Constructor with initializations
        tt__ToneCompensationOptions() : Mode(), Level(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ToneCompensationOptions() { }
        /// Friend allocator used by soap_new_tt__ToneCompensationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1653 */
#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (554)
/* complex XSD type 'tt:DefoggingOptions': */
class SOAP_CMAC tt__DefoggingOptions {
      public:
        /// Required element 'tt:Mode' of XSD type 'xsd:string'
        std::vector<std::string> Mode;
        /// Required element 'tt:Level' of XSD type 'xsd:boolean'
        bool Level;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DefoggingOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DefoggingOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DefoggingOptions, default initialized and not managed by a soap context
        virtual tt__DefoggingOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DefoggingOptions); }
      public:
        /// Constructor with initializations
        tt__DefoggingOptions() : Mode(), Level(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__DefoggingOptions() { }
        /// Friend allocator used by soap_new_tt__DefoggingOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__DefoggingOptions * SOAP_FMAC2 soap_instantiate_tt__DefoggingOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1656 */
#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (555)
/* complex XSD type 'tt:NoiseReductionOptions': */
class SOAP_CMAC tt__NoiseReductionOptions {
      public:
        /// Required element 'tt:Level' of XSD type 'xsd:boolean'
        bool Level;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NoiseReductionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NoiseReductionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NoiseReductionOptions, default initialized and not managed by a soap context
        virtual tt__NoiseReductionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NoiseReductionOptions); }
      public:
        /// Constructor with initializations
        tt__NoiseReductionOptions() : Level(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__NoiseReductionOptions() { }
        /// Friend allocator used by soap_new_tt__NoiseReductionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__NoiseReductionOptions * SOAP_FMAC2 soap_instantiate_tt__NoiseReductionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1659 */
#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (556)
/* complex XSD type 'tt:MessageExtension': */
class SOAP_CMAC tt__MessageExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageExtension, default initialized and not managed by a soap context
        virtual tt__MessageExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageExtension); }
      public:
        /// Constructor with initializations
        tt__MessageExtension() : __any(), soap() { }
        virtual ~tt__MessageExtension() { }
        /// Friend allocator used by soap_new_tt__MessageExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageExtension * SOAP_FMAC2 soap_instantiate_tt__MessageExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17403 */
#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1197)
/* complex XSD type 'tt:ItemList-SimpleItem': */
class SOAP_CMAC _tt__ItemList_SimpleItem {
      public:
        /// required attribute 'Name' of XSD type 'xsd:string'
        std::string Name;
        /// required attribute 'Value' of XSD type 'xsd:anySimpleType'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemList_SimpleItem
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemList_SimpleItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemList_SimpleItem, default initialized and not managed by a soap context
        virtual _tt__ItemList_SimpleItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemList_SimpleItem); }
      public:
        /// Constructor with initializations
        _tt__ItemList_SimpleItem() : Name(), Value() { }
        virtual ~_tt__ItemList_SimpleItem() { }
        /// Friend allocator used by soap_new__tt__ItemList_SimpleItem(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17431 */
#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1199)
/* complex XSD type 'tt:ItemList-ElementItem': */
class SOAP_CMAC _tt__ItemList_ElementItem {
      public:
        char *__any;
        /// required attribute 'Name' of XSD type 'xsd:string'
        std::string Name;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemList_ElementItem
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemList_ElementItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemList_ElementItem, default initialized and not managed by a soap context
        virtual _tt__ItemList_ElementItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemList_ElementItem); }
      public:
        /// Constructor with initializations
        _tt__ItemList_ElementItem() : __any(), Name() { }
        virtual ~_tt__ItemList_ElementItem() { }
        /// Friend allocator used by soap_new__tt__ItemList_ElementItem(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1662 */
#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (557)
/* complex XSD type 'tt:ItemList': */
class SOAP_CMAC tt__ItemList {
      public:
        /// Optional element 'tt:SimpleItem' of XSD type 'tt:ItemList-SimpleItem'
        std::vector<_tt__ItemList_SimpleItem> SimpleItem;
        /// Optional element 'tt:ElementItem' of XSD type 'tt:ItemList-ElementItem'
        std::vector<_tt__ItemList_ElementItem> ElementItem;
        /// Optional element 'tt:Extension' of XSD type 'tt:ItemListExtension'
        tt__ItemListExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemList, default initialized and not managed by a soap context
        virtual tt__ItemList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemList); }
      public:
        /// Constructor with initializations
        tt__ItemList() : SimpleItem(), ElementItem(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ItemList() { }
        /// Friend allocator used by soap_new_tt__ItemList(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemList * SOAP_FMAC2 soap_instantiate_tt__ItemList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1665 */
#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (558)
/* complex XSD type 'tt:ItemListExtension': */
class SOAP_CMAC tt__ItemListExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListExtension, default initialized and not managed by a soap context
        virtual tt__ItemListExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListExtension); }
      public:
        /// Constructor with initializations
        tt__ItemListExtension() : __any(), soap() { }
        virtual ~tt__ItemListExtension() { }
        /// Friend allocator used by soap_new_tt__ItemListExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1668 */
#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (559)
/* complex XSD type 'tt:MessageDescription': */
class SOAP_CMAC tt__MessageDescription {
      public:
        /// Optional element 'tt:Source' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Source;
        /// Optional element 'tt:Key' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Key;
        /// Optional element 'tt:Data' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Data;
        /// Optional element 'tt:Extension' of XSD type 'tt:MessageDescriptionExtension'
        tt__MessageDescriptionExtension *Extension;
        /// optional attribute 'IsProperty' of XSD type 'xsd:boolean'
        bool *IsProperty;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageDescription, default initialized and not managed by a soap context
        virtual tt__MessageDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageDescription); }
      public:
        /// Constructor with initializations
        tt__MessageDescription() : Source(), Key(), Data(), Extension(), IsProperty(), __anyAttribute(), soap() { }
        virtual ~tt__MessageDescription() { }
        /// Friend allocator used by soap_new_tt__MessageDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageDescription * SOAP_FMAC2 soap_instantiate_tt__MessageDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1671 */
#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (560)
/* complex XSD type 'tt:MessageDescriptionExtension': */
class SOAP_CMAC tt__MessageDescriptionExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__MessageDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageDescriptionExtension); }
      public:
        /// Constructor with initializations
        tt__MessageDescriptionExtension() : __any(), soap() { }
        virtual ~tt__MessageDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__MessageDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__MessageDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17589 */
#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1204)
/* complex XSD type 'tt:ItemListDescription-SimpleItemDescription': */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription {
      public:
        /// required attribute 'Name' of XSD type 'xsd:string'
        std::string Name;
        /// required attribute 'Type' of XSD type 'xsd:QName'
        std::string Type;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemListDescription_SimpleItemDescription, default initialized and not managed by a soap context
        virtual _tt__ItemListDescription_SimpleItemDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemListDescription_SimpleItemDescription); }
      public:
        /// Constructor with initializations
        _tt__ItemListDescription_SimpleItemDescription() : Name(), Type() { }
        virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
        /// Friend allocator used by soap_new__tt__ItemListDescription_SimpleItemDescription(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17614 */
#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1206)
/* complex XSD type 'tt:ItemListDescription-ElementItemDescription': */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription {
      public:
        /// required attribute 'Name' of XSD type 'xsd:string'
        std::string Name;
        /// required attribute 'Type' of XSD type 'xsd:QName'
        std::string Type;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemListDescription_ElementItemDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemListDescription_ElementItemDescription, default initialized and not managed by a soap context
        virtual _tt__ItemListDescription_ElementItemDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemListDescription_ElementItemDescription); }
      public:
        /// Constructor with initializations
        _tt__ItemListDescription_ElementItemDescription() : Name(), Type() { }
        virtual ~_tt__ItemListDescription_ElementItemDescription() { }
        /// Friend allocator used by soap_new__tt__ItemListDescription_ElementItemDescription(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1674 */
#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (561)
/* complex XSD type 'tt:ItemListDescription': */
class SOAP_CMAC tt__ItemListDescription {
      public:
        /// Optional element 'tt:SimpleItemDescription' of XSD type 'tt:ItemListDescription-SimpleItemDescription'
        std::vector<_tt__ItemListDescription_SimpleItemDescription> SimpleItemDescription;
        /// Optional element 'tt:ElementItemDescription' of XSD type 'tt:ItemListDescription-ElementItemDescription'
        std::vector<_tt__ItemListDescription_ElementItemDescription> ElementItemDescription;
        /// Optional element 'tt:Extension' of XSD type 'tt:ItemListDescriptionExtension'
        tt__ItemListDescriptionExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListDescription, default initialized and not managed by a soap context
        virtual tt__ItemListDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListDescription); }
      public:
        /// Constructor with initializations
        tt__ItemListDescription() : SimpleItemDescription(), ElementItemDescription(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ItemListDescription() { }
        /// Friend allocator used by soap_new_tt__ItemListDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListDescription * SOAP_FMAC2 soap_instantiate_tt__ItemListDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1677 */
#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (562)
/* complex XSD type 'tt:ItemListDescriptionExtension': */
class SOAP_CMAC tt__ItemListDescriptionExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__ItemListDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListDescriptionExtension); }
      public:
        /// Constructor with initializations
        tt__ItemListDescriptionExtension() : __any(), soap() { }
        virtual ~tt__ItemListDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__ItemListDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1680 */
#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (563)
/* complex XSD type 'tt:Polyline': */
class SOAP_CMAC tt__Polyline {
      public:
        /// Required element 'tt:Point' of XSD type 'tt:Vector'
        std::vector<tt__Vector *> Point;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Polyline
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Polyline; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Polyline, default initialized and not managed by a soap context
        virtual tt__Polyline *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Polyline); }
      public:
        /// Constructor with initializations
        tt__Polyline() : Point(), soap() { }
        virtual ~tt__Polyline() { }
        /// Friend allocator used by soap_new_tt__Polyline(struct soap*, int)
        friend SOAP_FMAC1 tt__Polyline * SOAP_FMAC2 soap_instantiate_tt__Polyline(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1683 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (564)
/* complex XSD type 'tt:AnalyticsEngineConfiguration': */
class SOAP_CMAC tt__AnalyticsEngineConfiguration {
      public:
        /// Optional element 'tt:AnalyticsModule' of XSD type 'tt:Config'
        std::vector<tt__Config *> AnalyticsModule;
        /// Optional element 'tt:Extension' of XSD type 'tt:AnalyticsEngineConfigurationExtension'
        tt__AnalyticsEngineConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineConfiguration); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineConfiguration() : AnalyticsModule(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1686 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (565)
/* complex XSD type 'tt:AnalyticsEngineConfigurationExtension': */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineConfigurationExtension() : __any(), soap() { }
        virtual ~tt__AnalyticsEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1689 */
#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (566)
/* complex XSD type 'tt:RuleEngineConfiguration': */
class SOAP_CMAC tt__RuleEngineConfiguration {
      public:
        /// Optional element 'tt:Rule' of XSD type 'tt:Config'
        std::vector<tt__Config *> Rule;
        /// Optional element 'tt:Extension' of XSD type 'tt:RuleEngineConfigurationExtension'
        tt__RuleEngineConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RuleEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RuleEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RuleEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__RuleEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RuleEngineConfiguration); }
      public:
        /// Constructor with initializations
        tt__RuleEngineConfiguration() : Rule(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__RuleEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__RuleEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1692 */
#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (567)
/* complex XSD type 'tt:RuleEngineConfigurationExtension': */
class SOAP_CMAC tt__RuleEngineConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RuleEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RuleEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RuleEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__RuleEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RuleEngineConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__RuleEngineConfigurationExtension() : __any(), soap() { }
        virtual ~tt__RuleEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__RuleEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1695 */
#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (568)
/* complex XSD type 'tt:Config': */
class SOAP_CMAC tt__Config {
      public:
        /// Required element 'tt:Parameters' of XSD type 'tt:ItemList'
        tt__ItemList *Parameters;
        /// required attribute 'Name' of XSD type 'xsd:string'
        std::string Name;
        /// required attribute 'Type' of XSD type 'xsd:QName'
        std::string Type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Config
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Config; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Config, default initialized and not managed by a soap context
        virtual tt__Config *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Config); }
      public:
        /// Constructor with initializations
        tt__Config() : Parameters(), Name(), Type(), soap() { }
        virtual ~tt__Config() { }
        /// Friend allocator used by soap_new_tt__Config(struct soap*, int)
        friend SOAP_FMAC1 tt__Config * SOAP_FMAC2 soap_instantiate_tt__Config(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17857 */
#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1216)
/* complex XSD type 'tt:ConfigDescription-Messages': */
class SOAP_CMAC _tt__ConfigDescription_Messages {
      public:
        /// Optional element 'tt:Source' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Source;
        /// Optional element 'tt:Key' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Key;
        /// Optional element 'tt:Data' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Data;
        /// Optional element 'tt:Extension' of XSD type 'tt:MessageDescriptionExtension'
        tt__MessageDescriptionExtension *Extension;
        /// optional attribute 'IsProperty' of XSD type 'xsd:boolean'
        bool *IsProperty;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Required element 'tt:ParentTopic' of XSD type 'xsd:string'
        std::string ParentTopic;
      public:
        /// Return unique type id SOAP_TYPE__tt__ConfigDescription_Messages
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ConfigDescription_Messages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ConfigDescription_Messages, default initialized and not managed by a soap context
        virtual _tt__ConfigDescription_Messages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ConfigDescription_Messages); }
      public:
        /// Constructor with initializations
        _tt__ConfigDescription_Messages() : Source(), Key(), Data(), Extension(), IsProperty(), __anyAttribute(), ParentTopic() { }
        virtual ~_tt__ConfigDescription_Messages() { }
        /// Friend allocator used by soap_new__tt__ConfigDescription_Messages(struct soap*, int)
        friend SOAP_FMAC1 _tt__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1698 */
#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (569)
/* complex XSD type 'tt:ConfigDescription': */
class SOAP_CMAC tt__ConfigDescription {
      public:
        /// Required element 'tt:Parameters' of XSD type 'tt:ItemListDescription'
        tt__ItemListDescription *Parameters;
        /// Optional element 'tt:Messages' of XSD type 'tt:ConfigDescription-Messages'
        std::vector<_tt__ConfigDescription_Messages> Messages;
        /// Optional element 'tt:Extension' of XSD type 'tt:ConfigDescriptionExtension'
        tt__ConfigDescriptionExtension *Extension;
        /// required attribute 'Name' of XSD type 'xsd:QName'
        std::string Name;
        /// optional attribute 'fixed' of XSD type 'xsd:boolean'
        bool *fixed;
        /// optional attribute 'maxInstances' of XSD type 'xsd:integer'
        std::string *maxInstances;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigDescription, default initialized and not managed by a soap context
        virtual tt__ConfigDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigDescription); }
      public:
        /// Constructor with initializations
        tt__ConfigDescription() : Parameters(), Messages(), Extension(), Name(), fixed(), maxInstances(), __anyAttribute(), soap() { }
        virtual ~tt__ConfigDescription() { }
        /// Friend allocator used by soap_new_tt__ConfigDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigDescription * SOAP_FMAC2 soap_instantiate_tt__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1701 */
#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (570)
/* complex XSD type 'tt:ConfigDescriptionExtension': */
class SOAP_CMAC tt__ConfigDescriptionExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__ConfigDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigDescriptionExtension); }
      public:
        /// Constructor with initializations
        tt__ConfigDescriptionExtension() : __any(), soap() { }
        virtual ~tt__ConfigDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__ConfigDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ConfigDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1704 */
#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (571)
/* complex XSD type 'tt:SupportedRules': */
class SOAP_CMAC tt__SupportedRules {
      public:
        /// Optional element 'tt:RuleContentSchemaLocation' of XSD type 'xsd:anyURI'
        std::vector<std::string> RuleContentSchemaLocation;
        /// Optional element 'tt:RuleDescription' of XSD type 'tt:ConfigDescription'
        std::vector<tt__ConfigDescription *> RuleDescription;
        /// Optional element 'tt:Extension' of XSD type 'tt:SupportedRulesExtension'
        tt__SupportedRulesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedRules
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedRules; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedRules, default initialized and not managed by a soap context
        virtual tt__SupportedRules *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedRules); }
      public:
        /// Constructor with initializations
        tt__SupportedRules() : RuleContentSchemaLocation(), RuleDescription(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SupportedRules() { }
        /// Friend allocator used by soap_new_tt__SupportedRules(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedRules * SOAP_FMAC2 soap_instantiate_tt__SupportedRules(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1707 */
#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (572)
/* complex XSD type 'tt:SupportedRulesExtension': */
class SOAP_CMAC tt__SupportedRulesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedRulesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedRulesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedRulesExtension, default initialized and not managed by a soap context
        virtual tt__SupportedRulesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedRulesExtension); }
      public:
        /// Constructor with initializations
        tt__SupportedRulesExtension() : __any(), soap() { }
        virtual ~tt__SupportedRulesExtension() { }
        /// Friend allocator used by soap_new_tt__SupportedRulesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedRulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedRulesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1710 */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (573)
/* complex XSD type 'tt:SupportedAnalyticsModules': */
class SOAP_CMAC tt__SupportedAnalyticsModules {
      public:
        /// Optional element 'tt:AnalyticsModuleContentSchemaLocation' of XSD type 'xsd:anyURI'
        std::vector<std::string> AnalyticsModuleContentSchemaLocation;
        /// Optional element 'tt:AnalyticsModuleDescription' of XSD type 'tt:ConfigDescription'
        std::vector<tt__ConfigDescription *> AnalyticsModuleDescription;
        /// Optional element 'tt:Extension' of XSD type 'tt:SupportedAnalyticsModulesExtension'
        tt__SupportedAnalyticsModulesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedAnalyticsModules
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedAnalyticsModules; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedAnalyticsModules, default initialized and not managed by a soap context
        virtual tt__SupportedAnalyticsModules *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedAnalyticsModules); }
      public:
        /// Constructor with initializations
        tt__SupportedAnalyticsModules() : AnalyticsModuleContentSchemaLocation(), AnalyticsModuleDescription(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SupportedAnalyticsModules() { }
        /// Friend allocator used by soap_new_tt__SupportedAnalyticsModules(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedAnalyticsModules * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModules(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1713 */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (574)
/* complex XSD type 'tt:SupportedAnalyticsModulesExtension': */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedAnalyticsModulesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedAnalyticsModulesExtension, default initialized and not managed by a soap context
        virtual tt__SupportedAnalyticsModulesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedAnalyticsModulesExtension); }
      public:
        /// Constructor with initializations
        tt__SupportedAnalyticsModulesExtension() : __any(), soap() { }
        virtual ~tt__SupportedAnalyticsModulesExtension() { }
        /// Friend allocator used by soap_new_tt__SupportedAnalyticsModulesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModulesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1716 */
#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (575)
/* complex XSD type 'tt:PolygonConfiguration': */
class SOAP_CMAC tt__PolygonConfiguration {
      public:
        /// Required element 'tt:Polygon' of XSD type 'tt:Polygon'
        tt__Polygon *Polygon;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolygonConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolygonConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolygonConfiguration, default initialized and not managed by a soap context
        virtual tt__PolygonConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolygonConfiguration); }
      public:
        /// Constructor with initializations
        tt__PolygonConfiguration() : Polygon(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PolygonConfiguration() { }
        /// Friend allocator used by soap_new_tt__PolygonConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PolygonConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolygonConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1719 */
#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (576)
/* complex XSD type 'tt:PolylineArray': */
class SOAP_CMAC tt__PolylineArray {
      public:
        /// Required element 'tt:Segment' of XSD type 'tt:Polyline'
        std::vector<tt__Polyline *> Segment;
        /// Optional element 'tt:Extension' of XSD type 'tt:PolylineArrayExtension'
        tt__PolylineArrayExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArray
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArray, default initialized and not managed by a soap context
        virtual tt__PolylineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArray); }
      public:
        /// Constructor with initializations
        tt__PolylineArray() : Segment(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PolylineArray() { }
        /// Friend allocator used by soap_new_tt__PolylineArray(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArray * SOAP_FMAC2 soap_instantiate_tt__PolylineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1722 */
#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (577)
/* complex XSD type 'tt:PolylineArrayExtension': */
class SOAP_CMAC tt__PolylineArrayExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArrayExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArrayExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArrayExtension, default initialized and not managed by a soap context
        virtual tt__PolylineArrayExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArrayExtension); }
      public:
        /// Constructor with initializations
        tt__PolylineArrayExtension() : __any(), soap() { }
        virtual ~tt__PolylineArrayExtension() { }
        /// Friend allocator used by soap_new_tt__PolylineArrayExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArrayExtension * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1725 */
#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (578)
/* complex XSD type 'tt:PolylineArrayConfiguration': */
class SOAP_CMAC tt__PolylineArrayConfiguration {
      public:
        /// Required element 'tt:PolylineArray' of XSD type 'tt:PolylineArray'
        tt__PolylineArray *PolylineArray;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArrayConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArrayConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArrayConfiguration, default initialized and not managed by a soap context
        virtual tt__PolylineArrayConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArrayConfiguration); }
      public:
        /// Constructor with initializations
        tt__PolylineArrayConfiguration() : PolylineArray(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PolylineArrayConfiguration() { }
        /// Friend allocator used by soap_new_tt__PolylineArrayConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArrayConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1728 */
#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (579)
/* complex XSD type 'tt:MotionExpression': */
class SOAP_CMAC tt__MotionExpression {
      public:
        /// Required element 'tt:Expression' of XSD type 'xsd:string'
        std::string Expression;
        std::vector<char *> __any;
        /// optional attribute 'Type' of XSD type 'xsd:string'
        std::string *Type;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MotionExpression
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MotionExpression; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MotionExpression, default initialized and not managed by a soap context
        virtual tt__MotionExpression *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MotionExpression); }
      public:
        /// Constructor with initializations
        tt__MotionExpression() : Expression(), __any(), Type(), __anyAttribute(), soap() { }
        virtual ~tt__MotionExpression() { }
        /// Friend allocator used by soap_new_tt__MotionExpression(struct soap*, int)
        friend SOAP_FMAC1 tt__MotionExpression * SOAP_FMAC2 soap_instantiate_tt__MotionExpression(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1731 */
#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (580)
/* complex XSD type 'tt:MotionExpressionConfiguration': */
class SOAP_CMAC tt__MotionExpressionConfiguration {
      public:
        /// Required element 'tt:MotionExpression' of XSD type 'tt:MotionExpression'
        tt__MotionExpression *MotionExpression;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MotionExpressionConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MotionExpressionConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MotionExpressionConfiguration, default initialized and not managed by a soap context
        virtual tt__MotionExpressionConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MotionExpressionConfiguration); }
      public:
        /// Constructor with initializations
        tt__MotionExpressionConfiguration() : MotionExpression(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MotionExpressionConfiguration() { }
        /// Friend allocator used by soap_new_tt__MotionExpressionConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MotionExpressionConfiguration * SOAP_FMAC2 soap_instantiate_tt__MotionExpressionConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1734 */
#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (581)
/* complex XSD type 'tt:CellLayout': */
class SOAP_CMAC tt__CellLayout {
      public:
        /// Required element 'tt:Transformation' of XSD type 'tt:Transformation'
        tt__Transformation *Transformation;
        std::vector<char *> __any;
        /// required attribute 'Columns' of XSD type 'xsd:integer'
        std::string Columns;
        /// required attribute 'Rows' of XSD type 'xsd:integer'
        std::string Rows;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CellLayout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CellLayout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CellLayout, default initialized and not managed by a soap context
        virtual tt__CellLayout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CellLayout); }
      public:
        /// Constructor with initializations
        tt__CellLayout() : Transformation(), __any(), Columns(), Rows(), __anyAttribute(), soap() { }
        virtual ~tt__CellLayout() { }
        /// Friend allocator used by soap_new_tt__CellLayout(struct soap*, int)
        friend SOAP_FMAC1 tt__CellLayout * SOAP_FMAC2 soap_instantiate_tt__CellLayout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1737 */
#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (582)
/* complex XSD type 'tt:PaneConfiguration': */
class SOAP_CMAC tt__PaneConfiguration {
      public:
        /// Optional element 'tt:PaneName' of XSD type 'xsd:string'
        std::string *PaneName;
        /// Optional element 'tt:AudioOutputToken' of XSD type 'tt:ReferenceToken'
        std::string *AudioOutputToken;
        /// Optional element 'tt:AudioSourceToken' of XSD type 'tt:ReferenceToken'
        std::string *AudioSourceToken;
        /// Optional element 'tt:AudioEncoderConfiguration' of XSD type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *AudioEncoderConfiguration;
        /// Optional element 'tt:ReceiverToken' of XSD type 'tt:ReferenceToken'
        std::string *ReceiverToken;
        /// Required element 'tt:Token' of XSD type 'tt:ReferenceToken'
        std::string Token;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneConfiguration, default initialized and not managed by a soap context
        virtual tt__PaneConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneConfiguration); }
      public:
        /// Constructor with initializations
        tt__PaneConfiguration() : PaneName(), AudioOutputToken(), AudioSourceToken(), AudioEncoderConfiguration(), ReceiverToken(), Token(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PaneConfiguration() { }
        /// Friend allocator used by soap_new_tt__PaneConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneConfiguration * SOAP_FMAC2 soap_instantiate_tt__PaneConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1740 */
#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (583)
/* complex XSD type 'tt:PaneLayout': */
class SOAP_CMAC tt__PaneLayout {
      public:
        /// Required element 'tt:Pane' of XSD type 'tt:ReferenceToken'
        std::string Pane;
        /// Required element 'tt:Area' of XSD type 'tt:Rectangle'
        tt__Rectangle *Area;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneLayout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneLayout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneLayout, default initialized and not managed by a soap context
        virtual tt__PaneLayout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneLayout); }
      public:
        /// Constructor with initializations
        tt__PaneLayout() : Pane(), Area(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PaneLayout() { }
        /// Friend allocator used by soap_new_tt__PaneLayout(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneLayout * SOAP_FMAC2 soap_instantiate_tt__PaneLayout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1743 */
#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (584)
/* complex XSD type 'tt:Layout': */
class SOAP_CMAC tt__Layout {
      public:
        /// Required element 'tt:PaneLayout' of XSD type 'tt:PaneLayout'
        std::vector<tt__PaneLayout *> PaneLayout;
        /// Optional element 'tt:Extension' of XSD type 'tt:LayoutExtension'
        tt__LayoutExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Layout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Layout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Layout, default initialized and not managed by a soap context
        virtual tt__Layout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Layout); }
      public:
        /// Constructor with initializations
        tt__Layout() : PaneLayout(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Layout() { }
        /// Friend allocator used by soap_new_tt__Layout(struct soap*, int)
        friend SOAP_FMAC1 tt__Layout * SOAP_FMAC2 soap_instantiate_tt__Layout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1746 */
#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (585)
/* complex XSD type 'tt:LayoutExtension': */
class SOAP_CMAC tt__LayoutExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutExtension, default initialized and not managed by a soap context
        virtual tt__LayoutExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutExtension); }
      public:
        /// Constructor with initializations
        tt__LayoutExtension() : __any(), soap() { }
        virtual ~tt__LayoutExtension() { }
        /// Friend allocator used by soap_new_tt__LayoutExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1749 */
#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (586)
/* complex XSD type 'tt:CodingCapabilities': */
class SOAP_CMAC tt__CodingCapabilities {
      public:
        /// Optional element 'tt:AudioEncodingCapabilities' of XSD type 'tt:AudioEncoderConfigurationOptions'
        tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;
        /// Optional element 'tt:AudioDecodingCapabilities' of XSD type 'tt:AudioDecoderConfigurationOptions'
        tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;
        /// Required element 'tt:VideoDecodingCapabilities' of XSD type 'tt:VideoDecoderConfigurationOptions'
        tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CodingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CodingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CodingCapabilities, default initialized and not managed by a soap context
        virtual tt__CodingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CodingCapabilities); }
      public:
        /// Constructor with initializations
        tt__CodingCapabilities() : AudioEncodingCapabilities(), AudioDecodingCapabilities(), VideoDecodingCapabilities(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__CodingCapabilities() { }
        /// Friend allocator used by soap_new_tt__CodingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__CodingCapabilities * SOAP_FMAC2 soap_instantiate_tt__CodingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1752 */
#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (587)
/* complex XSD type 'tt:LayoutOptions': */
class SOAP_CMAC tt__LayoutOptions {
      public:
        /// Required element 'tt:PaneLayoutOptions' of XSD type 'tt:PaneLayoutOptions'
        std::vector<tt__PaneLayoutOptions *> PaneLayoutOptions;
        /// Optional element 'tt:Extension' of XSD type 'tt:LayoutOptionsExtension'
        tt__LayoutOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutOptions, default initialized and not managed by a soap context
        virtual tt__LayoutOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutOptions); }
      public:
        /// Constructor with initializations
        tt__LayoutOptions() : PaneLayoutOptions(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__LayoutOptions() { }
        /// Friend allocator used by soap_new_tt__LayoutOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutOptions * SOAP_FMAC2 soap_instantiate_tt__LayoutOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1755 */
#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (588)
/* complex XSD type 'tt:LayoutOptionsExtension': */
class SOAP_CMAC tt__LayoutOptionsExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutOptionsExtension, default initialized and not managed by a soap context
        virtual tt__LayoutOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__LayoutOptionsExtension() : __any(), soap() { }
        virtual ~tt__LayoutOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__LayoutOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1758 */
#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (589)
/* complex XSD type 'tt:PaneLayoutOptions': */
class SOAP_CMAC tt__PaneLayoutOptions {
      public:
        /// Required element 'tt:Area' of XSD type 'tt:Rectangle'
        std::vector<tt__Rectangle *> Area;
        /// Optional element 'tt:Extension' of XSD type 'tt:PaneOptionExtension'
        tt__PaneOptionExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneLayoutOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneLayoutOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneLayoutOptions, default initialized and not managed by a soap context
        virtual tt__PaneLayoutOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneLayoutOptions); }
      public:
        /// Constructor with initializations
        tt__PaneLayoutOptions() : Area(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__PaneLayoutOptions() { }
        /// Friend allocator used by soap_new_tt__PaneLayoutOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneLayoutOptions * SOAP_FMAC2 soap_instantiate_tt__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1761 */
#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (590)
/* complex XSD type 'tt:PaneOptionExtension': */
class SOAP_CMAC tt__PaneOptionExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneOptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneOptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneOptionExtension, default initialized and not managed by a soap context
        virtual tt__PaneOptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneOptionExtension); }
      public:
        /// Constructor with initializations
        tt__PaneOptionExtension() : __any(), soap() { }
        virtual ~tt__PaneOptionExtension() { }
        /// Friend allocator used by soap_new_tt__PaneOptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneOptionExtension * SOAP_FMAC2 soap_instantiate_tt__PaneOptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1764 */
#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (591)
/* complex XSD type 'tt:Receiver': */
class SOAP_CMAC tt__Receiver {
      public:
        /// Required element 'tt:Token' of XSD type 'tt:ReferenceToken'
        std::string Token;
        /// Required element 'tt:Configuration' of XSD type 'tt:ReceiverConfiguration'
        tt__ReceiverConfiguration *Configuration;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Receiver
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Receiver; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Receiver, default initialized and not managed by a soap context
        virtual tt__Receiver *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Receiver); }
      public:
        /// Constructor with initializations
        tt__Receiver() : Token(), Configuration(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__Receiver() { }
        /// Friend allocator used by soap_new_tt__Receiver(struct soap*, int)
        friend SOAP_FMAC1 tt__Receiver * SOAP_FMAC2 soap_instantiate_tt__Receiver(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1767 */
#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (592)
/* complex XSD type 'tt:ReceiverConfiguration': */
class SOAP_CMAC tt__ReceiverConfiguration {
      public:
        /// Required element 'tt:Mode' of XSD type 'tt:ReceiverMode'
        tt__ReceiverMode Mode;
        /// Required element 'tt:MediaUri' of XSD type 'xsd:anyURI'
        std::string MediaUri;
        /// Required element 'tt:StreamSetup' of XSD type 'tt:StreamSetup'
        tt__StreamSetup *StreamSetup;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverConfiguration, default initialized and not managed by a soap context
        virtual tt__ReceiverConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverConfiguration); }
      public:
        /// Constructor with initializations
        tt__ReceiverConfiguration() : Mode(), MediaUri(), StreamSetup(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ReceiverConfiguration() { }
        /// Friend allocator used by soap_new_tt__ReceiverConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1770 */
#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (593)
/* complex XSD type 'tt:ReceiverStateInformation': */
class SOAP_CMAC tt__ReceiverStateInformation {
      public:
        /// Required element 'tt:State' of XSD type 'tt:ReceiverState'
        tt__ReceiverState State;
        /// Required element 'tt:AutoCreated' of XSD type 'xsd:boolean'
        bool AutoCreated;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverStateInformation, default initialized and not managed by a soap context
        virtual tt__ReceiverStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverStateInformation); }
      public:
        /// Constructor with initializations
        tt__ReceiverStateInformation() : State(), AutoCreated(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ReceiverStateInformation() { }
        /// Friend allocator used by soap_new_tt__ReceiverStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverStateInformation * SOAP_FMAC2 soap_instantiate_tt__ReceiverStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1773 */
#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (594)
/* complex XSD type 'tt:SourceReference': */
class SOAP_CMAC tt__SourceReference {
      public:
        /// Required element 'tt:Token' of XSD type 'tt:ReferenceToken'
        std::string Token;
        std::vector<char *> __any;
        /// optional attribute 'Type' of XSD type 'xsd:anyURI'
        std::string Type;	///< initialized with default value = "http://www.onvif.org/ver10/schema/Receiver"
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceReference
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceReference, default initialized and not managed by a soap context
        virtual tt__SourceReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceReference); }
      public:
        /// Constructor with initializations
        tt__SourceReference() : Token(), __any(), Type("http://www.onvif.org/ver10/schema/Receiver"), __anyAttribute(), soap() { }
        virtual ~tt__SourceReference() { }
        /// Friend allocator used by soap_new_tt__SourceReference(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceReference * SOAP_FMAC2 soap_instantiate_tt__SourceReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1776 */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (595)
/* complex XSD type 'tt:DateTimeRange': */
class SOAP_CMAC tt__DateTimeRange {
      public:
        /// Required element 'tt:From' of XSD type 'xsd:dateTime'
        time_t From;
        /// Required element 'tt:Until' of XSD type 'xsd:dateTime'
        time_t Until;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTimeRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTimeRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTimeRange, default initialized and not managed by a soap context
        virtual tt__DateTimeRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTimeRange); }
      public:
        /// Constructor with initializations
        tt__DateTimeRange() : From(), Until(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__DateTimeRange() { }
        /// Friend allocator used by soap_new_tt__DateTimeRange(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1779 */
#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (596)
/* complex XSD type 'tt:RecordingSummary': */
class SOAP_CMAC tt__RecordingSummary {
      public:
        /// Required element 'tt:DataFrom' of XSD type 'xsd:dateTime'
        time_t DataFrom;
        /// Required element 'tt:DataUntil' of XSD type 'xsd:dateTime'
        time_t DataUntil;
        /// Required element 'tt:NumberRecordings' of XSD type 'xsd:int'
        int NumberRecordings;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingSummary
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingSummary, default initialized and not managed by a soap context
        virtual tt__RecordingSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingSummary); }
      public:
        /// Constructor with initializations
        tt__RecordingSummary() : DataFrom(), DataUntil(), NumberRecordings(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingSummary() { }
        /// Friend allocator used by soap_new_tt__RecordingSummary(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingSummary * SOAP_FMAC2 soap_instantiate_tt__RecordingSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1782 */
#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (597)
/* complex XSD type 'tt:SearchScope': */
class SOAP_CMAC tt__SearchScope {
      public:
        /// Optional element 'tt:IncludedSources' of XSD type 'tt:SourceReference'
        std::vector<tt__SourceReference *> IncludedSources;
        /// Optional element 'tt:IncludedRecordings' of XSD type 'tt:RecordingReference'
        std::vector<std::string> IncludedRecordings;
        /// Optional element 'tt:RecordingInformationFilter' of XSD type 'tt:XPathExpression'
        std::string *RecordingInformationFilter;
        /// Optional element 'tt:Extension' of XSD type 'tt:SearchScopeExtension'
        tt__SearchScopeExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchScope
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchScope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchScope, default initialized and not managed by a soap context
        virtual tt__SearchScope *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchScope); }
      public:
        /// Constructor with initializations
        tt__SearchScope() : IncludedSources(), IncludedRecordings(), RecordingInformationFilter(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SearchScope() { }
        /// Friend allocator used by soap_new_tt__SearchScope(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchScope * SOAP_FMAC2 soap_instantiate_tt__SearchScope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1785 */
#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (598)
/* complex XSD type 'tt:SearchScopeExtension': */
class SOAP_CMAC tt__SearchScopeExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchScopeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchScopeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchScopeExtension, default initialized and not managed by a soap context
        virtual tt__SearchScopeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchScopeExtension); }
      public:
        /// Constructor with initializations
        tt__SearchScopeExtension() : __any(), soap() { }
        virtual ~tt__SearchScopeExtension() { }
        /// Friend allocator used by soap_new_tt__SearchScopeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchScopeExtension * SOAP_FMAC2 soap_instantiate_tt__SearchScopeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1791 */
#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (600)
/* complex XSD type 'tt:PTZPositionFilter': */
class SOAP_CMAC tt__PTZPositionFilter {
      public:
        /// Required element 'tt:MinPosition' of XSD type 'tt:PTZVector'
        tt__PTZVector *MinPosition;
        /// Required element 'tt:MaxPosition' of XSD type 'tt:PTZVector'
        tt__PTZVector *MaxPosition;
        /// Required element 'tt:EnterOrExit' of XSD type 'xsd:boolean'
        bool EnterOrExit;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPositionFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPositionFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPositionFilter, default initialized and not managed by a soap context
        virtual tt__PTZPositionFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPositionFilter); }
      public:
        /// Constructor with initializations
        tt__PTZPositionFilter() : MinPosition(), MaxPosition(), EnterOrExit(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZPositionFilter() { }
        /// Friend allocator used by soap_new_tt__PTZPositionFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPositionFilter * SOAP_FMAC2 soap_instantiate_tt__PTZPositionFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1794 */
#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (601)
/* complex XSD type 'tt:MetadataFilter': */
class SOAP_CMAC tt__MetadataFilter {
      public:
        /// Required element 'tt:MetadataStreamFilter' of XSD type 'tt:XPathExpression'
        std::string MetadataStreamFilter;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataFilter, default initialized and not managed by a soap context
        virtual tt__MetadataFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataFilter); }
      public:
        /// Constructor with initializations
        tt__MetadataFilter() : MetadataStreamFilter(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MetadataFilter() { }
        /// Friend allocator used by soap_new_tt__MetadataFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataFilter * SOAP_FMAC2 soap_instantiate_tt__MetadataFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1797 */
#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (602)
/* complex XSD type 'tt:FindRecordingResultList': */
class SOAP_CMAC tt__FindRecordingResultList {
      public:
        /// Required element 'tt:SearchState' of XSD type 'tt:SearchState'
        tt__SearchState SearchState;
        /// Optional element 'tt:RecordingInformation' of XSD type 'tt:RecordingInformation'
        std::vector<tt__RecordingInformation *> RecordingInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindRecordingResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindRecordingResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindRecordingResultList, default initialized and not managed by a soap context
        virtual tt__FindRecordingResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindRecordingResultList); }
      public:
        /// Constructor with initializations
        tt__FindRecordingResultList() : SearchState(), RecordingInformation(), soap() { }
        virtual ~tt__FindRecordingResultList() { }
        /// Friend allocator used by soap_new_tt__FindRecordingResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindRecordingResultList * SOAP_FMAC2 soap_instantiate_tt__FindRecordingResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1800 */
#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (603)
/* complex XSD type 'tt:FindEventResultList': */
class SOAP_CMAC tt__FindEventResultList {
      public:
        /// Required element 'tt:SearchState' of XSD type 'tt:SearchState'
        tt__SearchState SearchState;
        /// Optional element 'tt:Result' of XSD type 'tt:FindEventResult'
        std::vector<tt__FindEventResult *> Result;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindEventResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindEventResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindEventResultList, default initialized and not managed by a soap context
        virtual tt__FindEventResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindEventResultList); }
      public:
        /// Constructor with initializations
        tt__FindEventResultList() : SearchState(), Result(), soap() { }
        virtual ~tt__FindEventResultList() { }
        /// Friend allocator used by soap_new_tt__FindEventResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindEventResultList * SOAP_FMAC2 soap_instantiate_tt__FindEventResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1803 */
#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (604)
/* complex XSD type 'tt:FindEventResult': */
class SOAP_CMAC tt__FindEventResult {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:TrackToken' of XSD type 'tt:TrackReference'
        std::string TrackToken;
        /// Required element 'tt:Time' of XSD type 'xsd:dateTime'
        time_t Time;
        /// Required element 'tt:Event' of XSD type 'wsnt:NotificationMessageHolderType'
        wsnt__NotificationMessageHolderType *Event;
        /// Required element 'tt:StartStateEvent' of XSD type 'xsd:boolean'
        bool StartStateEvent;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindEventResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindEventResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindEventResult, default initialized and not managed by a soap context
        virtual tt__FindEventResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindEventResult); }
      public:
        /// Constructor with initializations
        tt__FindEventResult() : RecordingToken(), TrackToken(), Time(), Event(), StartStateEvent(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FindEventResult() { }
        /// Friend allocator used by soap_new_tt__FindEventResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindEventResult * SOAP_FMAC2 soap_instantiate_tt__FindEventResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1806 */
#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (605)
/* complex XSD type 'tt:FindPTZPositionResultList': */
class SOAP_CMAC tt__FindPTZPositionResultList {
      public:
        /// Required element 'tt:SearchState' of XSD type 'tt:SearchState'
        tt__SearchState SearchState;
        /// Optional element 'tt:Result' of XSD type 'tt:FindPTZPositionResult'
        std::vector<tt__FindPTZPositionResult *> Result;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindPTZPositionResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindPTZPositionResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindPTZPositionResultList, default initialized and not managed by a soap context
        virtual tt__FindPTZPositionResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindPTZPositionResultList); }
      public:
        /// Constructor with initializations
        tt__FindPTZPositionResultList() : SearchState(), Result(), soap() { }
        virtual ~tt__FindPTZPositionResultList() { }
        /// Friend allocator used by soap_new_tt__FindPTZPositionResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindPTZPositionResultList * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1809 */
#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (606)
/* complex XSD type 'tt:FindPTZPositionResult': */
class SOAP_CMAC tt__FindPTZPositionResult {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:TrackToken' of XSD type 'tt:TrackReference'
        std::string TrackToken;
        /// Required element 'tt:Time' of XSD type 'xsd:dateTime'
        time_t Time;
        /// Required element 'tt:Position' of XSD type 'tt:PTZVector'
        tt__PTZVector *Position;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindPTZPositionResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindPTZPositionResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindPTZPositionResult, default initialized and not managed by a soap context
        virtual tt__FindPTZPositionResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindPTZPositionResult); }
      public:
        /// Constructor with initializations
        tt__FindPTZPositionResult() : RecordingToken(), TrackToken(), Time(), Position(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FindPTZPositionResult() { }
        /// Friend allocator used by soap_new_tt__FindPTZPositionResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindPTZPositionResult * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1812 */
#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (607)
/* complex XSD type 'tt:FindMetadataResultList': */
class SOAP_CMAC tt__FindMetadataResultList {
      public:
        /// Required element 'tt:SearchState' of XSD type 'tt:SearchState'
        tt__SearchState SearchState;
        /// Optional element 'tt:Result' of XSD type 'tt:FindMetadataResult'
        std::vector<tt__FindMetadataResult *> Result;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindMetadataResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindMetadataResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindMetadataResultList, default initialized and not managed by a soap context
        virtual tt__FindMetadataResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindMetadataResultList); }
      public:
        /// Constructor with initializations
        tt__FindMetadataResultList() : SearchState(), Result(), soap() { }
        virtual ~tt__FindMetadataResultList() { }
        /// Friend allocator used by soap_new_tt__FindMetadataResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindMetadataResultList * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1815 */
#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (608)
/* complex XSD type 'tt:FindMetadataResult': */
class SOAP_CMAC tt__FindMetadataResult {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:TrackToken' of XSD type 'tt:TrackReference'
        std::string TrackToken;
        /// Required element 'tt:Time' of XSD type 'xsd:dateTime'
        time_t Time;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindMetadataResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindMetadataResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindMetadataResult, default initialized and not managed by a soap context
        virtual tt__FindMetadataResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindMetadataResult); }
      public:
        /// Constructor with initializations
        tt__FindMetadataResult() : RecordingToken(), TrackToken(), Time(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FindMetadataResult() { }
        /// Friend allocator used by soap_new_tt__FindMetadataResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindMetadataResult * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1818 */
#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (609)
/* complex XSD type 'tt:RecordingInformation': */
class SOAP_CMAC tt__RecordingInformation {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:Source' of XSD type 'tt:RecordingSourceInformation'
        tt__RecordingSourceInformation *Source;
        /// Optional element 'tt:EarliestRecording' of XSD type 'xsd:dateTime'
        time_t *EarliestRecording;
        /// Optional element 'tt:LatestRecording' of XSD type 'xsd:dateTime'
        time_t *LatestRecording;
        /// Required element 'tt:Content' of XSD type 'tt:Description'
        std::string Content;
        /// Optional element 'tt:Track' of XSD type 'tt:TrackInformation'
        std::vector<tt__TrackInformation *> Track;
        /// Required element 'tt:RecordingStatus' of XSD type 'tt:RecordingStatus'
        tt__RecordingStatus RecordingStatus;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingInformation, default initialized and not managed by a soap context
        virtual tt__RecordingInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingInformation); }
      public:
        /// Constructor with initializations
        tt__RecordingInformation() : RecordingToken(), Source(), EarliestRecording(), LatestRecording(), Content(), Track(), RecordingStatus(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1821 */
#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (610)
/* complex XSD type 'tt:RecordingSourceInformation': */
class SOAP_CMAC tt__RecordingSourceInformation {
      public:
        /// Required element 'tt:SourceId' of XSD type 'xsd:anyURI'
        std::string SourceId;
        /// Required element 'tt:Name' of XSD type 'tt:Name'
        std::string Name;
        /// Required element 'tt:Location' of XSD type 'tt:Description'
        std::string Location;
        /// Required element 'tt:Description' of XSD type 'tt:Description'
        std::string Description;
        /// Required element 'tt:Address' of XSD type 'xsd:anyURI'
        std::string Address;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingSourceInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingSourceInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingSourceInformation, default initialized and not managed by a soap context
        virtual tt__RecordingSourceInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingSourceInformation); }
      public:
        /// Constructor with initializations
        tt__RecordingSourceInformation() : SourceId(), Name(), Location(), Description(), Address(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingSourceInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingSourceInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingSourceInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingSourceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1824 */
#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (611)
/* complex XSD type 'tt:TrackInformation': */
class SOAP_CMAC tt__TrackInformation {
      public:
        /// Required element 'tt:TrackToken' of XSD type 'tt:TrackReference'
        std::string TrackToken;
        /// Required element 'tt:TrackType' of XSD type 'tt:TrackType'
        tt__TrackType TrackType;
        /// Required element 'tt:Description' of XSD type 'tt:Description'
        std::string Description;
        /// Required element 'tt:DataFrom' of XSD type 'xsd:dateTime'
        time_t DataFrom;
        /// Required element 'tt:DataTo' of XSD type 'xsd:dateTime'
        time_t DataTo;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackInformation, default initialized and not managed by a soap context
        virtual tt__TrackInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackInformation); }
      public:
        /// Constructor with initializations
        tt__TrackInformation() : TrackToken(), TrackType(), Description(), DataFrom(), DataTo(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__TrackInformation() { }
        /// Friend allocator used by soap_new_tt__TrackInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackInformation * SOAP_FMAC2 soap_instantiate_tt__TrackInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1827 */
#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (612)
/* complex XSD type 'tt:MediaAttributes': */
class SOAP_CMAC tt__MediaAttributes {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Optional element 'tt:TrackAttributes' of XSD type 'tt:TrackAttributes'
        std::vector<tt__TrackAttributes *> TrackAttributes;
        /// Required element 'tt:From' of XSD type 'xsd:dateTime'
        time_t From;
        /// Required element 'tt:Until' of XSD type 'xsd:dateTime'
        time_t Until;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaAttributes, default initialized and not managed by a soap context
        virtual tt__MediaAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaAttributes); }
      public:
        /// Constructor with initializations
        tt__MediaAttributes() : RecordingToken(), TrackAttributes(), From(), Until(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__MediaAttributes() { }
        /// Friend allocator used by soap_new_tt__MediaAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaAttributes * SOAP_FMAC2 soap_instantiate_tt__MediaAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1830 */
#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (613)
/* complex XSD type 'tt:TrackAttributes': */
class SOAP_CMAC tt__TrackAttributes {
      public:
        /// Required element 'tt:TrackInformation' of XSD type 'tt:TrackInformation'
        tt__TrackInformation *TrackInformation;
        /// Optional element 'tt:VideoAttributes' of XSD type 'tt:VideoAttributes'
        tt__VideoAttributes *VideoAttributes;
        /// Optional element 'tt:AudioAttributes' of XSD type 'tt:AudioAttributes'
        tt__AudioAttributes *AudioAttributes;
        /// Optional element 'tt:MetadataAttributes' of XSD type 'tt:MetadataAttributes'
        tt__MetadataAttributes *MetadataAttributes;
        /// Optional element 'tt:Extension' of XSD type 'tt:TrackAttributesExtension'
        tt__TrackAttributesExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackAttributes, default initialized and not managed by a soap context
        virtual tt__TrackAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackAttributes); }
      public:
        /// Constructor with initializations
        tt__TrackAttributes() : TrackInformation(), VideoAttributes(), AudioAttributes(), MetadataAttributes(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__TrackAttributes() { }
        /// Friend allocator used by soap_new_tt__TrackAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackAttributes * SOAP_FMAC2 soap_instantiate_tt__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1833 */
#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (614)
/* complex XSD type 'tt:TrackAttributesExtension': */
class SOAP_CMAC tt__TrackAttributesExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackAttributesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackAttributesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackAttributesExtension, default initialized and not managed by a soap context
        virtual tt__TrackAttributesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackAttributesExtension); }
      public:
        /// Constructor with initializations
        tt__TrackAttributesExtension() : __any(), soap() { }
        virtual ~tt__TrackAttributesExtension() { }
        /// Friend allocator used by soap_new_tt__TrackAttributesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackAttributesExtension * SOAP_FMAC2 soap_instantiate_tt__TrackAttributesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1836 */
#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (615)
/* complex XSD type 'tt:VideoAttributes': */
class SOAP_CMAC tt__VideoAttributes {
      public:
        /// Optional element 'tt:Bitrate' of XSD type 'xsd:int'
        int *Bitrate;
        /// Required element 'tt:Width' of XSD type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XSD type 'xsd:int'
        int Height;
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Required element 'tt:Framerate' of XSD type 'xsd:float'
        float Framerate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoAttributes, default initialized and not managed by a soap context
        virtual tt__VideoAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoAttributes); }
      public:
        /// Constructor with initializations
        tt__VideoAttributes() : Bitrate(), Width(), Height(), Encoding(), Framerate(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__VideoAttributes() { }
        /// Friend allocator used by soap_new_tt__VideoAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoAttributes * SOAP_FMAC2 soap_instantiate_tt__VideoAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1839 */
#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (616)
/* complex XSD type 'tt:AudioAttributes': */
class SOAP_CMAC tt__AudioAttributes {
      public:
        /// Optional element 'tt:Bitrate' of XSD type 'xsd:int'
        int *Bitrate;
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Required element 'tt:Samplerate' of XSD type 'xsd:int'
        int Samplerate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioAttributes, default initialized and not managed by a soap context
        virtual tt__AudioAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioAttributes); }
      public:
        /// Constructor with initializations
        tt__AudioAttributes() : Bitrate(), Encoding(), Samplerate(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioAttributes() { }
        /// Friend allocator used by soap_new_tt__AudioAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioAttributes * SOAP_FMAC2 soap_instantiate_tt__AudioAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1842 */
#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (617)
/* complex XSD type 'tt:MetadataAttributes': */
class SOAP_CMAC tt__MetadataAttributes {
      public:
        /// Required element 'tt:CanContainPTZ' of XSD type 'xsd:boolean'
        bool CanContainPTZ;
        /// Required element 'tt:CanContainAnalytics' of XSD type 'xsd:boolean'
        bool CanContainAnalytics;
        /// Required element 'tt:CanContainNotifications' of XSD type 'xsd:boolean'
        bool CanContainNotifications;
        std::vector<char *> __any;
        /// optional attribute 'PtzSpaces' of XSD type 'tt:StringAttrList'
        std::string *PtzSpaces;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataAttributes, default initialized and not managed by a soap context
        virtual tt__MetadataAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataAttributes); }
      public:
        /// Constructor with initializations
        tt__MetadataAttributes() : CanContainPTZ(), CanContainAnalytics(), CanContainNotifications(), __any(), PtzSpaces(), __anyAttribute(), soap() { }
        virtual ~tt__MetadataAttributes() { }
        /// Friend allocator used by soap_new_tt__MetadataAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataAttributes * SOAP_FMAC2 soap_instantiate_tt__MetadataAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1845 */
#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (618)
/* complex XSD type 'tt:RecordingConfiguration': */
class SOAP_CMAC tt__RecordingConfiguration {
      public:
        /// Required element 'tt:Source' of XSD type 'tt:RecordingSourceInformation'
        tt__RecordingSourceInformation *Source;
        /// Required element 'tt:Content' of XSD type 'tt:Description'
        std::string Content;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 MaximumRetentionTime;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingConfiguration, default initialized and not managed by a soap context
        virtual tt__RecordingConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingConfiguration); }
      public:
        /// Constructor with initializations
        tt__RecordingConfiguration() : Source(), Content(), MaximumRetentionTime(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingConfiguration() { }
        /// Friend allocator used by soap_new_tt__RecordingConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1848 */
#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (619)
/* complex XSD type 'tt:TrackConfiguration': */
class SOAP_CMAC tt__TrackConfiguration {
      public:
        /// Required element 'tt:TrackType' of XSD type 'tt:TrackType'
        tt__TrackType TrackType;
        /// Required element 'tt:Description' of XSD type 'tt:Description'
        std::string Description;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackConfiguration, default initialized and not managed by a soap context
        virtual tt__TrackConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackConfiguration); }
      public:
        /// Constructor with initializations
        tt__TrackConfiguration() : TrackType(), Description(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__TrackConfiguration() { }
        /// Friend allocator used by soap_new_tt__TrackConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackConfiguration * SOAP_FMAC2 soap_instantiate_tt__TrackConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1851 */
#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (620)
/* complex XSD type 'tt:GetRecordingsResponseItem': */
class SOAP_CMAC tt__GetRecordingsResponseItem {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:Configuration' of XSD type 'tt:RecordingConfiguration'
        tt__RecordingConfiguration *Configuration;
        /// Required element 'tt:Tracks' of XSD type 'tt:GetTracksResponseList'
        tt__GetTracksResponseList *Tracks;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetRecordingsResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetRecordingsResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetRecordingsResponseItem, default initialized and not managed by a soap context
        virtual tt__GetRecordingsResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetRecordingsResponseItem); }
      public:
        /// Constructor with initializations
        tt__GetRecordingsResponseItem() : RecordingToken(), Configuration(), Tracks(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__GetRecordingsResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetRecordingsResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetRecordingsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingsResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1854 */
#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (621)
/* complex XSD type 'tt:GetTracksResponseList': */
class SOAP_CMAC tt__GetTracksResponseList {
      public:
        /// Optional element 'tt:Track' of XSD type 'tt:GetTracksResponseItem'
        std::vector<tt__GetTracksResponseItem *> Track;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetTracksResponseList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetTracksResponseList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetTracksResponseList, default initialized and not managed by a soap context
        virtual tt__GetTracksResponseList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetTracksResponseList); }
      public:
        /// Constructor with initializations
        tt__GetTracksResponseList() : Track(), __anyAttribute(), soap() { }
        virtual ~tt__GetTracksResponseList() { }
        /// Friend allocator used by soap_new_tt__GetTracksResponseList(struct soap*, int)
        friend SOAP_FMAC1 tt__GetTracksResponseList * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1857 */
#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (622)
/* complex XSD type 'tt:GetTracksResponseItem': */
class SOAP_CMAC tt__GetTracksResponseItem {
      public:
        /// Required element 'tt:TrackToken' of XSD type 'tt:TrackReference'
        std::string TrackToken;
        /// Required element 'tt:Configuration' of XSD type 'tt:TrackConfiguration'
        tt__TrackConfiguration *Configuration;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetTracksResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetTracksResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetTracksResponseItem, default initialized and not managed by a soap context
        virtual tt__GetTracksResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetTracksResponseItem); }
      public:
        /// Constructor with initializations
        tt__GetTracksResponseItem() : TrackToken(), Configuration(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__GetTracksResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetTracksResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetTracksResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1860 */
#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (623)
/* complex XSD type 'tt:RecordingJobConfiguration': */
class SOAP_CMAC tt__RecordingJobConfiguration {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:Mode' of XSD type 'tt:RecordingJobMode'
        std::string Mode;
        /// Required element 'tt:Priority' of XSD type 'xsd:int'
        int Priority;
        /// Optional element 'tt:Source' of XSD type 'tt:RecordingJobSource'
        std::vector<tt__RecordingJobSource *> Source;
        /// Optional element 'tt:Extension' of XSD type 'tt:RecordingJobConfigurationExtension'
        tt__RecordingJobConfigurationExtension *Extension;
        /// optional attribute 'ScheduleToken' of XSD type 'xsd:string'
        std::string *ScheduleToken;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobConfiguration, default initialized and not managed by a soap context
        virtual tt__RecordingJobConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobConfiguration); }
      public:
        /// Constructor with initializations
        tt__RecordingJobConfiguration() : RecordingToken(), Mode(), Priority(), Source(), Extension(), ScheduleToken(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobConfiguration() { }
        /// Friend allocator used by soap_new_tt__RecordingJobConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1863 */
#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (624)
/* complex XSD type 'tt:RecordingJobConfigurationExtension': */
class SOAP_CMAC tt__RecordingJobConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__RecordingJobConfigurationExtension() : __any(), soap() { }
        virtual ~tt__RecordingJobConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1866 */
#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (625)
/* complex XSD type 'tt:RecordingJobSource': */
class SOAP_CMAC tt__RecordingJobSource {
      public:
        /// Optional element 'tt:SourceToken' of XSD type 'tt:SourceReference'
        tt__SourceReference *SourceToken;
        /// Optional element 'tt:AutoCreateReceiver' of XSD type 'xsd:boolean'
        bool *AutoCreateReceiver;
        /// Optional element 'tt:Tracks' of XSD type 'tt:RecordingJobTrack'
        std::vector<tt__RecordingJobTrack *> Tracks;
        /// Optional element 'tt:Extension' of XSD type 'tt:RecordingJobSourceExtension'
        tt__RecordingJobSourceExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobSource, default initialized and not managed by a soap context
        virtual tt__RecordingJobSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobSource); }
      public:
        /// Constructor with initializations
        tt__RecordingJobSource() : SourceToken(), AutoCreateReceiver(), Tracks(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobSource() { }
        /// Friend allocator used by soap_new_tt__RecordingJobSource(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1869 */
#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (626)
/* complex XSD type 'tt:RecordingJobSourceExtension': */
class SOAP_CMAC tt__RecordingJobSourceExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobSourceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobSourceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobSourceExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobSourceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobSourceExtension); }
      public:
        /// Constructor with initializations
        tt__RecordingJobSourceExtension() : __any(), soap() { }
        virtual ~tt__RecordingJobSourceExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobSourceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobSourceExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSourceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1872 */
#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (627)
/* complex XSD type 'tt:RecordingJobTrack': */
class SOAP_CMAC tt__RecordingJobTrack {
      public:
        /// Required element 'tt:SourceTag' of XSD type 'xsd:string'
        std::string SourceTag;
        /// Required element 'tt:Destination' of XSD type 'tt:TrackReference'
        std::string Destination;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobTrack
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobTrack, default initialized and not managed by a soap context
        virtual tt__RecordingJobTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobTrack); }
      public:
        /// Constructor with initializations
        tt__RecordingJobTrack() : SourceTag(), Destination(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobTrack() { }
        /// Friend allocator used by soap_new_tt__RecordingJobTrack(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1875 */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (628)
/* complex XSD type 'tt:RecordingJobStateInformation': */
class SOAP_CMAC tt__RecordingJobStateInformation {
      public:
        /// Required element 'tt:RecordingToken' of XSD type 'tt:RecordingReference'
        std::string RecordingToken;
        /// Required element 'tt:State' of XSD type 'tt:RecordingJobState'
        std::string State;
        /// Optional element 'tt:Sources' of XSD type 'tt:RecordingJobStateSource'
        std::vector<tt__RecordingJobStateSource *> Sources;
        /// Optional element 'tt:Extension' of XSD type 'tt:RecordingJobStateInformationExtension'
        tt__RecordingJobStateInformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateInformation, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateInformation); }
      public:
        /// Constructor with initializations
        tt__RecordingJobStateInformation() : RecordingToken(), State(), Sources(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobStateInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1878 */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (629)
/* complex XSD type 'tt:RecordingJobStateInformationExtension': */
class SOAP_CMAC tt__RecordingJobStateInformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateInformationExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateInformationExtension); }
      public:
        /// Constructor with initializations
        tt__RecordingJobStateInformationExtension() : __any(), soap() { }
        virtual ~tt__RecordingJobStateInformationExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1881 */
#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (630)
/* complex XSD type 'tt:RecordingJobStateSource': */
class SOAP_CMAC tt__RecordingJobStateSource {
      public:
        /// Required element 'tt:SourceToken' of XSD type 'tt:SourceReference'
        tt__SourceReference *SourceToken;
        /// Required element 'tt:State' of XSD type 'tt:RecordingJobState'
        std::string State;
        /// Required element 'tt:Tracks' of XSD type 'tt:RecordingJobStateTracks'
        tt__RecordingJobStateTracks *Tracks;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateSource, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateSource); }
      public:
        /// Constructor with initializations
        tt__RecordingJobStateSource() : SourceToken(), State(), Tracks(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobStateSource() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateSource(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1884 */
#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (631)
/* complex XSD type 'tt:RecordingJobStateTracks': */
class SOAP_CMAC tt__RecordingJobStateTracks {
      public:
        /// Optional element 'tt:Track' of XSD type 'tt:RecordingJobStateTrack'
        std::vector<tt__RecordingJobStateTrack *> Track;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateTracks
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateTracks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateTracks, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateTracks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateTracks); }
      public:
        /// Constructor with initializations
        tt__RecordingJobStateTracks() : Track(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobStateTracks() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateTracks(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateTracks * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTracks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1887 */
#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (632)
/* complex XSD type 'tt:RecordingJobStateTrack': */
class SOAP_CMAC tt__RecordingJobStateTrack {
      public:
        /// Required element 'tt:SourceTag' of XSD type 'xsd:string'
        std::string SourceTag;
        /// Required element 'tt:Destination' of XSD type 'tt:TrackReference'
        std::string Destination;
        /// Optional element 'tt:Error' of XSD type 'xsd:string'
        std::string *Error;
        /// Required element 'tt:State' of XSD type 'tt:RecordingJobState'
        std::string State;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateTrack
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateTrack, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateTrack); }
      public:
        /// Constructor with initializations
        tt__RecordingJobStateTrack() : SourceTag(), Destination(), Error(), State(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__RecordingJobStateTrack() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateTrack(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1890 */
#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (633)
/* complex XSD type 'tt:GetRecordingJobsResponseItem': */
class SOAP_CMAC tt__GetRecordingJobsResponseItem {
      public:
        /// Required element 'tt:JobToken' of XSD type 'tt:RecordingJobReference'
        std::string JobToken;
        /// Required element 'tt:JobConfiguration' of XSD type 'tt:RecordingJobConfiguration'
        tt__RecordingJobConfiguration *JobConfiguration;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetRecordingJobsResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetRecordingJobsResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetRecordingJobsResponseItem, default initialized and not managed by a soap context
        virtual tt__GetRecordingJobsResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetRecordingJobsResponseItem); }
      public:
        /// Constructor with initializations
        tt__GetRecordingJobsResponseItem() : JobToken(), JobConfiguration(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__GetRecordingJobsResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetRecordingJobsResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetRecordingJobsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingJobsResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1893 */
#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (634)
/* complex XSD type 'tt:ReplayConfiguration': */
class SOAP_CMAC tt__ReplayConfiguration {
      public:
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 SessionTimeout;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReplayConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReplayConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReplayConfiguration, default initialized and not managed by a soap context
        virtual tt__ReplayConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReplayConfiguration); }
      public:
        /// Constructor with initializations
        tt__ReplayConfiguration() : SessionTimeout(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ReplayConfiguration() { }
        /// Friend allocator used by soap_new_tt__ReplayConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__ReplayConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReplayConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1899 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (636)
/* complex XSD type 'tt:AnalyticsDeviceEngineConfiguration': */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration {
      public:
        /// Required element 'tt:EngineConfiguration' of XSD type 'tt:EngineConfiguration'
        std::vector<tt__EngineConfiguration *> EngineConfiguration;
        /// Optional element 'tt:Extension' of XSD type 'tt:AnalyticsDeviceEngineConfigurationExtension'
        tt__AnalyticsDeviceEngineConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceEngineConfiguration); }
      public:
        /// Constructor with initializations
        tt__AnalyticsDeviceEngineConfiguration() : EngineConfiguration(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1902 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (637)
/* complex XSD type 'tt:AnalyticsDeviceEngineConfigurationExtension': */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceEngineConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__AnalyticsDeviceEngineConfigurationExtension() : __any(), soap() { }
        virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1905 */
#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (638)
/* complex XSD type 'tt:EngineConfiguration': */
class SOAP_CMAC tt__EngineConfiguration {
      public:
        /// Required element 'tt:VideoAnalyticsConfiguration' of XSD type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;
        /// Required element 'tt:AnalyticsEngineInputInfo' of XSD type 'tt:AnalyticsEngineInputInfo'
        tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EngineConfiguration, default initialized and not managed by a soap context
        virtual tt__EngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EngineConfiguration); }
      public:
        /// Constructor with initializations
        tt__EngineConfiguration() : VideoAnalyticsConfiguration(), AnalyticsEngineInputInfo(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__EngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__EngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__EngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1908 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (639)
/* complex XSD type 'tt:AnalyticsEngineInputInfo': */
class SOAP_CMAC tt__AnalyticsEngineInputInfo {
      public:
        /// Optional element 'tt:InputInfo' of XSD type 'tt:Config'
        tt__Config *InputInfo;
        /// Optional element 'tt:Extension' of XSD type 'tt:AnalyticsEngineInputInfoExtension'
        tt__AnalyticsEngineInputInfoExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInputInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInputInfo, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInputInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInputInfo); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineInputInfo() : InputInfo(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsEngineInputInfo() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInputInfo(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInputInfo * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1911 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (640)
/* complex XSD type 'tt:AnalyticsEngineInputInfoExtension': */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInputInfoExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInputInfoExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInputInfoExtension); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineInputInfoExtension() : __any(), soap() { }
        virtual ~tt__AnalyticsEngineInputInfoExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInputInfoExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfoExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1917 */
#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (642)
/* complex XSD type 'tt:SourceIdentification': */
class SOAP_CMAC tt__SourceIdentification {
      public:
        /// Required element 'tt:Name' of XSD type 'xsd:string'
        std::string Name;
        /// Required element 'tt:Token' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> Token;
        /// Optional element 'tt:Extension' of XSD type 'tt:SourceIdentificationExtension'
        tt__SourceIdentificationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceIdentification
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceIdentification; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceIdentification, default initialized and not managed by a soap context
        virtual tt__SourceIdentification *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceIdentification); }
      public:
        /// Constructor with initializations
        tt__SourceIdentification() : Name(), Token(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__SourceIdentification() { }
        /// Friend allocator used by soap_new_tt__SourceIdentification(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceIdentification * SOAP_FMAC2 soap_instantiate_tt__SourceIdentification(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1920 */
#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (643)
/* complex XSD type 'tt:SourceIdentificationExtension': */
class SOAP_CMAC tt__SourceIdentificationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceIdentificationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceIdentificationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceIdentificationExtension, default initialized and not managed by a soap context
        virtual tt__SourceIdentificationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceIdentificationExtension); }
      public:
        /// Constructor with initializations
        tt__SourceIdentificationExtension() : __any(), soap() { }
        virtual ~tt__SourceIdentificationExtension() { }
        /// Friend allocator used by soap_new_tt__SourceIdentificationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceIdentificationExtension * SOAP_FMAC2 soap_instantiate_tt__SourceIdentificationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1923 */
#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (644)
/* complex XSD type 'tt:MetadataInput': */
class SOAP_CMAC tt__MetadataInput {
      public:
        /// Optional element 'tt:MetadataConfig' of XSD type 'tt:Config'
        std::vector<tt__Config *> MetadataConfig;
        /// Optional element 'tt:Extension' of XSD type 'tt:MetadataInputExtension'
        tt__MetadataInputExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataInput, default initialized and not managed by a soap context
        virtual tt__MetadataInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataInput); }
      public:
        /// Constructor with initializations
        tt__MetadataInput() : MetadataConfig(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__MetadataInput() { }
        /// Friend allocator used by soap_new_tt__MetadataInput(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataInput * SOAP_FMAC2 soap_instantiate_tt__MetadataInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1926 */
#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (645)
/* complex XSD type 'tt:MetadataInputExtension': */
class SOAP_CMAC tt__MetadataInputExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataInputExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataInputExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataInputExtension, default initialized and not managed by a soap context
        virtual tt__MetadataInputExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataInputExtension); }
      public:
        /// Constructor with initializations
        tt__MetadataInputExtension() : __any(), soap() { }
        virtual ~tt__MetadataInputExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataInputExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataInputExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataInputExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1932 */
#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (647)
/* complex XSD type 'tt:AnalyticsStateInformation': */
class SOAP_CMAC tt__AnalyticsStateInformation {
      public:
        /// Required element 'tt:AnalyticsEngineControlToken' of XSD type 'tt:ReferenceToken'
        std::string AnalyticsEngineControlToken;
        /// Required element 'tt:State' of XSD type 'tt:AnalyticsState'
        tt__AnalyticsState *State;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsStateInformation, default initialized and not managed by a soap context
        virtual tt__AnalyticsStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsStateInformation); }
      public:
        /// Constructor with initializations
        tt__AnalyticsStateInformation() : AnalyticsEngineControlToken(), State(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsStateInformation() { }
        /// Friend allocator used by soap_new_tt__AnalyticsStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsStateInformation * SOAP_FMAC2 soap_instantiate_tt__AnalyticsStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1935 */
#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (648)
/* complex XSD type 'tt:AnalyticsState': */
class SOAP_CMAC tt__AnalyticsState {
      public:
        /// Optional element 'tt:Error' of XSD type 'xsd:string'
        std::string *Error;
        /// Required element 'tt:State' of XSD type 'xsd:string'
        std::string State;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsState
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsState, default initialized and not managed by a soap context
        virtual tt__AnalyticsState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsState); }
      public:
        /// Constructor with initializations
        tt__AnalyticsState() : Error(), State(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AnalyticsState() { }
        /// Friend allocator used by soap_new_tt__AnalyticsState(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsState * SOAP_FMAC2 soap_instantiate_tt__AnalyticsState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1938 */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (649)
/* complex XSD type 'tt:ActionEngineEventPayload': */
class SOAP_CMAC tt__ActionEngineEventPayload {
      public:
        /// Optional element 'tt:RequestInfo' of XSD type 'SOAP-ENV:Envelope'
        struct SOAP_ENV__Envelope *RequestInfo;
        /// Optional element 'tt:ResponseInfo' of XSD type 'SOAP-ENV:Envelope'
        struct SOAP_ENV__Envelope *ResponseInfo;
        /// Optional element 'tt:Fault' of XSD type 'SOAP-ENV:Fault'
        struct SOAP_ENV__Fault *Fault;
        /// Optional element 'tt:Extension' of XSD type 'tt:ActionEngineEventPayloadExtension'
        tt__ActionEngineEventPayloadExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ActionEngineEventPayload
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActionEngineEventPayload; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActionEngineEventPayload, default initialized and not managed by a soap context
        virtual tt__ActionEngineEventPayload *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActionEngineEventPayload); }
      public:
        /// Constructor with initializations
        tt__ActionEngineEventPayload() : RequestInfo(), ResponseInfo(), Fault(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ActionEngineEventPayload() { }
        /// Friend allocator used by soap_new_tt__ActionEngineEventPayload(struct soap*, int)
        friend SOAP_FMAC1 tt__ActionEngineEventPayload * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1941 */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (650)
/* complex XSD type 'tt:ActionEngineEventPayloadExtension': */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ActionEngineEventPayloadExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActionEngineEventPayloadExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActionEngineEventPayloadExtension, default initialized and not managed by a soap context
        virtual tt__ActionEngineEventPayloadExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActionEngineEventPayloadExtension); }
      public:
        /// Constructor with initializations
        tt__ActionEngineEventPayloadExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__ActionEngineEventPayloadExtension() { }
        /// Friend allocator used by soap_new_tt__ActionEngineEventPayloadExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ActionEngineEventPayloadExtension * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayloadExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1944 */
#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (651)
/* complex XSD type 'tt:AudioClassCandidate': */
class SOAP_CMAC tt__AudioClassCandidate {
      public:
        /// Required element 'tt:Type' of XSD type 'tt:AudioClassType'
        std::string Type;
        /// Required element 'tt:Likelihood' of XSD type 'xsd:float'
        float Likelihood;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassCandidate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassCandidate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassCandidate, default initialized and not managed by a soap context
        virtual tt__AudioClassCandidate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassCandidate); }
      public:
        /// Constructor with initializations
        tt__AudioClassCandidate() : Type(), Likelihood(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioClassCandidate() { }
        /// Friend allocator used by soap_new_tt__AudioClassCandidate(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassCandidate * SOAP_FMAC2 soap_instantiate_tt__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1947 */
#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (652)
/* complex XSD type 'tt:AudioClassDescriptor': */
class SOAP_CMAC tt__AudioClassDescriptor {
      public:
        /// Optional element 'tt:ClassCandidate' of XSD type 'tt:AudioClassCandidate'
        std::vector<tt__AudioClassCandidate *> ClassCandidate;
        /// Optional element 'tt:Extension' of XSD type 'tt:AudioClassDescriptorExtension'
        tt__AudioClassDescriptorExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassDescriptor
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassDescriptor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassDescriptor, default initialized and not managed by a soap context
        virtual tt__AudioClassDescriptor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassDescriptor); }
      public:
        /// Constructor with initializations
        tt__AudioClassDescriptor() : ClassCandidate(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__AudioClassDescriptor() { }
        /// Friend allocator used by soap_new_tt__AudioClassDescriptor(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassDescriptor * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1950 */
#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (653)
/* complex XSD type 'tt:AudioClassDescriptorExtension': */
class SOAP_CMAC tt__AudioClassDescriptorExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassDescriptorExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassDescriptorExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassDescriptorExtension, default initialized and not managed by a soap context
        virtual tt__AudioClassDescriptorExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassDescriptorExtension); }
      public:
        /// Constructor with initializations
        tt__AudioClassDescriptorExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__AudioClassDescriptorExtension() { }
        /// Friend allocator used by soap_new_tt__AudioClassDescriptorExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1953 */
#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (654)
/* complex XSD type 'tt:ActiveConnection': */
class SOAP_CMAC tt__ActiveConnection {
      public:
        /// Required element 'tt:CurrentBitrate' of XSD type 'xsd:float'
        float CurrentBitrate;
        /// Required element 'tt:CurrentFps' of XSD type 'xsd:float'
        float CurrentFps;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ActiveConnection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActiveConnection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActiveConnection, default initialized and not managed by a soap context
        virtual tt__ActiveConnection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActiveConnection); }
      public:
        /// Constructor with initializations
        tt__ActiveConnection() : CurrentBitrate(), CurrentFps(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__ActiveConnection() { }
        /// Friend allocator used by soap_new_tt__ActiveConnection(struct soap*, int)
        friend SOAP_FMAC1 tt__ActiveConnection * SOAP_FMAC2 soap_instantiate_tt__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1956 */
#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (655)
/* complex XSD type 'tt:ProfileStatus': */
class SOAP_CMAC tt__ProfileStatus {
      public:
        /// Optional element 'tt:ActiveConnections' of XSD type 'tt:ActiveConnection'
        std::vector<tt__ActiveConnection *> ActiveConnections;
        /// Optional element 'tt:Extension' of XSD type 'tt:ProfileStatusExtension'
        tt__ProfileStatusExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileStatus, default initialized and not managed by a soap context
        virtual tt__ProfileStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileStatus); }
      public:
        /// Constructor with initializations
        tt__ProfileStatus() : ActiveConnections(), Extension(), soap() { }
        virtual ~tt__ProfileStatus() { }
        /// Friend allocator used by soap_new_tt__ProfileStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileStatus * SOAP_FMAC2 soap_instantiate_tt__ProfileStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1959 */
#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (656)
/* complex XSD type 'tt:ProfileStatusExtension': */
class SOAP_CMAC tt__ProfileStatusExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileStatusExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileStatusExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileStatusExtension, default initialized and not managed by a soap context
        virtual tt__ProfileStatusExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileStatusExtension); }
      public:
        /// Constructor with initializations
        tt__ProfileStatusExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__ProfileStatusExtension() { }
        /// Friend allocator used by soap_new_tt__ProfileStatusExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileStatusExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileStatusExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1965 */
#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (658)
/* complex XSD type 'tt:OSDPosConfiguration': */
class SOAP_CMAC tt__OSDPosConfiguration {
      public:
        /// Required element 'tt:Type' of XSD type 'xsd:string'
        std::string Type;
        /// Optional element 'tt:Pos' of XSD type 'tt:Vector'
        tt__Vector *Pos;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDPosConfigurationExtension'
        tt__OSDPosConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDPosConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDPosConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDPosConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDPosConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDPosConfiguration); }
      public:
        /// Constructor with initializations
        tt__OSDPosConfiguration() : Type(), Pos(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__OSDPosConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDPosConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1968 */
#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (659)
/* complex XSD type 'tt:OSDPosConfigurationExtension': */
class SOAP_CMAC tt__OSDPosConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDPosConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDPosConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDPosConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDPosConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDPosConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__OSDPosConfigurationExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDPosConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDPosConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1971 */
#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (660)
/* complex XSD type 'tt:OSDColor': */
class SOAP_CMAC tt__OSDColor {
      public:
        /// Required element 'tt:Color' of XSD type 'tt:Color'
        tt__Color *Color;
        /// optional attribute 'Transparent' of XSD type 'xsd:int'
        int *Transparent;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColor
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColor, default initialized and not managed by a soap context
        virtual tt__OSDColor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColor); }
      public:
        /// Constructor with initializations
        tt__OSDColor() : Color(), Transparent(), __anyAttribute(), soap() { }
        virtual ~tt__OSDColor() { }
        /// Friend allocator used by soap_new_tt__OSDColor(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColor * SOAP_FMAC2 soap_instantiate_tt__OSDColor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1974 */
#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (661)
/* complex XSD type 'tt:OSDTextConfiguration': */
class SOAP_CMAC tt__OSDTextConfiguration {
      public:
        /// Required element 'tt:Type' of XSD type 'xsd:string'
        std::string Type;
        /// Optional element 'tt:DateFormat' of XSD type 'xsd:string'
        std::string *DateFormat;
        /// Optional element 'tt:TimeFormat' of XSD type 'xsd:string'
        std::string *TimeFormat;
        /// Optional element 'tt:FontSize' of XSD type 'xsd:int'
        int *FontSize;
        /// Optional element 'tt:FontColor' of XSD type 'tt:OSDColor'
        tt__OSDColor *FontColor;
        /// Optional element 'tt:BackgroundColor' of XSD type 'tt:OSDColor'
        tt__OSDColor *BackgroundColor;
        /// Optional element 'tt:PlainText' of XSD type 'xsd:string'
        std::string *PlainText;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDTextConfigurationExtension'
        tt__OSDTextConfigurationExtension *Extension;
        /// optional attribute 'IsPersistentText' of XSD type 'xsd:boolean'
        bool *IsPersistentText;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDTextConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextConfiguration); }
      public:
        /// Constructor with initializations
        tt__OSDTextConfiguration() : Type(), DateFormat(), TimeFormat(), FontSize(), FontColor(), BackgroundColor(), PlainText(), Extension(), IsPersistentText(), __anyAttribute(), soap() { }
        virtual ~tt__OSDTextConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDTextConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1977 */
#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (662)
/* complex XSD type 'tt:OSDTextConfigurationExtension': */
class SOAP_CMAC tt__OSDTextConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDTextConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__OSDTextConfigurationExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDTextConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDTextConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1980 */
#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (663)
/* complex XSD type 'tt:OSDImgConfiguration': */
class SOAP_CMAC tt__OSDImgConfiguration {
      public:
        /// Required element 'tt:ImgPath' of XSD type 'xsd:anyURI'
        std::string ImgPath;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDImgConfigurationExtension'
        tt__OSDImgConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDImgConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgConfiguration); }
      public:
        /// Constructor with initializations
        tt__OSDImgConfiguration() : ImgPath(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__OSDImgConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDImgConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1983 */
#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (664)
/* complex XSD type 'tt:OSDImgConfigurationExtension': */
class SOAP_CMAC tt__OSDImgConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDImgConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__OSDImgConfigurationExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDImgConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDImgConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1986 */
#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (665)
/* complex XSD type 'tt:ColorspaceRange': */
class SOAP_CMAC tt__ColorspaceRange {
      public:
        /// Required element 'tt:X' of XSD type 'tt:FloatRange'
        tt__FloatRange *X;
        /// Required element 'tt:Y' of XSD type 'tt:FloatRange'
        tt__FloatRange *Y;
        /// Required element 'tt:Z' of XSD type 'tt:FloatRange'
        tt__FloatRange *Z;
        /// Required element 'tt:Colorspace' of XSD type 'xsd:anyURI'
        std::string Colorspace;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorspaceRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorspaceRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorspaceRange, default initialized and not managed by a soap context
        virtual tt__ColorspaceRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorspaceRange); }
      public:
        /// Constructor with initializations
        tt__ColorspaceRange() : X(), Y(), Z(), Colorspace(), __anyAttribute(), soap() { }
        virtual ~tt__ColorspaceRange() { }
        /// Friend allocator used by soap_new_tt__ColorspaceRange(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorspaceRange * SOAP_FMAC2 soap_instantiate_tt__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:21355 */
#ifndef SOAP_TYPE__tt__union_ColorOptions
#define SOAP_TYPE__tt__union_ColorOptions (1311)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _tt__union_ColorOptions
{
        #define SOAP_UNION__tt__union_ColorOptions_ColorList	(1)	/**< union variant selector value for member ColorList */
        std::vector<tt__Color *> *ColorList;
        #define SOAP_UNION__tt__union_ColorOptions_ColorspaceRange	(2)	/**< union variant selector value for member ColorspaceRange */
        std::vector<tt__ColorspaceRange *> *ColorspaceRange;
};
#endif

/* onvif.h:1989 */
#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (666)
/* complex XSD type 'tt:ColorOptions': */
class SOAP_CMAC tt__ColorOptions {
      public:
        /// Union with union _tt__union_ColorOptions variant selector __union_ColorOptions set to one of: SOAP_UNION__tt__union_ColorOptions_ColorList SOAP_UNION__tt__union_ColorOptions_ColorspaceRange
        int __union_ColorOptions;
        union _tt__union_ColorOptions union_ColorOptions;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorOptions, default initialized and not managed by a soap context
        virtual tt__ColorOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorOptions); }
      public:
        /// Constructor with initializations
        tt__ColorOptions() : __union_ColorOptions(), __anyAttribute(), soap() { }
        virtual ~tt__ColorOptions() { }
        /// Friend allocator used by soap_new_tt__ColorOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorOptions * SOAP_FMAC2 soap_instantiate_tt__ColorOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1992 */
#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (667)
/* complex XSD type 'tt:OSDColorOptions': */
class SOAP_CMAC tt__OSDColorOptions {
      public:
        /// Optional element 'tt:Color' of XSD type 'tt:ColorOptions'
        tt__ColorOptions *Color;
        /// Optional element 'tt:Transparent' of XSD type 'tt:IntRange'
        tt__IntRange *Transparent;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDColorOptionsExtension'
        tt__OSDColorOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColorOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColorOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColorOptions, default initialized and not managed by a soap context
        virtual tt__OSDColorOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColorOptions); }
      public:
        /// Constructor with initializations
        tt__OSDColorOptions() : Color(), Transparent(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__OSDColorOptions() { }
        /// Friend allocator used by soap_new_tt__OSDColorOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColorOptions * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1995 */
#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (668)
/* complex XSD type 'tt:OSDColorOptionsExtension': */
class SOAP_CMAC tt__OSDColorOptionsExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColorOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColorOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColorOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDColorOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColorOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__OSDColorOptionsExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDColorOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDColorOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1998 */
#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (669)
/* complex XSD type 'tt:OSDTextOptions': */
class SOAP_CMAC tt__OSDTextOptions {
      public:
        /// Required element 'tt:Type' of XSD type 'xsd:string'
        std::vector<std::string> Type;
        /// Optional element 'tt:FontSizeRange' of XSD type 'tt:IntRange'
        tt__IntRange *FontSizeRange;
        /// Optional element 'tt:DateFormat' of XSD type 'xsd:string'
        std::vector<std::string> DateFormat;
        /// Optional element 'tt:TimeFormat' of XSD type 'xsd:string'
        std::vector<std::string> TimeFormat;
        /// Optional element 'tt:FontColor' of XSD type 'tt:OSDColorOptions'
        tt__OSDColorOptions *FontColor;
        /// Optional element 'tt:BackgroundColor' of XSD type 'tt:OSDColorOptions'
        tt__OSDColorOptions *BackgroundColor;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDTextOptionsExtension'
        tt__OSDTextOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextOptions, default initialized and not managed by a soap context
        virtual tt__OSDTextOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextOptions); }
      public:
        /// Constructor with initializations
        tt__OSDTextOptions() : Type(), FontSizeRange(), DateFormat(), TimeFormat(), FontColor(), BackgroundColor(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__OSDTextOptions() { }
        /// Friend allocator used by soap_new_tt__OSDTextOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextOptions * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2001 */
#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (670)
/* complex XSD type 'tt:OSDTextOptionsExtension': */
class SOAP_CMAC tt__OSDTextOptionsExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDTextOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__OSDTextOptionsExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDTextOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDTextOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2004 */
#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (671)
/* complex XSD type 'tt:OSDImgOptions': */
class SOAP_CMAC tt__OSDImgOptions {
      public:
        /// Required element 'tt:ImagePath' of XSD type 'xsd:anyURI'
        std::vector<std::string> ImagePath;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDImgOptionsExtension'
        tt__OSDImgOptionsExtension *Extension;
        /// optional attribute 'FormatsSupported' of XSD type 'tt:StringAttrList'
        std::string *FormatsSupported;
        /// optional attribute 'MaxSize' of XSD type 'xsd:int'
        int *MaxSize;
        /// optional attribute 'MaxWidth' of XSD type 'xsd:int'
        int *MaxWidth;
        /// optional attribute 'MaxHeight' of XSD type 'xsd:int'
        int *MaxHeight;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgOptions, default initialized and not managed by a soap context
        virtual tt__OSDImgOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgOptions); }
      public:
        /// Constructor with initializations
        tt__OSDImgOptions() : ImagePath(), Extension(), FormatsSupported(), MaxSize(), MaxWidth(), MaxHeight(), __anyAttribute(), soap() { }
        virtual ~tt__OSDImgOptions() { }
        /// Friend allocator used by soap_new_tt__OSDImgOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgOptions * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2007 */
#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (672)
/* complex XSD type 'tt:OSDImgOptionsExtension': */
class SOAP_CMAC tt__OSDImgOptionsExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDImgOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__OSDImgOptionsExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDImgOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDImgOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2013 */
#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (674)
/* complex XSD type 'tt:OSDConfigurationExtension': */
class SOAP_CMAC tt__OSDConfigurationExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationExtension); }
      public:
        /// Constructor with initializations
        tt__OSDConfigurationExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2016 */
#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (675)
/* complex XSD type 'tt:MaximumNumberOfOSDs': */
class SOAP_CMAC tt__MaximumNumberOfOSDs {
      public:
        /// required attribute 'Total' of XSD type 'xsd:int'
        int Total;
        /// optional attribute 'Image' of XSD type 'xsd:int'
        int *Image;
        /// optional attribute 'PlainText' of XSD type 'xsd:int'
        int *PlainText;
        /// optional attribute 'Date' of XSD type 'xsd:int'
        int *Date;
        /// optional attribute 'Time' of XSD type 'xsd:int'
        int *Time;
        /// optional attribute 'DateAndTime' of XSD type 'xsd:int'
        int *DateAndTime;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MaximumNumberOfOSDs
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MaximumNumberOfOSDs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MaximumNumberOfOSDs, default initialized and not managed by a soap context
        virtual tt__MaximumNumberOfOSDs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MaximumNumberOfOSDs); }
      public:
        /// Constructor with initializations
        tt__MaximumNumberOfOSDs() : Total(), Image(), PlainText(), Date(), Time(), DateAndTime(), __anyAttribute(), soap() { }
        virtual ~tt__MaximumNumberOfOSDs() { }
        /// Friend allocator used by soap_new_tt__MaximumNumberOfOSDs(struct soap*, int)
        friend SOAP_FMAC1 tt__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_tt__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2019 */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (676)
/* complex XSD type 'tt:OSDConfigurationOptions': */
class SOAP_CMAC tt__OSDConfigurationOptions {
      public:
        /// Required element 'tt:MaximumNumberOfOSDs' of XSD type 'tt:MaximumNumberOfOSDs'
        tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs;
        /// Required element 'tt:Type' of XSD type 'tt:OSDType'
        std::vector<tt__OSDType> Type;
        /// Required element 'tt:PositionOption' of XSD type 'xsd:string'
        std::vector<std::string> PositionOption;
        /// Optional element 'tt:TextOption' of XSD type 'tt:OSDTextOptions'
        tt__OSDTextOptions *TextOption;
        /// Optional element 'tt:ImageOption' of XSD type 'tt:OSDImgOptions'
        tt__OSDImgOptions *ImageOption;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDConfigurationOptionsExtension'
        tt__OSDConfigurationOptionsExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationOptions); }
      public:
        /// Constructor with initializations
        tt__OSDConfigurationOptions() : MaximumNumberOfOSDs(), Type(), PositionOption(), TextOption(), ImageOption(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__OSDConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2022 */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (677)
/* complex XSD type 'tt:OSDConfigurationOptionsExtension': */
class SOAP_CMAC tt__OSDConfigurationOptionsExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationOptionsExtension); }
      public:
        /// Constructor with initializations
        tt__OSDConfigurationOptionsExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__OSDConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2025 */
#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (678)
/* complex XSD type 'tt:FileProgress': */
class SOAP_CMAC tt__FileProgress {
      public:
        /// Required element 'tt:FileName' of XSD type 'xsd:string'
        std::string FileName;
        /// Required element 'tt:Progress' of XSD type 'xsd:float'
        float Progress;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__FileProgress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FileProgress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FileProgress, default initialized and not managed by a soap context
        virtual tt__FileProgress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FileProgress); }
      public:
        /// Constructor with initializations
        tt__FileProgress() : FileName(), Progress(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__FileProgress() { }
        /// Friend allocator used by soap_new_tt__FileProgress(struct soap*, int)
        friend SOAP_FMAC1 tt__FileProgress * SOAP_FMAC2 soap_instantiate_tt__FileProgress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2028 */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (679)
/* complex XSD type 'tt:ArrayOfFileProgress': */
class SOAP_CMAC tt__ArrayOfFileProgress {
      public:
        /// Optional element 'tt:FileProgress' of XSD type 'tt:FileProgress'
        std::vector<tt__FileProgress *> FileProgress;
        /// Optional element 'tt:Extension' of XSD type 'tt:ArrayOfFileProgressExtension'
        tt__ArrayOfFileProgressExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ArrayOfFileProgress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ArrayOfFileProgress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ArrayOfFileProgress, default initialized and not managed by a soap context
        virtual tt__ArrayOfFileProgress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ArrayOfFileProgress); }
      public:
        /// Constructor with initializations
        tt__ArrayOfFileProgress() : FileProgress(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__ArrayOfFileProgress() { }
        /// Friend allocator used by soap_new_tt__ArrayOfFileProgress(struct soap*, int)
        friend SOAP_FMAC1 tt__ArrayOfFileProgress * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2031 */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (680)
/* complex XSD type 'tt:ArrayOfFileProgressExtension': */
class SOAP_CMAC tt__ArrayOfFileProgressExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ArrayOfFileProgressExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ArrayOfFileProgressExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ArrayOfFileProgressExtension, default initialized and not managed by a soap context
        virtual tt__ArrayOfFileProgressExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ArrayOfFileProgressExtension); }
      public:
        /// Constructor with initializations
        tt__ArrayOfFileProgressExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__ArrayOfFileProgressExtension() { }
        /// Friend allocator used by soap_new_tt__ArrayOfFileProgressExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ArrayOfFileProgressExtension * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgressExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2034 */
#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (681)
/* complex XSD type 'tt:StorageReferencePath': */
class SOAP_CMAC tt__StorageReferencePath {
      public:
        /// Required element 'tt:StorageToken' of XSD type 'tt:ReferenceToken'
        std::string StorageToken;
        /// Optional element 'tt:RelativePath' of XSD type 'xsd:string'
        std::string *RelativePath;
        /// Optional element 'tt:Extension' of XSD type 'tt:StorageReferencePathExtension'
        tt__StorageReferencePathExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__StorageReferencePath
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StorageReferencePath; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StorageReferencePath, default initialized and not managed by a soap context
        virtual tt__StorageReferencePath *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StorageReferencePath); }
      public:
        /// Constructor with initializations
        tt__StorageReferencePath() : StorageToken(), RelativePath(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__StorageReferencePath() { }
        /// Friend allocator used by soap_new_tt__StorageReferencePath(struct soap*, int)
        friend SOAP_FMAC1 tt__StorageReferencePath * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePath(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2037 */
#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (682)
/* complex XSD type 'tt:StorageReferencePathExtension': */
class SOAP_CMAC tt__StorageReferencePathExtension {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__StorageReferencePathExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StorageReferencePathExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StorageReferencePathExtension, default initialized and not managed by a soap context
        virtual tt__StorageReferencePathExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StorageReferencePathExtension); }
      public:
        /// Constructor with initializations
        tt__StorageReferencePathExtension() : __any(), __anyAttribute(), soap() { }
        virtual ~tt__StorageReferencePathExtension() { }
        /// Friend allocator used by soap_new_tt__StorageReferencePathExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__StorageReferencePathExtension * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePathExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2040 */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (683)
/* complex XSD type 'tt:IntRange': */
class SOAP_CMAC tt__IntRange {
      public:
        /// Required element 'tt:Min' of XSD type 'xsd:int'
        int Min;
        /// Required element 'tt:Max' of XSD type 'xsd:int'
        int Max;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRange, default initialized and not managed by a soap context
        virtual tt__IntRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRange); }
      public:
        /// Constructor with initializations
        tt__IntRange() : Min(), Max(), soap() { }
        virtual ~tt__IntRange() { }
        /// Friend allocator used by soap_new_tt__IntRange(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2043 */
#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (684)
/* complex XSD type 'tt:Vector2D': */
class SOAP_CMAC tt__Vector2D {
      public:
        /// required attribute 'x' of XSD type 'xsd:float'
        float x;
        /// required attribute 'y' of XSD type 'xsd:float'
        float y;
        /// optional attribute 'space' of XSD type 'xsd:anyURI'
        std::string *space;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector2D
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector2D; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector2D, default initialized and not managed by a soap context
        virtual tt__Vector2D *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector2D); }
      public:
        /// Constructor with initializations
        tt__Vector2D() : x(), y(), space(), soap() { }
        virtual ~tt__Vector2D() { }
        /// Friend allocator used by soap_new_tt__Vector2D(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2046 */
#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (685)
/* complex XSD type 'tt:Vector1D': */
class SOAP_CMAC tt__Vector1D {
      public:
        /// required attribute 'x' of XSD type 'xsd:float'
        float x;
        /// optional attribute 'space' of XSD type 'xsd:anyURI'
        std::string *space;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector1D
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector1D; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector1D, default initialized and not managed by a soap context
        virtual tt__Vector1D *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector1D); }
      public:
        /// Constructor with initializations
        tt__Vector1D() : x(), space(), soap() { }
        virtual ~tt__Vector1D() { }
        /// Friend allocator used by soap_new_tt__Vector1D(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2049 */
#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (686)
/* complex XSD type 'tt:PTZVector': */
class SOAP_CMAC tt__PTZVector {
      public:
        /// Optional element 'tt:PanTilt' of XSD type 'tt:Vector2D'
        tt__Vector2D *PanTilt;
        /// Optional element 'tt:Zoom' of XSD type 'tt:Vector1D'
        tt__Vector1D *Zoom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZVector
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZVector; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZVector, default initialized and not managed by a soap context
        virtual tt__PTZVector *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZVector); }
      public:
        /// Constructor with initializations
        tt__PTZVector() : PanTilt(), Zoom(), soap() { }
        virtual ~tt__PTZVector() { }
        /// Friend allocator used by soap_new_tt__PTZVector(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2052 */
#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (687)
/* complex XSD type 'tt:PTZStatus': */
class SOAP_CMAC tt__PTZStatus {
      public:
        /// Optional element 'tt:Position' of XSD type 'tt:PTZVector'
        tt__PTZVector *Position;
        /// Optional element 'tt:MoveStatus' of XSD type 'tt:PTZMoveStatus'
        tt__PTZMoveStatus *MoveStatus;
        /// Optional element 'tt:Error' of XSD type 'xsd:string'
        std::string *Error;
        /// Required element 'tt:UtcTime' of XSD type 'xsd:dateTime'
        time_t UtcTime;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatus, default initialized and not managed by a soap context
        virtual tt__PTZStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatus); }
      public:
        /// Constructor with initializations
        tt__PTZStatus() : Position(), MoveStatus(), Error(), UtcTime(), __any(), __anyAttribute(), soap() { }
        virtual ~tt__PTZStatus() { }
        /// Friend allocator used by soap_new_tt__PTZStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2055 */
#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (688)
/* complex XSD type 'tt:PTZMoveStatus': */
class SOAP_CMAC tt__PTZMoveStatus {
      public:
        /// Optional element 'tt:PanTilt' of XSD type 'tt:MoveStatus'
        tt__MoveStatus *PanTilt;
        /// Optional element 'tt:Zoom' of XSD type 'tt:MoveStatus'
        tt__MoveStatus *Zoom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZMoveStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZMoveStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZMoveStatus, default initialized and not managed by a soap context
        virtual tt__PTZMoveStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZMoveStatus); }
      public:
        /// Constructor with initializations
        tt__PTZMoveStatus() : PanTilt(), Zoom(), soap() { }
        virtual ~tt__PTZMoveStatus() { }
        /// Friend allocator used by soap_new_tt__PTZMoveStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2058 */
#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (689)
/* complex XSD type 'tt:Vector': */
class SOAP_CMAC tt__Vector {
      public:
        /// optional attribute 'x' of XSD type 'xsd:float'
        float *x;
        /// optional attribute 'y' of XSD type 'xsd:float'
        float *y;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector, default initialized and not managed by a soap context
        virtual tt__Vector *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector); }
      public:
        /// Constructor with initializations
        tt__Vector() : x(), y(), soap() { }
        virtual ~tt__Vector() { }
        /// Friend allocator used by soap_new_tt__Vector(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector * SOAP_FMAC2 soap_instantiate_tt__Vector(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2061 */
#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (690)
/* complex XSD type 'tt:Rectangle': */
class SOAP_CMAC tt__Rectangle {
      public:
        /// optional attribute 'bottom' of XSD type 'xsd:float'
        float *bottom;
        /// optional attribute 'top' of XSD type 'xsd:float'
        float *top;
        /// optional attribute 'right' of XSD type 'xsd:float'
        float *right;
        /// optional attribute 'left' of XSD type 'xsd:float'
        float *left;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Rectangle
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Rectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Rectangle, default initialized and not managed by a soap context
        virtual tt__Rectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Rectangle); }
      public:
        /// Constructor with initializations
        tt__Rectangle() : bottom(), top(), right(), left(), soap() { }
        virtual ~tt__Rectangle() { }
        /// Friend allocator used by soap_new_tt__Rectangle(struct soap*, int)
        friend SOAP_FMAC1 tt__Rectangle * SOAP_FMAC2 soap_instantiate_tt__Rectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2064 */
#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (691)
/* complex XSD type 'tt:Polygon': */
class SOAP_CMAC tt__Polygon {
      public:
        /// Required element 'tt:Point' of XSD type 'tt:Vector'
        std::vector<tt__Vector *> Point;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Polygon
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Polygon; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Polygon, default initialized and not managed by a soap context
        virtual tt__Polygon *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Polygon); }
      public:
        /// Constructor with initializations
        tt__Polygon() : Point(), soap() { }
        virtual ~tt__Polygon() { }
        /// Friend allocator used by soap_new_tt__Polygon(struct soap*, int)
        friend SOAP_FMAC1 tt__Polygon * SOAP_FMAC2 soap_instantiate_tt__Polygon(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2067 */
#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (692)
/* complex XSD type 'tt:Color': */
class SOAP_CMAC tt__Color {
      public:
        /// required attribute 'X' of XSD type 'xsd:float'
        float X;
        /// required attribute 'Y' of XSD type 'xsd:float'
        float Y;
        /// required attribute 'Z' of XSD type 'xsd:float'
        float Z;
        /// optional attribute 'Colorspace' of XSD type 'xsd:anyURI'
        std::string *Colorspace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Color
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Color; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Color, default initialized and not managed by a soap context
        virtual tt__Color *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Color); }
      public:
        /// Constructor with initializations
        tt__Color() : X(), Y(), Z(), Colorspace(), soap() { }
        virtual ~tt__Color() { }
        /// Friend allocator used by soap_new_tt__Color(struct soap*, int)
        friend SOAP_FMAC1 tt__Color * SOAP_FMAC2 soap_instantiate_tt__Color(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2070 */
#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (693)
/* complex XSD type 'tt:ColorCovariance': */
class SOAP_CMAC tt__ColorCovariance {
      public:
        /// required attribute 'XX' of XSD type 'xsd:float'
        float XX;
        /// required attribute 'YY' of XSD type 'xsd:float'
        float YY;
        /// required attribute 'ZZ' of XSD type 'xsd:float'
        float ZZ;
        /// optional attribute 'XY' of XSD type 'xsd:float'
        float *XY;
        /// optional attribute 'XZ' of XSD type 'xsd:float'
        float *XZ;
        /// optional attribute 'YZ' of XSD type 'xsd:float'
        float *YZ;
        /// optional attribute 'Colorspace' of XSD type 'xsd:anyURI'
        std::string *Colorspace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorCovariance
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorCovariance; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorCovariance, default initialized and not managed by a soap context
        virtual tt__ColorCovariance *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorCovariance); }
      public:
        /// Constructor with initializations
        tt__ColorCovariance() : XX(), YY(), ZZ(), XY(), XZ(), YZ(), Colorspace(), soap() { }
        virtual ~tt__ColorCovariance() { }
        /// Friend allocator used by soap_new_tt__ColorCovariance(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorCovariance * SOAP_FMAC2 soap_instantiate_tt__ColorCovariance(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2073 */
#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (694)
/* complex XSD type 'tt:Transformation': */
class SOAP_CMAC tt__Transformation {
      public:
        /// Optional element 'tt:Translate' of XSD type 'tt:Vector'
        tt__Vector *Translate;
        /// Optional element 'tt:Scale' of XSD type 'tt:Vector'
        tt__Vector *Scale;
        /// Optional element 'tt:Extension' of XSD type 'tt:TransformationExtension'
        tt__TransformationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Transformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Transformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Transformation, default initialized and not managed by a soap context
        virtual tt__Transformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Transformation); }
      public:
        /// Constructor with initializations
        tt__Transformation() : Translate(), Scale(), Extension(), __anyAttribute(), soap() { }
        virtual ~tt__Transformation() { }
        /// Friend allocator used by soap_new_tt__Transformation(struct soap*, int)
        friend SOAP_FMAC1 tt__Transformation * SOAP_FMAC2 soap_instantiate_tt__Transformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2076 */
#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (695)
/* complex XSD type 'tt:TransformationExtension': */
class SOAP_CMAC tt__TransformationExtension {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TransformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TransformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TransformationExtension, default initialized and not managed by a soap context
        virtual tt__TransformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TransformationExtension); }
      public:
        /// Constructor with initializations
        tt__TransformationExtension() : __any(), soap() { }
        virtual ~tt__TransformationExtension() { }
        /// Friend allocator used by soap_new_tt__TransformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__TransformationExtension * SOAP_FMAC2 soap_instantiate_tt__TransformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2079 */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (696)
/* complex XSD type 'tt:GeoLocation': */
class SOAP_CMAC tt__GeoLocation {
      public:
        std::vector<char *> __any;
        /// optional attribute 'lon' of XSD type 'xsd:double'
        double *lon;
        /// optional attribute 'lat' of XSD type 'xsd:double'
        double *lat;
        /// optional attribute 'elevation' of XSD type 'xsd:float'
        float *elevation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoLocation, default initialized and not managed by a soap context
        virtual tt__GeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoLocation); }
      public:
        /// Constructor with initializations
        tt__GeoLocation() : __any(), lon(), lat(), elevation(), __anyAttribute(), soap() { }
        virtual ~tt__GeoLocation() { }
        /// Friend allocator used by soap_new_tt__GeoLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2082 */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (697)
/* complex XSD type 'tt:GeoOrientation': */
class SOAP_CMAC tt__GeoOrientation {
      public:
        std::vector<char *> __any;
        /// optional attribute 'roll' of XSD type 'xsd:float'
        float *roll;
        /// optional attribute 'pitch' of XSD type 'xsd:float'
        float *pitch;
        /// optional attribute 'yaw' of XSD type 'xsd:float'
        float *yaw;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoOrientation, default initialized and not managed by a soap context
        virtual tt__GeoOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoOrientation); }
      public:
        /// Constructor with initializations
        tt__GeoOrientation() : __any(), roll(), pitch(), yaw(), __anyAttribute(), soap() { }
        virtual ~tt__GeoOrientation() { }
        /// Friend allocator used by soap_new_tt__GeoOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoOrientation * SOAP_FMAC2 soap_instantiate_tt__GeoOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2085 */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (698)
/* complex XSD type 'tt:LocalLocation': */
class SOAP_CMAC tt__LocalLocation {
      public:
        std::vector<char *> __any;
        /// optional attribute 'x' of XSD type 'xsd:float'
        float *x;
        /// optional attribute 'y' of XSD type 'xsd:float'
        float *y;
        /// optional attribute 'z' of XSD type 'xsd:float'
        float *z;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalLocation, default initialized and not managed by a soap context
        virtual tt__LocalLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalLocation); }
      public:
        /// Constructor with initializations
        tt__LocalLocation() : __any(), x(), y(), z(), __anyAttribute(), soap() { }
        virtual ~tt__LocalLocation() { }
        /// Friend allocator used by soap_new_tt__LocalLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalLocation * SOAP_FMAC2 soap_instantiate_tt__LocalLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2088 */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (699)
/* complex XSD type 'tt:LocalOrientation': */
class SOAP_CMAC tt__LocalOrientation {
      public:
        std::vector<char *> __any;
        /// optional attribute 'pan' of XSD type 'xsd:float'
        float *pan;
        /// optional attribute 'tilt' of XSD type 'xsd:float'
        float *tilt;
        /// optional attribute 'roll' of XSD type 'xsd:float'
        float *roll;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalOrientation, default initialized and not managed by a soap context
        virtual tt__LocalOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalOrientation); }
      public:
        /// Constructor with initializations
        tt__LocalOrientation() : __any(), pan(), tilt(), roll(), __anyAttribute(), soap() { }
        virtual ~tt__LocalOrientation() { }
        /// Friend allocator used by soap_new_tt__LocalOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalOrientation * SOAP_FMAC2 soap_instantiate_tt__LocalOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2091 */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (700)
/* complex XSD type 'tt:LocationEntity': */
class SOAP_CMAC tt__LocationEntity {
      public:
        /// Optional element 'tt:GeoLocation' of XSD type 'tt:GeoLocation'
        tt__GeoLocation *GeoLocation;
        /// Optional element 'tt:GeoOrientation' of XSD type 'tt:GeoOrientation'
        tt__GeoOrientation *GeoOrientation;
        /// Optional element 'tt:LocalLocation' of XSD type 'tt:LocalLocation'
        tt__LocalLocation *LocalLocation;
        /// Optional element 'tt:LocalOrientation' of XSD type 'tt:LocalOrientation'
        tt__LocalOrientation *LocalOrientation;
        /// optional attribute 'Entity' of XSD type 'xsd:string'
        std::string *Entity;
        /// optional attribute 'Token' of XSD type 'tt:ReferenceToken'
        std::string *Token;
        /// optional attribute 'Fixed' of XSD type 'xsd:boolean'
        bool *Fixed;
        /// optional attribute 'GeoSource' of XSD type 'xsd:anyURI'
        std::string *GeoSource;
        /// optional attribute 'AutoGeo' of XSD type 'xsd:boolean'
        bool *AutoGeo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocationEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocationEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocationEntity, default initialized and not managed by a soap context
        virtual tt__LocationEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocationEntity); }
      public:
        /// Constructor with initializations
        tt__LocationEntity() : GeoLocation(), GeoOrientation(), LocalLocation(), LocalOrientation(), Entity(), Token(), Fixed(), GeoSource(), AutoGeo(), soap() { }
        virtual ~tt__LocationEntity() { }
        /// Friend allocator used by soap_new_tt__LocationEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__LocationEntity * SOAP_FMAC2 soap_instantiate_tt__LocationEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2094 */
#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (701)
/* complex XSD type 'tt:StringItems': */
class SOAP_CMAC _tt__StringItems {
      public:
        /// Required element 'tt:Item' of XSD type 'xsd:string'
        std::vector<std::string> Item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tt__StringItems
        virtual long soap_type(void) const { return SOAP_TYPE__tt__StringItems; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__StringItems, default initialized and not managed by a soap context
        virtual _tt__StringItems *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__StringItems); }
      public:
        /// Constructor with initializations
        _tt__StringItems() : Item(), soap() { }
        virtual ~_tt__StringItems() { }
        /// Friend allocator used by soap_new__tt__StringItems(struct soap*, int)
        friend SOAP_FMAC1 _tt__StringItems * SOAP_FMAC2 soap_instantiate__tt__StringItems(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2097 */
#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (702)
/* complex XSD type 'tt:Message': */
class SOAP_CMAC _tt__Message {
      public:
        /// Optional element 'tt:Source' of XSD type 'tt:ItemList'
        tt__ItemList *Source;
        /// Optional element 'tt:Key' of XSD type 'tt:ItemList'
        tt__ItemList *Key;
        /// Optional element 'tt:Data' of XSD type 'tt:ItemList'
        tt__ItemList *Data;
        /// Optional element 'tt:Extension' of XSD type 'tt:MessageExtension'
        tt__MessageExtension *Extension;
        /// required attribute 'UtcTime' of XSD type 'xsd:dateTime'
        time_t UtcTime;
        /// optional attribute 'PropertyOperation' of XSD type 'tt:PropertyOperation'
        tt__PropertyOperation *PropertyOperation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tt__Message
        virtual long soap_type(void) const { return SOAP_TYPE__tt__Message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__Message, default initialized and not managed by a soap context
        virtual _tt__Message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__Message); }
      public:
        /// Constructor with initializations
        _tt__Message() : Source(), Key(), Data(), Extension(), UtcTime(), PropertyOperation(), __anyAttribute(), soap() { }
        virtual ~_tt__Message() { }
        /// Friend allocator used by soap_new__tt__Message(struct soap*, int)
        friend SOAP_FMAC1 _tt__Message * SOAP_FMAC2 soap_instantiate__tt__Message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2100 */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (703)
/* complex XSD type 'wsnt:QueryExpressionType': */
class SOAP_CMAC wsnt__QueryExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__QueryExpressionType, default initialized and not managed by a soap context
        virtual wsnt__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__QueryExpressionType); }
      public:
        /// Constructor with initializations
        wsnt__QueryExpressionType() : __any(), Dialect(), __mixed(), soap() { }
        virtual ~wsnt__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2103 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (704)
/* complex XSD type 'wsnt:TopicExpressionType': */
class SOAP_CMAC wsnt__TopicExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionType); }
      public:
        /// Constructor with initializations
        wsnt__TopicExpressionType() : __any(), Dialect(), __anyAttribute(), __mixed(), soap() { }
        virtual ~wsnt__TopicExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2106 */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (705)
/* Type wsnt__FilterType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:FilterType': */
class SOAP_CMAC wsnt__FilterType {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__FilterType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__FilterType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__FilterType, default initialized and not managed by a soap context
        virtual wsnt__FilterType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__FilterType); }
      public:
        /// Constructor with initializations
        wsnt__FilterType() : __any(), soap() { }
        virtual ~wsnt__FilterType() { }
        /// Friend allocator used by soap_new_wsnt__FilterType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2109 */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (706)
/* complex XSD type 'wsnt:SubscriptionPolicyType': */
class SOAP_CMAC wsnt__SubscriptionPolicyType {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscriptionPolicyType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscriptionPolicyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscriptionPolicyType, default initialized and not managed by a soap context
        virtual wsnt__SubscriptionPolicyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscriptionPolicyType); }
      public:
        /// Constructor with initializations
        wsnt__SubscriptionPolicyType() : __any(), soap() { }
        virtual ~wsnt__SubscriptionPolicyType() { }
        /// Friend allocator used by soap_new_wsnt__SubscriptionPolicyType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:22767 */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1340)
/* complex XSD type 'wsnt:NotificationMessageHolderType-Message': */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message {
      public:
        char *__any;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationMessageHolderType_Message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationMessageHolderType_Message, default initialized and not managed by a soap context
        virtual _wsnt__NotificationMessageHolderType_Message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationMessageHolderType_Message); }
      public:
        /// Constructor with initializations
        _wsnt__NotificationMessageHolderType_Message() : __any() { }
        virtual ~_wsnt__NotificationMessageHolderType_Message() { }
        /// Friend allocator used by soap_new__wsnt__NotificationMessageHolderType_Message(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2112 */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (707)
/* complex XSD type 'wsnt:NotificationMessageHolderType': */
class SOAP_CMAC wsnt__NotificationMessageHolderType {
      public:
        /// Optional element 'wsnt:SubscriptionReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *SubscriptionReference;
        /// Optional element 'wsnt:Topic' of XSD type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        /// Optional element 'wsnt:ProducerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *ProducerReference;
        /// Required element 'wsnt:Message' of XSD type 'wsnt:NotificationMessageHolderType-Message'
        _wsnt__NotificationMessageHolderType_Message Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotificationMessageHolderType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotificationMessageHolderType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotificationMessageHolderType, default initialized and not managed by a soap context
        virtual wsnt__NotificationMessageHolderType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotificationMessageHolderType); }
      public:
        /// Constructor with initializations
        wsnt__NotificationMessageHolderType() : SubscriptionReference(), Topic(), ProducerReference(), Message(), soap() { }
        virtual ~wsnt__NotificationMessageHolderType() { }
        /// Friend allocator used by soap_new_wsnt__NotificationMessageHolderType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2175 */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (728)
/* complex XSD type 'wsnt:NotificationProducerRP': */
class SOAP_CMAC _wsnt__NotificationProducerRP {
      public:
        /// Optional element 'wsnt:TopicExpression' of XSD type 'wsnt:TopicExpressionType'
        std::vector<wsnt__TopicExpressionType *> TopicExpression;
        /// Optional element 'wsnt:FixedTopicSet' of XSD type 'xsd:boolean'
        bool *FixedTopicSet;	///< optional with default value = (bool)1
        /// Optional element 'wsnt:TopicExpressionDialect' of XSD type 'xsd:anyURI'
        std::vector<std::string> TopicExpressionDialect;
        /// Optional element 'wstop:TopicSet' of XSD type 'wstop:TopicSetType'
        wstop__TopicSetType *wstop__TopicSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationProducerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationProducerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationProducerRP, default initialized and not managed by a soap context
        virtual _wsnt__NotificationProducerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationProducerRP); }
      public:
        /// Constructor with initializations
        _wsnt__NotificationProducerRP() : TopicExpression(), FixedTopicSet(), TopicExpressionDialect(), wstop__TopicSet(), soap() { }
        virtual ~_wsnt__NotificationProducerRP() { }
        /// Friend allocator used by soap_new__wsnt__NotificationProducerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2178 */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (729)
/* complex XSD type 'wsnt:SubscriptionManagerRP': */
class SOAP_CMAC _wsnt__SubscriptionManagerRP {
      public:
        /// Required element 'wsnt:ConsumerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:SubscriptionPolicy' of XSD type 'wsnt:SubscriptionPolicyType'
        wsnt__SubscriptionPolicyType *SubscriptionPolicy;
        /// Optional element 'wsnt:CreationTime' of XSD type 'xsd:dateTime'
        time_t *CreationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscriptionManagerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscriptionManagerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscriptionManagerRP, default initialized and not managed by a soap context
        virtual _wsnt__SubscriptionManagerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscriptionManagerRP); }
      public:
        /// Constructor with initializations
        _wsnt__SubscriptionManagerRP() : ConsumerReference(), Filter(), SubscriptionPolicy(), CreationTime(), soap() { }
        virtual ~_wsnt__SubscriptionManagerRP() { }
        /// Friend allocator used by soap_new__wsnt__SubscriptionManagerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2181 */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (730)
/* complex XSD type 'wsnt:Notify': */
class SOAP_CMAC _wsnt__Notify {
      public:
        /// Required element 'wsnt:NotificationMessage' of XSD type 'wsnt:NotificationMessageHolderType'
        std::vector<wsnt__NotificationMessageHolderType *> NotificationMessage;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Notify
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Notify; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Notify, default initialized and not managed by a soap context
        virtual _wsnt__Notify *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Notify); }
      public:
        /// Constructor with initializations
        _wsnt__Notify() : NotificationMessage(), __any(), soap() { }
        virtual ~_wsnt__Notify() { }
        /// Friend allocator used by soap_new__wsnt__Notify(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2184 */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (731)
/* complex XSD type 'wsnt:UseRaw': */
class SOAP_CMAC _wsnt__UseRaw {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UseRaw
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UseRaw; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UseRaw, default initialized and not managed by a soap context
        virtual _wsnt__UseRaw *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UseRaw); }
      public:
        /// Constructor with initializations
        _wsnt__UseRaw() : soap() { }
        virtual ~_wsnt__UseRaw() { }
        /// Friend allocator used by soap_new__wsnt__UseRaw(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:22909 */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1346)
/* complex XSD type 'wsnt:Subscribe-SubscriptionPolicy': */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe_SubscriptionPolicy); }
      public:
        /// Constructor with initializations
        _wsnt__Subscribe_SubscriptionPolicy() : __any() { }
        virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2187 */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (732)
/* complex XSD type 'wsnt:Subscribe': */
class SOAP_CMAC _wsnt__Subscribe {
      public:
        /// Required element 'wsnt:ConsumerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:InitialTerminationTime' of XSD type 'wsnt:AbsoluteOrRelativeTimeType'
        std::string *InitialTerminationTime;
        /// Optional element 'wsnt:SubscriptionPolicy' of XSD type 'wsnt:Subscribe-SubscriptionPolicy'
        _wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe); }
      public:
        /// Constructor with initializations
        _wsnt__Subscribe() : ConsumerReference(), Filter(), InitialTerminationTime(), SubscriptionPolicy(), __any(), soap() { }
        virtual ~_wsnt__Subscribe() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2190 */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (733)
/* complex XSD type 'wsnt:SubscribeResponse': */
class SOAP_CMAC _wsnt__SubscribeResponse {
      public:
        /// Required element 'wsnt:SubscriptionReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType SubscriptionReference;
        /// Optional element 'wsnt:CurrentTime' of XSD type 'xsd:dateTime'
        time_t *CurrentTime;
        /// Optional element 'wsnt:TerminationTime' of XSD type 'xsd:dateTime'
        time_t *TerminationTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__SubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscribeResponse); }
      public:
        /// Constructor with initializations
        _wsnt__SubscribeResponse() : SubscriptionReference(), CurrentTime(), TerminationTime(), __any(), soap() { }
        virtual ~_wsnt__SubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__SubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2193 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (734)
/* complex XSD type 'wsnt:GetCurrentMessage': */
class SOAP_CMAC _wsnt__GetCurrentMessage {
      public:
        /// Required element 'wsnt:Topic' of XSD type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessage
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessage, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessage); }
      public:
        /// Constructor with initializations
        _wsnt__GetCurrentMessage() : Topic(), __any(), soap() { }
        virtual ~_wsnt__GetCurrentMessage() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessage(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2196 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (735)
/* complex XSD type 'wsnt:GetCurrentMessageResponse': */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessageResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessageResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessageResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessageResponse); }
      public:
        /// Constructor with initializations
        _wsnt__GetCurrentMessageResponse() : __any(), soap() { }
        virtual ~_wsnt__GetCurrentMessageResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2199 */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (736)
/* complex XSD type 'wsnt:GetMessages': */
class SOAP_CMAC _wsnt__GetMessages {
      public:
        /// Optional element 'wsnt:MaximumNumber' of XSD type 'xsd:nonNegativeInteger'
        std::string *MaximumNumber;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessages
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessages, default initialized and not managed by a soap context
        virtual _wsnt__GetMessages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessages); }
      public:
        /// Constructor with initializations
        _wsnt__GetMessages() : MaximumNumber(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__GetMessages() { }
        /// Friend allocator used by soap_new__wsnt__GetMessages(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2202 */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (737)
/* complex XSD type 'wsnt:GetMessagesResponse': */
class SOAP_CMAC _wsnt__GetMessagesResponse {
      public:
        /// Optional element 'wsnt:NotificationMessage' of XSD type 'wsnt:NotificationMessageHolderType'
        std::vector<wsnt__NotificationMessageHolderType *> NotificationMessage;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessagesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessagesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessagesResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetMessagesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessagesResponse); }
      public:
        /// Constructor with initializations
        _wsnt__GetMessagesResponse() : NotificationMessage(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__GetMessagesResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetMessagesResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2205 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (738)
/* complex XSD type 'wsnt:DestroyPullPoint': */
class SOAP_CMAC _wsnt__DestroyPullPoint {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPoint, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPoint); }
      public:
        /// Constructor with initializations
        _wsnt__DestroyPullPoint() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__DestroyPullPoint() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2208 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (739)
/* complex XSD type 'wsnt:DestroyPullPointResponse': */
class SOAP_CMAC _wsnt__DestroyPullPointResponse {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPointResponse); }
      public:
        /// Constructor with initializations
        _wsnt__DestroyPullPointResponse() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__DestroyPullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2211 */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (740)
/* complex XSD type 'wsnt:CreatePullPoint': */
class SOAP_CMAC _wsnt__CreatePullPoint {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPoint, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPoint); }
      public:
        /// Constructor with initializations
        _wsnt__CreatePullPoint() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__CreatePullPoint() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2214 */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (741)
/* complex XSD type 'wsnt:CreatePullPointResponse': */
class SOAP_CMAC _wsnt__CreatePullPointResponse {
      public:
        /// Required element 'wsnt:PullPoint' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType PullPoint;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPointResponse); }
      public:
        /// Constructor with initializations
        _wsnt__CreatePullPointResponse() : PullPoint(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__CreatePullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2217 */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (742)
/* complex XSD type 'wsnt:Renew': */
class SOAP_CMAC _wsnt__Renew {
      public:
        /// Required nillable (xsi:nil when NULL) element 'wsnt:TerminationTime' of XSD type 'wsnt:AbsoluteOrRelativeTimeType'
        std::string *TerminationTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Renew
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Renew; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Renew, default initialized and not managed by a soap context
        virtual _wsnt__Renew *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Renew); }
      public:
        /// Constructor with initializations
        _wsnt__Renew() : TerminationTime(), __any(), soap() { }
        virtual ~_wsnt__Renew() { }
        /// Friend allocator used by soap_new__wsnt__Renew(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2220 */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (743)
/* complex XSD type 'wsnt:RenewResponse': */
class SOAP_CMAC _wsnt__RenewResponse {
      public:
        /// Required element 'wsnt:TerminationTime' of XSD type 'xsd:dateTime'
        time_t TerminationTime;
        /// Optional element 'wsnt:CurrentTime' of XSD type 'xsd:dateTime'
        time_t *CurrentTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__RenewResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__RenewResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__RenewResponse, default initialized and not managed by a soap context
        virtual _wsnt__RenewResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__RenewResponse); }
      public:
        /// Constructor with initializations
        _wsnt__RenewResponse() : TerminationTime(), CurrentTime(), __any(), soap() { }
        virtual ~_wsnt__RenewResponse() { }
        /// Friend allocator used by soap_new__wsnt__RenewResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2223 */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (744)
/* complex XSD type 'wsnt:Unsubscribe': */
class SOAP_CMAC _wsnt__Unsubscribe {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Unsubscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Unsubscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Unsubscribe, default initialized and not managed by a soap context
        virtual _wsnt__Unsubscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Unsubscribe); }
      public:
        /// Constructor with initializations
        _wsnt__Unsubscribe() : __any(), soap() { }
        virtual ~_wsnt__Unsubscribe() { }
        /// Friend allocator used by soap_new__wsnt__Unsubscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2226 */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (745)
/* complex XSD type 'wsnt:UnsubscribeResponse': */
class SOAP_CMAC _wsnt__UnsubscribeResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UnsubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UnsubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UnsubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__UnsubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UnsubscribeResponse); }
      public:
        /// Constructor with initializations
        _wsnt__UnsubscribeResponse() : __any(), soap() { }
        virtual ~_wsnt__UnsubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__UnsubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2229 */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (746)
/* complex XSD type 'wsnt:PauseSubscription': */
class SOAP_CMAC _wsnt__PauseSubscription {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscription, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscription); }
      public:
        /// Constructor with initializations
        _wsnt__PauseSubscription() : __any(), soap() { }
        virtual ~_wsnt__PauseSubscription() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2232 */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (747)
/* complex XSD type 'wsnt:PauseSubscriptionResponse': */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscriptionResponse); }
      public:
        /// Constructor with initializations
        _wsnt__PauseSubscriptionResponse() : __any(), soap() { }
        virtual ~_wsnt__PauseSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2235 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (748)
/* complex XSD type 'wsnt:ResumeSubscription': */
class SOAP_CMAC _wsnt__ResumeSubscription {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscription, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscription); }
      public:
        /// Constructor with initializations
        _wsnt__ResumeSubscription() : __any(), soap() { }
        virtual ~_wsnt__ResumeSubscription() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2238 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (749)
/* complex XSD type 'wsnt:ResumeSubscriptionResponse': */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscriptionResponse); }
      public:
        /// Constructor with initializations
        _wsnt__ResumeSubscriptionResponse() : __any(), soap() { }
        virtual ~_wsnt__ResumeSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:23473 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1349)
/* complex XSD type 'wsrfbf:BaseFaultType-ErrorCode': */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode {
      public:
        /// required attribute 'dialect' of XSD type 'xsd:anyURI'
        std::string dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_ErrorCode, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_ErrorCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_ErrorCode); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_ErrorCode() : dialect(), __mixed() { }
        virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:23494 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1351)
/* simple XSD type 'wsrfbf:BaseFaultType-Description': */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// optional attribute 'xml:lang' of XSD type 'xml:lang'
        std::string *xml__lang;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_Description
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_Description; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_Description, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_Description *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_Description); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_Description() : __item(), xml__lang() { }
        virtual ~_wsrfbf__BaseFaultType_Description() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_Description(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:23511 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1354)
/* complex XSD type 'wsrfbf:BaseFaultType-FaultCause': */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause {
      public:
        char *__any;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_FaultCause, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_FaultCause *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_FaultCause); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_FaultCause() : __any() { }
        virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2241 */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (750)
/* Type wsrfbf__BaseFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsrfbf:BaseFaultType': */
class SOAP_CMAC wsrfbf__BaseFaultType {
      public:
        std::vector<char *> __any;
        /// Required element 'wsrfbf:Timestamp' of XSD type 'xsd:dateTime'
        time_t Timestamp;
        /// Optional element 'wsrfbf:Originator' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *Originator;
        /// Optional element 'wsrfbf:ErrorCode' of XSD type 'wsrfbf:BaseFaultType-ErrorCode'
        _wsrfbf__BaseFaultType_ErrorCode *ErrorCode;
        /// Optional element 'wsrfbf:Description' of XSD type 'wsrfbf:BaseFaultType-Description'
        std::vector<_wsrfbf__BaseFaultType_Description> Description;
        /// Optional element 'wsrfbf:FaultCause' of XSD type 'wsrfbf:BaseFaultType-FaultCause'
        _wsrfbf__BaseFaultType_FaultCause *FaultCause;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsrfbf__BaseFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfbf__BaseFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfbf__BaseFaultType, default initialized and not managed by a soap context
        virtual wsrfbf__BaseFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfbf__BaseFaultType); }
      public:
        /// Constructor with initializations
        wsrfbf__BaseFaultType() : __any(), Timestamp(), Originator(), ErrorCode(), Description(), FaultCause(), __anyAttribute(), soap() { }
        virtual ~wsrfbf__BaseFaultType() { }
        /// Friend allocator used by soap_new_wsrfbf__BaseFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2244 */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (751)
/* complex XSD type 'wstop:Documentation': */
class SOAP_CMAC wstop__Documentation {
      public:
        std::vector<char *> __any;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__Documentation
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__Documentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__Documentation, default initialized and not managed by a soap context
        virtual wstop__Documentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__Documentation); }
      public:
        /// Constructor with initializations
        wstop__Documentation() : __any(), __mixed(), soap() { }
        virtual ~wstop__Documentation() { }
        /// Friend allocator used by soap_new_wstop__Documentation(struct soap*, int)
        friend SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2247 */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (752)
/* Type wstop__ExtensibleDocumented is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:ExtensibleDocumented': */
class SOAP_CMAC wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:documentation' of XSD type 'wstop:Documentation'
        wstop__Documentation *documentation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__ExtensibleDocumented
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__ExtensibleDocumented; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__ExtensibleDocumented, default initialized and not managed by a soap context
        virtual wstop__ExtensibleDocumented *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__ExtensibleDocumented); }
      public:
        /// Constructor with initializations
        wstop__ExtensibleDocumented() : documentation(), __anyAttribute(), soap() { }
        virtual ~wstop__ExtensibleDocumented() { }
        /// Friend allocator used by soap_new_wstop__ExtensibleDocumented(struct soap*, int)
        friend SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2250 */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (753)
/* complex XSD type 'wstop:QueryExpressionType': */
class SOAP_CMAC wstop__QueryExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__QueryExpressionType, default initialized and not managed by a soap context
        virtual wstop__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__QueryExpressionType); }
      public:
        /// Constructor with initializations
        wstop__QueryExpressionType() : __any(), Dialect(), __mixed(), soap() { }
        virtual ~wstop__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wstop__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:732 */
#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (247)
/* Type tt__VideoSource is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoSource': */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Framerate' of XSD type 'xsd:float'
        float Framerate;
        /// Required element 'tt:Resolution' of XSD type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Optional element 'tt:Imaging' of XSD type 'tt:ImagingSettings'
        tt__ImagingSettings *Imaging;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceExtension'
        tt__VideoSourceExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSource, default initialized and not managed by a soap context
        virtual tt__VideoSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSource); }
      public:
        /// Constructor with initializations
        tt__VideoSource() : Framerate(), Resolution(), Imaging(), Extension(), __anyAttribute() { }
        virtual ~tt__VideoSource() { }
        /// Friend allocator used by soap_new_tt__VideoSource(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSource * SOAP_FMAC2 soap_instantiate_tt__VideoSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:741 */
#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (250)
/* Type tt__AudioSource is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioSource': */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Channels' of XSD type 'xsd:int'
        int Channels;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSource, default initialized and not managed by a soap context
        virtual tt__AudioSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSource); }
      public:
        /// Constructor with initializations
        tt__AudioSource() : Channels(), __any(), __anyAttribute() { }
        virtual ~tt__AudioSource() { }
        /// Friend allocator used by soap_new_tt__AudioSource(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSource * SOAP_FMAC2 soap_instantiate_tt__AudioSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:756 */
#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (255)
/* Type tt__VideoSourceConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoSourceConfiguration': */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceToken' of XSD type 'tt:ReferenceToken'
        std::string SourceToken;
        /// Required element 'tt:Bounds' of XSD type 'tt:IntRectangle'
        tt__IntRectangle *Bounds;
        std::vector<char *> __any;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoSourceConfigurationExtension'
        tt__VideoSourceConfigurationExtension *Extension;
        /// optional attribute 'ViewMode' of XSD type 'xsd:string'
        std::string *ViewMode;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfiguration); }
      public:
        /// Constructor with initializations
        tt__VideoSourceConfiguration() : SourceToken(), Bounds(), __any(), Extension(), ViewMode(), __anyAttribute() { }
        virtual ~tt__VideoSourceConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:798 */
#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (269)
/* Type tt__VideoEncoderConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoEncoderConfiguration': */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XSD type 'tt:VideoEncoding'
        tt__VideoEncoding Encoding;
        /// Required element 'tt:Resolution' of XSD type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Required element 'tt:Quality' of XSD type 'xsd:float'
        float Quality;
        /// Optional element 'tt:RateControl' of XSD type 'tt:VideoRateControl'
        tt__VideoRateControl *RateControl;
        /// Optional element 'tt:MPEG4' of XSD type 'tt:Mpeg4Configuration'
        tt__Mpeg4Configuration *MPEG4;
        /// Optional element 'tt:H264' of XSD type 'tt:H264Configuration'
        tt__H264Configuration *H264;
        /// Required element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 SessionTimeout;
        std::vector<char *> __any;
        /// optional attribute 'GuaranteedFrameRate' of XSD type 'xsd:boolean'
        bool *GuaranteedFrameRate;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderConfiguration); }
      public:
        /// Constructor with initializations
        tt__VideoEncoderConfiguration() : Encoding(), Resolution(), Quality(), RateControl(), MPEG4(), H264(), Multicast(), SessionTimeout(), __any(), GuaranteedFrameRate(), __anyAttribute() { }
        virtual ~tt__VideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:825 */
#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (278)
/* Type tt__JpegOptions2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:JpegOptions2': */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions {
      public:
        /// Required element 'tt:BitrateRange' of XSD type 'tt:IntRange'
        tt__IntRange *BitrateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegOptions2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegOptions2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegOptions2, default initialized and not managed by a soap context
        virtual tt__JpegOptions2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegOptions2); }
      public:
        /// Constructor with initializations
        tt__JpegOptions2() : BitrateRange(), __any(), __anyAttribute() { }
        virtual ~tt__JpegOptions2() { }
        /// Friend allocator used by soap_new_tt__JpegOptions2(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegOptions2 * SOAP_FMAC2 soap_instantiate_tt__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:831 */
#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (280)
/* Type tt__Mpeg4Options2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:Mpeg4Options2': */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options {
      public:
        /// Required element 'tt:BitrateRange' of XSD type 'tt:IntRange'
        tt__IntRange *BitrateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Options2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Options2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Options2, default initialized and not managed by a soap context
        virtual tt__Mpeg4Options2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Options2); }
      public:
        /// Constructor with initializations
        tt__Mpeg4Options2() : BitrateRange(), __any(), __anyAttribute() { }
        virtual ~tt__Mpeg4Options2() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Options2(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:837 */
#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (282)
/* Type tt__H264Options2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:H264Options2': */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options {
      public:
        /// Required element 'tt:BitrateRange' of XSD type 'tt:IntRange'
        tt__IntRange *BitrateRange;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Options2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Options2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Options2, default initialized and not managed by a soap context
        virtual tt__H264Options2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Options2); }
      public:
        /// Constructor with initializations
        tt__H264Options2() : BitrateRange(), __any(), __anyAttribute() { }
        virtual ~tt__H264Options2() { }
        /// Friend allocator used by soap_new_tt__H264Options2(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Options2 * SOAP_FMAC2 soap_instantiate_tt__H264Options2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:840 */
#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (283)
/* Type tt__VideoEncoder2Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoEncoder2Configuration': */
class SOAP_CMAC tt__VideoEncoder2Configuration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Required element 'tt:Resolution' of XSD type 'tt:VideoResolution2'
        tt__VideoResolution2 *Resolution;
        /// Optional element 'tt:RateControl' of XSD type 'tt:VideoRateControl2'
        tt__VideoRateControl2 *RateControl;
        /// Optional element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Quality' of XSD type 'xsd:float'
        float Quality;
        std::vector<char *> __any;
        /// optional attribute 'GovLength' of XSD type 'xsd:int'
        int *GovLength;
        /// optional attribute 'Profile' of XSD type 'xsd:string'
        std::string *Profile;
        /// optional attribute 'GuaranteedFrameRate' of XSD type 'xsd:boolean'
        bool *GuaranteedFrameRate;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoder2Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoder2Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoder2Configuration, default initialized and not managed by a soap context
        virtual tt__VideoEncoder2Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoder2Configuration); }
      public:
        /// Constructor with initializations
        tt__VideoEncoder2Configuration() : Encoding(), Resolution(), RateControl(), Multicast(), Quality(), __any(), GovLength(), Profile(), GuaranteedFrameRate(), __anyAttribute() { }
        virtual ~tt__VideoEncoder2Configuration() { }
        /// Friend allocator used by soap_new_tt__VideoEncoder2Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:852 */
#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (287)
/* Type tt__AudioSourceConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioSourceConfiguration': */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceToken' of XSD type 'tt:ReferenceToken'
        std::string SourceToken;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceConfiguration); }
      public:
        /// Constructor with initializations
        tt__AudioSourceConfiguration() : SourceToken(), __any(), __anyAttribute() { }
        virtual ~tt__AudioSourceConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:861 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (290)
/* Type tt__AudioEncoderConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioEncoderConfiguration': */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XSD type 'tt:AudioEncoding'
        tt__AudioEncoding Encoding;
        /// Required element 'tt:Bitrate' of XSD type 'xsd:int'
        int Bitrate;
        /// Required element 'tt:SampleRate' of XSD type 'xsd:int'
        int SampleRate;
        /// Required element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 SessionTimeout;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfiguration); }
      public:
        /// Constructor with initializations
        tt__AudioEncoderConfiguration() : Encoding(), Bitrate(), SampleRate(), Multicast(), SessionTimeout(), __any(), __anyAttribute() { }
        virtual ~tt__AudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:870 */
#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (293)
/* Type tt__AudioEncoder2Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioEncoder2Configuration': */
class SOAP_CMAC tt__AudioEncoder2Configuration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XSD type 'xsd:string'
        std::string Encoding;
        /// Optional element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Bitrate' of XSD type 'xsd:int'
        int Bitrate;
        /// Required element 'tt:SampleRate' of XSD type 'xsd:int'
        int SampleRate;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoder2Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoder2Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoder2Configuration, default initialized and not managed by a soap context
        virtual tt__AudioEncoder2Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoder2Configuration); }
      public:
        /// Constructor with initializations
        tt__AudioEncoder2Configuration() : Encoding(), Multicast(), Bitrate(), SampleRate(), __any(), __anyAttribute() { }
        virtual ~tt__AudioEncoder2Configuration() { }
        /// Friend allocator used by soap_new_tt__AudioEncoder2Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:876 */
#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (295)
/* Type tt__VideoAnalyticsConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoAnalyticsConfiguration': */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:AnalyticsEngineConfiguration' of XSD type 'tt:AnalyticsEngineConfiguration'
        tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;
        /// Required element 'tt:RuleEngineConfiguration' of XSD type 'tt:RuleEngineConfiguration'
        tt__RuleEngineConfiguration *RuleEngineConfiguration;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoAnalyticsConfiguration); }
      public:
        /// Constructor with initializations
        tt__VideoAnalyticsConfiguration() : AnalyticsEngineConfiguration(), RuleEngineConfiguration(), __any(), __anyAttribute() { }
        virtual ~tt__VideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:879 */
#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (296)
/* Type tt__MetadataConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:MetadataConfiguration': */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity {
      public:
        /// Optional element 'tt:PTZStatus' of XSD type 'tt:PTZFilter'
        tt__PTZFilter *PTZStatus;
        /// Optional element 'tt:Events' of XSD type 'tt:EventSubscription'
        tt__EventSubscription *Events;
        /// Optional element 'tt:Analytics' of XSD type 'xsd:boolean'
        bool *Analytics;
        /// Required element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 SessionTimeout;
        std::vector<char *> __any;
        /// Optional element 'tt:AnalyticsEngineConfiguration' of XSD type 'tt:AnalyticsEngineConfiguration'
        tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;
        /// Optional element 'tt:Extension' of XSD type 'tt:MetadataConfigurationExtension'
        tt__MetadataConfigurationExtension *Extension;
        /// optional attribute 'CompressionType' of XSD type 'xsd:string'
        std::string *CompressionType;
        /// optional attribute 'GeoLocation' of XSD type 'xsd:boolean'
        bool *GeoLocation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfiguration, default initialized and not managed by a soap context
        virtual tt__MetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfiguration); }
      public:
        /// Constructor with initializations
        tt__MetadataConfiguration() : PTZStatus(), Events(), Analytics(), Multicast(), SessionTimeout(), __any(), AnalyticsEngineConfiguration(), Extension(), CompressionType(), GeoLocation(), __anyAttribute() { }
        virtual ~tt__MetadataConfiguration() { }
        /// Friend allocator used by soap_new_tt__MetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_tt__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:906 */
#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (305)
/* Type tt__VideoOutput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoOutput': */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Layout' of XSD type 'tt:Layout'
        tt__Layout *Layout;
        /// Optional element 'tt:Resolution' of XSD type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Optional element 'tt:RefreshRate' of XSD type 'xsd:float'
        float *RefreshRate;
        /// Optional element 'tt:AspectRatio' of XSD type 'xsd:float'
        float *AspectRatio;
        /// Optional element 'tt:Extension' of XSD type 'tt:VideoOutputExtension'
        tt__VideoOutputExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutput, default initialized and not managed by a soap context
        virtual tt__VideoOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutput); }
      public:
        /// Constructor with initializations
        tt__VideoOutput() : Layout(), Resolution(), RefreshRate(), AspectRatio(), Extension(), __anyAttribute() { }
        virtual ~tt__VideoOutput() { }
        /// Friend allocator used by soap_new_tt__VideoOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutput * SOAP_FMAC2 soap_instantiate_tt__VideoOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:912 */
#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (307)
/* Type tt__VideoOutputConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:VideoOutputConfiguration': */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:OutputToken' of XSD type 'tt:ReferenceToken'
        std::string OutputToken;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputConfiguration); }
      public:
        /// Constructor with initializations
        tt__VideoOutputConfiguration() : OutputToken(), __any(), __anyAttribute() { }
        virtual ~tt__VideoOutputConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:933 */
#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (314)
/* Type tt__AudioOutput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioOutput': */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutput, default initialized and not managed by a soap context
        virtual tt__AudioOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutput); }
      public:
        /// Constructor with initializations
        tt__AudioOutput() : __any(), __anyAttribute() { }
        virtual ~tt__AudioOutput() { }
        /// Friend allocator used by soap_new_tt__AudioOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutput * SOAP_FMAC2 soap_instantiate_tt__AudioOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:936 */
#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (315)
/* Type tt__AudioOutputConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioOutputConfiguration': */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:OutputToken' of XSD type 'tt:ReferenceToken'
        std::string OutputToken;
        /// Optional element 'tt:SendPrimacy' of XSD type 'xsd:anyURI'
        std::string *SendPrimacy;
        /// Required element 'tt:OutputLevel' of XSD type 'xsd:int'
        int OutputLevel;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutputConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutputConfiguration); }
      public:
        /// Constructor with initializations
        tt__AudioOutputConfiguration() : OutputToken(), SendPrimacy(), OutputLevel(), __any(), __anyAttribute() { }
        virtual ~tt__AudioOutputConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:942 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (317)
/* Type tt__AudioDecoderConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AudioDecoderConfiguration': */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfiguration); }
      public:
        /// Constructor with initializations
        tt__AudioDecoderConfiguration() : __any(), __anyAttribute() { }
        virtual ~tt__AudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:975 */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (328)
/* Type tt__NetworkInterface is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:NetworkInterface': */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Enabled' of XSD type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Info' of XSD type 'tt:NetworkInterfaceInfo'
        tt__NetworkInterfaceInfo *Info;
        /// Optional element 'tt:Link' of XSD type 'tt:NetworkInterfaceLink'
        tt__NetworkInterfaceLink *Link;
        /// Optional element 'tt:IPv4' of XSD type 'tt:IPv4NetworkInterface'
        tt__IPv4NetworkInterface *IPv4;
        /// Optional element 'tt:IPv6' of XSD type 'tt:IPv6NetworkInterface'
        tt__IPv6NetworkInterface *IPv6;
        /// Optional element 'tt:Extension' of XSD type 'tt:NetworkInterfaceExtension'
        tt__NetworkInterfaceExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterface, default initialized and not managed by a soap context
        virtual tt__NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterface); }
      public:
        /// Constructor with initializations
        tt__NetworkInterface() : Enabled(), Info(), Link(), IPv4(), IPv6(), Extension(), __anyAttribute() { }
        virtual ~tt__NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1287 */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (432)
/* simple XSD type 'tt:CertificateUsage': */
class SOAP_CMAC tt__CertificateUsage {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// required attribute 'Critical' of XSD type 'xsd:boolean'
        bool Critical;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateUsage
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateUsage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateUsage, default initialized and not managed by a soap context
        virtual tt__CertificateUsage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateUsage); }
      public:
        /// Constructor with initializations
        tt__CertificateUsage() : __item(), Critical(), soap() { }
        virtual ~tt__CertificateUsage() { }
        /// Friend allocator used by soap_new_tt__CertificateUsage(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1314 */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (441)
/* Type tt__RelayOutput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:RelayOutput': */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Properties' of XSD type 'tt:RelayOutputSettings'
        tt__RelayOutputSettings *Properties;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutput, default initialized and not managed by a soap context
        virtual tt__RelayOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutput); }
      public:
        /// Constructor with initializations
        tt__RelayOutput() : Properties(), __any(), __anyAttribute() { }
        virtual ~tt__RelayOutput() { }
        /// Friend allocator used by soap_new_tt__RelayOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1317 */
#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (442)
/* Type tt__DigitalInput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:DigitalInput': */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity {
      public:
        std::vector<char *> __any;
        /// optional attribute 'IdleState' of XSD type 'tt:DigitalIdleState'
        tt__DigitalIdleState *IdleState;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__DigitalInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DigitalInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DigitalInput, default initialized and not managed by a soap context
        virtual tt__DigitalInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DigitalInput); }
      public:
        /// Constructor with initializations
        tt__DigitalInput() : __any(), IdleState(), __anyAttribute() { }
        virtual ~tt__DigitalInput() { }
        /// Friend allocator used by soap_new_tt__DigitalInput(struct soap*, int)
        friend SOAP_FMAC1 tt__DigitalInput * SOAP_FMAC2 soap_instantiate_tt__DigitalInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1320 */
#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (443)
/* Type tt__PTZNode is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:PTZNode': */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity {
      public:
        /// Optional element 'tt:Name' of XSD type 'tt:Name'
        std::string *Name;
        /// Required element 'tt:SupportedPTZSpaces' of XSD type 'tt:PTZSpaces'
        tt__PTZSpaces *SupportedPTZSpaces;
        /// Required element 'tt:MaximumNumberOfPresets' of XSD type 'xsd:int'
        int MaximumNumberOfPresets;
        /// Required element 'tt:HomeSupported' of XSD type 'xsd:boolean'
        bool HomeSupported;
        /// Optional element 'tt:AuxiliaryCommands' of XSD type 'tt:AuxiliaryData'
        std::vector<std::string> AuxiliaryCommands;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZNodeExtension'
        tt__PTZNodeExtension *Extension;
        /// optional attribute 'FixedHomePosition' of XSD type 'xsd:boolean'
        bool *FixedHomePosition;
        /// optional attribute 'GeoMove' of XSD type 'xsd:boolean'
        bool *GeoMove;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNode
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNode, default initialized and not managed by a soap context
        virtual tt__PTZNode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNode); }
      public:
        /// Constructor with initializations
        tt__PTZNode() : Name(), SupportedPTZSpaces(), MaximumNumberOfPresets(), HomeSupported(), AuxiliaryCommands(), Extension(), FixedHomePosition(), GeoMove(), __anyAttribute() { }
        virtual ~tt__PTZNode() { }
        /// Friend allocator used by soap_new_tt__PTZNode(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1335 */
#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (448)
/* Type tt__PTZConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:PTZConfiguration': */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:NodeToken' of XSD type 'tt:ReferenceToken'
        std::string NodeToken;
        /// Optional element 'tt:DefaultAbsolutePantTiltPositionSpace' of XSD type 'xsd:anyURI'
        std::string *DefaultAbsolutePantTiltPositionSpace;
        /// Optional element 'tt:DefaultAbsoluteZoomPositionSpace' of XSD type 'xsd:anyURI'
        std::string *DefaultAbsoluteZoomPositionSpace;
        /// Optional element 'tt:DefaultRelativePanTiltTranslationSpace' of XSD type 'xsd:anyURI'
        std::string *DefaultRelativePanTiltTranslationSpace;
        /// Optional element 'tt:DefaultRelativeZoomTranslationSpace' of XSD type 'xsd:anyURI'
        std::string *DefaultRelativeZoomTranslationSpace;
        /// Optional element 'tt:DefaultContinuousPanTiltVelocitySpace' of XSD type 'xsd:anyURI'
        std::string *DefaultContinuousPanTiltVelocitySpace;
        /// Optional element 'tt:DefaultContinuousZoomVelocitySpace' of XSD type 'xsd:anyURI'
        std::string *DefaultContinuousZoomVelocitySpace;
        /// Optional element 'tt:DefaultPTZSpeed' of XSD type 'tt:PTZSpeed'
        tt__PTZSpeed *DefaultPTZSpeed;
        /// Optional element 'tt:DefaultPTZTimeout' of XSD type 'xsd:duration'
        LONG64 *DefaultPTZTimeout;
        /// Optional element 'tt:PanTiltLimits' of XSD type 'tt:PanTiltLimits'
        tt__PanTiltLimits *PanTiltLimits;
        /// Optional element 'tt:ZoomLimits' of XSD type 'tt:ZoomLimits'
        tt__ZoomLimits *ZoomLimits;
        /// Optional element 'tt:Extension' of XSD type 'tt:PTZConfigurationExtension'
        tt__PTZConfigurationExtension *Extension;
        /// optional attribute 'MoveRamp' of XSD type 'xsd:int'
        int *MoveRamp;
        /// optional attribute 'PresetRamp' of XSD type 'xsd:int'
        int *PresetRamp;
        /// optional attribute 'PresetTourRamp' of XSD type 'xsd:int'
        int *PresetTourRamp;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfiguration, default initialized and not managed by a soap context
        virtual tt__PTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfiguration); }
      public:
        /// Constructor with initializations
        tt__PTZConfiguration() : NodeToken(), DefaultAbsolutePantTiltPositionSpace(), DefaultAbsoluteZoomPositionSpace(), DefaultRelativePanTiltTranslationSpace(), DefaultRelativeZoomTranslationSpace(), DefaultContinuousPanTiltVelocitySpace(), DefaultContinuousZoomVelocitySpace(), DefaultPTZSpeed(), DefaultPTZTimeout(), PanTiltLimits(), ZoomLimits(), Extension(), MoveRamp(), PresetRamp(), PresetTourRamp(), __anyAttribute() { }
        virtual ~tt__PTZConfiguration() { }
        /// Friend allocator used by soap_new_tt__PTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1788 */
#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (599)
/* Type tt__EventFilter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:EventFilter': */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType {
      public:
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventFilter, default initialized and not managed by a soap context
        virtual tt__EventFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventFilter); }
      public:
        /// Constructor with initializations
        tt__EventFilter() : __anyAttribute() { }
        virtual ~tt__EventFilter() { }
        /// Friend allocator used by soap_new_tt__EventFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__EventFilter * SOAP_FMAC2 soap_instantiate_tt__EventFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1896 */
#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (635)
/* Type tt__AnalyticsEngine is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AnalyticsEngine': */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:AnalyticsEngineConfiguration' of XSD type 'tt:AnalyticsDeviceEngineConfiguration'
        tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngine
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngine; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngine, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngine *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngine); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngine() : AnalyticsEngineConfiguration(), __any(), __anyAttribute() { }
        virtual ~tt__AnalyticsEngine() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngine(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngine * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngine(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1914 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (641)
/* Type tt__AnalyticsEngineInput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AnalyticsEngineInput': */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceIdentification' of XSD type 'tt:SourceIdentification'
        tt__SourceIdentification *SourceIdentification;
        /// Required element 'tt:VideoInput' of XSD type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *VideoInput;
        /// Required element 'tt:MetadataInput' of XSD type 'tt:MetadataInput'
        tt__MetadataInput *MetadataInput;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInput, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInput); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineInput() : SourceIdentification(), VideoInput(), MetadataInput(), __any(), __anyAttribute() { }
        virtual ~tt__AnalyticsEngineInput() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInput(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInput * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1929 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (646)
/* Type tt__AnalyticsEngineControl is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:AnalyticsEngineControl': */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:EngineToken' of XSD type 'tt:ReferenceToken'
        std::string EngineToken;
        /// Required element 'tt:EngineConfigToken' of XSD type 'tt:ReferenceToken'
        std::string EngineConfigToken;
        /// Required element 'tt:InputToken' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> InputToken;
        /// Required element 'tt:ReceiverToken' of XSD type 'tt:ReferenceToken'
        std::vector<std::string> ReceiverToken;
        /// Optional element 'tt:Multicast' of XSD type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Subscription' of XSD type 'tt:Config'
        tt__Config *Subscription;
        /// Required element 'tt:Mode' of XSD type 'tt:ModeOfOperation'
        tt__ModeOfOperation Mode;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineControl
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineControl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineControl, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineControl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineControl); }
      public:
        /// Constructor with initializations
        tt__AnalyticsEngineControl() : EngineToken(), EngineConfigToken(), InputToken(), ReceiverToken(), Multicast(), Subscription(), Mode(), __any(), __anyAttribute() { }
        virtual ~tt__AnalyticsEngineControl() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineControl(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineControl * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineControl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2010 */
#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (673)
/* Type tt__OSDConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'tt:OSDConfiguration': */
class SOAP_CMAC tt__OSDConfiguration : public tt__DeviceEntity {
      public:
        /// Required element 'tt:VideoSourceConfigurationToken' of XSD type 'tt:OSDReference'
        tt__OSDReference *VideoSourceConfigurationToken;
        /// Required element 'tt:Type' of XSD type 'tt:OSDType'
        tt__OSDType Type;
        /// Required element 'tt:Position' of XSD type 'tt:OSDPosConfiguration'
        tt__OSDPosConfiguration *Position;
        /// Optional element 'tt:TextString' of XSD type 'tt:OSDTextConfiguration'
        tt__OSDTextConfiguration *TextString;
        /// Optional element 'tt:Image' of XSD type 'tt:OSDImgConfiguration'
        tt__OSDImgConfiguration *Image;
        /// Optional element 'tt:Extension' of XSD type 'tt:OSDConfigurationExtension'
        tt__OSDConfigurationExtension *Extension;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfiguration); }
      public:
        /// Constructor with initializations
        tt__OSDConfiguration() : VideoSourceConfigurationToken(), Type(), Position(), TextString(), Image(), Extension(), __anyAttribute() { }
        virtual ~tt__OSDConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2115 */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (708)
/* Type wsnt__SubscribeCreationFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:SubscribeCreationFailedFaultType': */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscribeCreationFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__SubscribeCreationFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscribeCreationFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__SubscribeCreationFailedFaultType() { }
        virtual ~wsnt__SubscribeCreationFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2118 */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (709)
/* Type wsnt__InvalidFilterFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidFilterFaultType': */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:UnknownFilter' of XSD type 'xsd:QName'
        std::vector<std::string> UnknownFilter;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidFilterFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidFilterFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidFilterFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidFilterFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidFilterFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidFilterFaultType() : UnknownFilter() { }
        virtual ~wsnt__InvalidFilterFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidFilterFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2121 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (710)
/* Type wsnt__TopicExpressionDialectUnknownFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:TopicExpressionDialectUnknownFaultType': */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionDialectUnknownFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionDialectUnknownFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionDialectUnknownFaultType); }
      public:
        /// Constructor with initializations
        wsnt__TopicExpressionDialectUnknownFaultType() { }
        virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2124 */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (711)
/* Type wsnt__InvalidTopicExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidTopicExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidTopicExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidTopicExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidTopicExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidTopicExpressionFaultType() { }
        virtual ~wsnt__InvalidTopicExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2127 */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (712)
/* Type wsnt__TopicNotSupportedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:TopicNotSupportedFaultType': */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicNotSupportedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__TopicNotSupportedFaultType() { }
        virtual ~wsnt__TopicNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2130 */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (713)
/* Type wsnt__MultipleTopicsSpecifiedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:MultipleTopicsSpecifiedFaultType': */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__MultipleTopicsSpecifiedFaultType, default initialized and not managed by a soap context
        virtual wsnt__MultipleTopicsSpecifiedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__MultipleTopicsSpecifiedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__MultipleTopicsSpecifiedFaultType() { }
        virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2133 */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (714)
/* Type wsnt__InvalidProducerPropertiesExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidProducerPropertiesExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidProducerPropertiesExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidProducerPropertiesExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidProducerPropertiesExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2136 */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (715)
/* Type wsnt__InvalidMessageContentExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidMessageContentExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidMessageContentExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidMessageContentExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidMessageContentExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidMessageContentExpressionFaultType() { }
        virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2139 */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (716)
/* Type wsnt__UnrecognizedPolicyRequestFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnrecognizedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Optional element 'wsnt:UnrecognizedPolicy' of XSD type 'xsd:QName'
        std::vector<std::string> UnrecognizedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnrecognizedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnrecognizedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnrecognizedPolicyRequestFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnrecognizedPolicyRequestFaultType() : UnrecognizedPolicy() { }
        virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2142 */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (717)
/* Type wsnt__UnsupportedPolicyRequestFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnsupportedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Optional element 'wsnt:UnsupportedPolicy' of XSD type 'xsd:QName'
        std::vector<std::string> UnsupportedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnsupportedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnsupportedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnsupportedPolicyRequestFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnsupportedPolicyRequestFaultType() : UnsupportedPolicy() { }
        virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2145 */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (718)
/* Type wsnt__NotifyMessageNotSupportedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:NotifyMessageNotSupportedFaultType': */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotifyMessageNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__NotifyMessageNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotifyMessageNotSupportedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__NotifyMessageNotSupportedFaultType() { }
        virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2148 */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (719)
/* Type wsnt__UnacceptableInitialTerminationTimeFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnacceptableInitialTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XSD type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XSD type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableInitialTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableInitialTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableInitialTerminationTimeFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnacceptableInitialTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2151 */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (720)
/* Type wsnt__NoCurrentMessageOnTopicFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:NoCurrentMessageOnTopicFaultType': */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NoCurrentMessageOnTopicFaultType, default initialized and not managed by a soap context
        virtual wsnt__NoCurrentMessageOnTopicFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NoCurrentMessageOnTopicFaultType); }
      public:
        /// Constructor with initializations
        wsnt__NoCurrentMessageOnTopicFaultType() { }
        virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2154 */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (721)
/* Type wsnt__UnableToGetMessagesFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToGetMessagesFaultType': */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToGetMessagesFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToGetMessagesFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToGetMessagesFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToGetMessagesFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToGetMessagesFaultType() { }
        virtual ~wsnt__UnableToGetMessagesFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToGetMessagesFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2157 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (722)
/* Type wsnt__UnableToDestroyPullPointFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToDestroyPullPointFaultType': */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroyPullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroyPullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroyPullPointFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToDestroyPullPointFaultType() { }
        virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2160 */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (723)
/* Type wsnt__UnableToCreatePullPointFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToCreatePullPointFaultType': */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToCreatePullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToCreatePullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToCreatePullPointFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToCreatePullPointFaultType() { }
        virtual ~wsnt__UnableToCreatePullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2163 */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (724)
/* Type wsnt__UnacceptableTerminationTimeFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnacceptableTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XSD type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XSD type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableTerminationTimeFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnacceptableTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2166 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (725)
/* Type wsnt__UnableToDestroySubscriptionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToDestroySubscriptionFaultType': */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroySubscriptionFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroySubscriptionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroySubscriptionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToDestroySubscriptionFaultType() { }
        virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2169 */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (726)
/* Type wsnt__PauseFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:PauseFailedFaultType': */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__PauseFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__PauseFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__PauseFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__PauseFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__PauseFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__PauseFailedFaultType() { }
        virtual ~wsnt__PauseFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__PauseFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2172 */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (727)
/* Type wsnt__ResumeFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:ResumeFailedFaultType': */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__ResumeFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__ResumeFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__ResumeFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__ResumeFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__ResumeFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__ResumeFailedFaultType() { }
        virtual ~wsnt__ResumeFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__ResumeFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:27273 */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (1393)
/* complex XSD type 'wstop:TopicNamespaceType-Topic': */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic {
      public:
        /// Optional element 'wstop:documentation' of XSD type 'wstop:Documentation'
        wstop__Documentation *documentation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Optional element 'wstop:MessagePattern' of XSD type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicType'
        std::vector<wstop__TopicType *> Topic;
        std::vector<char *> __any;
        /// required attribute 'name' of XSD type 'xsd:NCName'
        std::string name;
        /// optional attribute 'messageTypes' of XSD type 'xsd:QName'
        std::string *messageTypes;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
        /// optional attribute 'parent' of XSD type 'wstop:ConcreteTopicExpression'
        std::string *parent;
      public:
        /// Return unique type id SOAP_TYPE__wstop__TopicNamespaceType_Topic
        virtual long soap_type(void) const { return SOAP_TYPE__wstop__TopicNamespaceType_Topic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wstop__TopicNamespaceType_Topic, default initialized and not managed by a soap context
        virtual _wstop__TopicNamespaceType_Topic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wstop__TopicNamespaceType_Topic); }
      public:
        /// Constructor with initializations
        _wstop__TopicNamespaceType_Topic() : documentation(), __anyAttribute(), MessagePattern(), Topic(), __any(), name(), messageTypes(), final_((bool)0), parent() { }
        virtual ~_wstop__TopicNamespaceType_Topic() { }
        /// Friend allocator used by soap_new__wstop__TopicNamespaceType_Topic(struct soap*, int)
        friend SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2253 */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (754)
/* Type wstop__TopicNamespaceType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicNamespaceType': */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicNamespaceType-Topic'
        std::vector<_wstop__TopicNamespaceType_Topic> Topic;
        std::vector<char *> __any;
        /// optional attribute 'name' of XSD type 'xsd:NCName'
        std::string *name;
        /// required attribute 'targetNamespace' of XSD type 'xsd:anyURI'
        std::string targetNamespace;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicNamespaceType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicNamespaceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicNamespaceType, default initialized and not managed by a soap context
        virtual wstop__TopicNamespaceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicNamespaceType); }
      public:
        /// Constructor with initializations
        wstop__TopicNamespaceType() : Topic(), __any(), name(), targetNamespace(), final_((bool)0) { }
        virtual ~wstop__TopicNamespaceType() { }
        /// Friend allocator used by soap_new_wstop__TopicNamespaceType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2256 */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (755)
/* Type wstop__TopicType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicType': */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:MessagePattern' of XSD type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicType'
        std::vector<wstop__TopicType *> Topic;
        std::vector<char *> __any;
        /// required attribute 'name' of XSD type 'xsd:NCName'
        std::string name;
        /// optional attribute 'messageTypes' of XSD type 'xsd:QName'
        std::string *messageTypes;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicType, default initialized and not managed by a soap context
        virtual wstop__TopicType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicType); }
      public:
        /// Constructor with initializations
        wstop__TopicType() : MessagePattern(), Topic(), __any(), name(), messageTypes(), final_((bool)0) { }
        virtual ~wstop__TopicType() { }
        /// Friend allocator used by soap_new_wstop__TopicType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2259 */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (756)
/* Type wstop__TopicSetType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicSetType': */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicSetType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicSetType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicSetType, default initialized and not managed by a soap context
        virtual wstop__TopicSetType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicSetType); }
      public:
        /// Constructor with initializations
        wstop__TopicSetType() : __any() { }
        virtual ~wstop__TopicSetType() { }
        /// Friend allocator used by soap_new_wstop__TopicSetType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1962 */
#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (657)
/* simple XSD type 'tt:OSDReference': */
class SOAP_CMAC tt__OSDReference {
      public:
        /// Simple content of XSD type 'tt:ReferenceToken' wrapped by this struct
        std::string __item;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDReference
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDReference, default initialized and not managed by a soap context
        virtual tt__OSDReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDReference); }
      public:
        /// Constructor with initializations
        tt__OSDReference() : __item(), __anyAttribute(), soap() { }
        virtual ~tt__OSDReference() { }
        /// Friend allocator used by soap_new_tt__OSDReference(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDReference * SOAP_FMAC2 soap_instantiate_tt__OSDReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:27966 */
#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (1463)
/* Wrapper: */
struct SOAP_CMAC __trt__GetServiceCapabilities {
      public:
        /** Optional element 'trt:GetServiceCapabilities' of XSD type 'trt:GetServiceCapabilities' */
        _trt__GetServiceCapabilities *trt__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___trt__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __trt__GetServiceCapabilities() : trt__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28034 */
#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (1467)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSources {
      public:
        /** Optional element 'trt:GetVideoSources' of XSD type 'trt:GetVideoSources' */
        _trt__GetVideoSources *trt__GetVideoSources;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSources */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSources; }
        /** Constructor with member initializations */
        __trt__GetVideoSources() : trt__GetVideoSources() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSources * SOAP_FMAC2 soap_instantiate___trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28102 */
#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (1471)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSources {
      public:
        /** Optional element 'trt:GetAudioSources' of XSD type 'trt:GetAudioSources' */
        _trt__GetAudioSources *trt__GetAudioSources;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSources */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSources; }
        /** Constructor with member initializations */
        __trt__GetAudioSources() : trt__GetAudioSources() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSources * SOAP_FMAC2 soap_instantiate___trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28170 */
#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (1475)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputs {
      public:
        /** Optional element 'trt:GetAudioOutputs' of XSD type 'trt:GetAudioOutputs' */
        _trt__GetAudioOutputs *trt__GetAudioOutputs;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputs */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputs; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputs() : trt__GetAudioOutputs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28242 */
#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (1479)
/* Wrapper: */
struct SOAP_CMAC __trt__CreateProfile {
      public:
        /** Optional element 'trt:CreateProfile' of XSD type 'trt:CreateProfile' */
        _trt__CreateProfile *trt__CreateProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__CreateProfile */
        long soap_type() const { return SOAP_TYPE___trt__CreateProfile; }
        /** Constructor with member initializations */
        __trt__CreateProfile() : trt__CreateProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__CreateProfile * SOAP_FMAC2 soap_instantiate___trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28311 */
#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (1483)
/* Wrapper: */
struct SOAP_CMAC __trt__GetProfile {
      public:
        /** Optional element 'trt:GetProfile' of XSD type 'trt:GetProfile' */
        _trt__GetProfile *trt__GetProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetProfile */
        long soap_type() const { return SOAP_TYPE___trt__GetProfile; }
        /** Constructor with member initializations */
        __trt__GetProfile() : trt__GetProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetProfile * SOAP_FMAC2 soap_instantiate___trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28384 */
#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (1487)
/* Wrapper: */
struct SOAP_CMAC __trt__GetProfiles {
      public:
        /** Optional element 'trt:GetProfiles' of XSD type 'trt:GetProfiles' */
        _trt__GetProfiles *trt__GetProfiles;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetProfiles */
        long soap_type() const { return SOAP_TYPE___trt__GetProfiles; }
        /** Constructor with member initializations */
        __trt__GetProfiles() : trt__GetProfiles() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetProfiles * SOAP_FMAC2 soap_instantiate___trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28459 */
#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (1491)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:AddVideoEncoderConfiguration' of XSD type 'trt:AddVideoEncoderConfiguration' */
        _trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoEncoderConfiguration() : trt__AddVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28530 */
#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (1495)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoSourceConfiguration {
      public:
        /** Optional element 'trt:AddVideoSourceConfiguration' of XSD type 'trt:AddVideoSourceConfiguration' */
        _trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoSourceConfiguration() : trt__AddVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28605 */
#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (1499)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:AddAudioEncoderConfiguration' of XSD type 'trt:AddAudioEncoderConfiguration' */
        _trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioEncoderConfiguration() : trt__AddAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28676 */
#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (1503)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioSourceConfiguration {
      public:
        /** Optional element 'trt:AddAudioSourceConfiguration' of XSD type 'trt:AddAudioSourceConfiguration' */
        _trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioSourceConfiguration() : trt__AddAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28751 */
#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (1507)
/* Wrapper: */
struct SOAP_CMAC __trt__AddPTZConfiguration {
      public:
        /** Optional element 'trt:AddPTZConfiguration' of XSD type 'trt:AddPTZConfiguration' */
        _trt__AddPTZConfiguration *trt__AddPTZConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddPTZConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddPTZConfiguration; }
        /** Constructor with member initializations */
        __trt__AddPTZConfiguration() : trt__AddPTZConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28829 */
#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (1511)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:AddVideoAnalyticsConfiguration' of XSD type 'trt:AddVideoAnalyticsConfiguration' */
        _trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoAnalyticsConfiguration() : trt__AddVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28901 */
#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (1515)
/* Wrapper: */
struct SOAP_CMAC __trt__AddMetadataConfiguration {
      public:
        /** Optional element 'trt:AddMetadataConfiguration' of XSD type 'trt:AddMetadataConfiguration' */
        _trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__AddMetadataConfiguration() : trt__AddMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:28971 */
#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (1519)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioOutputConfiguration {
      public:
        /** Optional element 'trt:AddAudioOutputConfiguration' of XSD type 'trt:AddAudioOutputConfiguration' */
        _trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioOutputConfiguration() : trt__AddAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29041 */
#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (1523)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:AddAudioDecoderConfiguration' of XSD type 'trt:AddAudioDecoderConfiguration' */
        _trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioDecoderConfiguration() : trt__AddAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29112 */
#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (1527)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoEncoderConfiguration' of XSD type 'trt:RemoveVideoEncoderConfiguration' */
        _trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoEncoderConfiguration() : trt__RemoveVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29185 */
#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (1531)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoSourceConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoSourceConfiguration' of XSD type 'trt:RemoveVideoSourceConfiguration' */
        _trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoSourceConfiguration() : trt__RemoveVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29257 */
#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (1535)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioEncoderConfiguration' of XSD type 'trt:RemoveAudioEncoderConfiguration' */
        _trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioEncoderConfiguration() : trt__RemoveAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29331 */
#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (1539)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioSourceConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioSourceConfiguration' of XSD type 'trt:RemoveAudioSourceConfiguration' */
        _trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioSourceConfiguration() : trt__RemoveAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29402 */
#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (1543)
/* Wrapper: */
struct SOAP_CMAC __trt__RemovePTZConfiguration {
      public:
        /** Optional element 'trt:RemovePTZConfiguration' of XSD type 'trt:RemovePTZConfiguration' */
        _trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemovePTZConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemovePTZConfiguration; }
        /** Constructor with member initializations */
        __trt__RemovePTZConfiguration() : trt__RemovePTZConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29473 */
#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (1547)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoAnalyticsConfiguration' of XSD type 'trt:RemoveVideoAnalyticsConfiguration' */
        _trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoAnalyticsConfiguration() : trt__RemoveVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29543 */
#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (1551)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveMetadataConfiguration {
      public:
        /** Optional element 'trt:RemoveMetadataConfiguration' of XSD type 'trt:RemoveMetadataConfiguration' */
        _trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveMetadataConfiguration() : trt__RemoveMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29613 */
#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (1555)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioOutputConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioOutputConfiguration' of XSD type 'trt:RemoveAudioOutputConfiguration' */
        _trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioOutputConfiguration() : trt__RemoveAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29683 */
#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (1559)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioDecoderConfiguration' of XSD type 'trt:RemoveAudioDecoderConfiguration' */
        _trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioDecoderConfiguration() : trt__RemoveAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29752 */
#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (1563)
/* Wrapper: */
struct SOAP_CMAC __trt__DeleteProfile {
      public:
        /** Optional element 'trt:DeleteProfile' of XSD type 'trt:DeleteProfile' */
        _trt__DeleteProfile *trt__DeleteProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__DeleteProfile */
        long soap_type() const { return SOAP_TYPE___trt__DeleteProfile; }
        /** Constructor with member initializations */
        __trt__DeleteProfile() : trt__DeleteProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__DeleteProfile * SOAP_FMAC2 soap_instantiate___trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29822 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (1567)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfigurations {
      public:
        /** Optional element 'trt:GetVideoSourceConfigurations' of XSD type 'trt:GetVideoSourceConfigurations' */
        _trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfigurations() : trt__GetVideoSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29893 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (1571)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfigurations {
      public:
        /** Optional element 'trt:GetVideoEncoderConfigurations' of XSD type 'trt:GetVideoEncoderConfigurations' */
        _trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfigurations() : trt__GetVideoEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:29964 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (1575)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfigurations {
      public:
        /** Optional element 'trt:GetAudioSourceConfigurations' of XSD type 'trt:GetAudioSourceConfigurations' */
        _trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfigurations() : trt__GetAudioSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30034 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (1579)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfigurations {
      public:
        /** Optional element 'trt:GetAudioEncoderConfigurations' of XSD type 'trt:GetAudioEncoderConfigurations' */
        _trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfigurations() : trt__GetAudioEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30104 */
#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (1583)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoAnalyticsConfigurations {
      public:
        /** Optional element 'trt:GetVideoAnalyticsConfigurations' of XSD type 'trt:GetVideoAnalyticsConfigurations' */
        _trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoAnalyticsConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoAnalyticsConfigurations() : trt__GetVideoAnalyticsConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30173 */
#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (1587)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfigurations {
      public:
        /** Optional element 'trt:GetMetadataConfigurations' of XSD type 'trt:GetMetadataConfigurations' */
        _trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfigurations; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfigurations() : trt__GetMetadataConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30242 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (1591)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfigurations {
      public:
        /** Optional element 'trt:GetAudioOutputConfigurations' of XSD type 'trt:GetAudioOutputConfigurations' */
        _trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfigurations() : trt__GetAudioOutputConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30313 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (1595)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfigurations {
      public:
        /** Optional element 'trt:GetAudioDecoderConfigurations' of XSD type 'trt:GetAudioDecoderConfigurations' */
        _trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfigurations() : trt__GetAudioDecoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30382 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (1599)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfiguration {
      public:
        /** Optional element 'trt:GetVideoSourceConfiguration' of XSD type 'trt:GetVideoSourceConfiguration' */
        _trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfiguration() : trt__GetVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30451 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (1603)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:GetVideoEncoderConfiguration' of XSD type 'trt:GetVideoEncoderConfiguration' */
        _trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfiguration() : trt__GetVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30520 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (1607)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfiguration {
      public:
        /** Optional element 'trt:GetAudioSourceConfiguration' of XSD type 'trt:GetAudioSourceConfiguration' */
        _trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfiguration() : trt__GetAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30589 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (1611)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:GetAudioEncoderConfiguration' of XSD type 'trt:GetAudioEncoderConfiguration' */
        _trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfiguration() : trt__GetAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30658 */
#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (1615)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:GetVideoAnalyticsConfiguration' of XSD type 'trt:GetVideoAnalyticsConfiguration' */
        _trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoAnalyticsConfiguration() : trt__GetVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30727 */
#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (1619)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfiguration {
      public:
        /** Optional element 'trt:GetMetadataConfiguration' of XSD type 'trt:GetMetadataConfiguration' */
        _trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfiguration() : trt__GetMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30796 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (1623)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfiguration {
      public:
        /** Optional element 'trt:GetAudioOutputConfiguration' of XSD type 'trt:GetAudioOutputConfiguration' */
        _trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfiguration() : trt__GetAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30865 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (1627)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:GetAudioDecoderConfiguration' of XSD type 'trt:GetAudioDecoderConfiguration' */
        _trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfiguration() : trt__GetAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:30937 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (1631)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoEncoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoEncoderConfigurations' of XSD type 'trt:GetCompatibleVideoEncoderConfigurations' */
        _trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoEncoderConfigurations() : trt__GetCompatibleVideoEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31011 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (1635)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoSourceConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoSourceConfigurations' of XSD type 'trt:GetCompatibleVideoSourceConfigurations' */
        _trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoSourceConfigurations() : trt__GetCompatibleVideoSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31083 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (1639)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioEncoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioEncoderConfigurations' of XSD type 'trt:GetCompatibleAudioEncoderConfigurations' */
        _trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioEncoderConfigurations() : trt__GetCompatibleAudioEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31155 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (1643)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioSourceConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioSourceConfigurations' of XSD type 'trt:GetCompatibleAudioSourceConfigurations' */
        _trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioSourceConfigurations() : trt__GetCompatibleAudioSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31227 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (1647)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoAnalyticsConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoAnalyticsConfigurations' of XSD type 'trt:GetCompatibleVideoAnalyticsConfigurations' */
        _trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoAnalyticsConfigurations() : trt__GetCompatibleVideoAnalyticsConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31299 */
#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (1651)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleMetadataConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleMetadataConfigurations' of XSD type 'trt:GetCompatibleMetadataConfigurations' */
        _trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleMetadataConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleMetadataConfigurations() : trt__GetCompatibleMetadataConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31370 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (1655)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioOutputConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioOutputConfigurations' of XSD type 'trt:GetCompatibleAudioOutputConfigurations' */
        _trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioOutputConfigurations() : trt__GetCompatibleAudioOutputConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31441 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (1659)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioDecoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioDecoderConfigurations' of XSD type 'trt:GetCompatibleAudioDecoderConfigurations' */
        _trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioDecoderConfigurations() : trt__GetCompatibleAudioDecoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31514 */
#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (1663)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoSourceConfiguration {
      public:
        /** Optional element 'trt:SetVideoSourceConfiguration' of XSD type 'trt:SetVideoSourceConfiguration' */
        _trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoSourceConfiguration() : trt__SetVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31591 */
#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (1667)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:SetVideoEncoderConfiguration' of XSD type 'trt:SetVideoEncoderConfiguration' */
        _trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoEncoderConfiguration() : trt__SetVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31666 */
#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (1671)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioSourceConfiguration {
      public:
        /** Optional element 'trt:SetAudioSourceConfiguration' of XSD type 'trt:SetAudioSourceConfiguration' */
        _trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioSourceConfiguration() : trt__SetAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31742 */
#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (1675)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:SetAudioEncoderConfiguration' of XSD type 'trt:SetAudioEncoderConfiguration' */
        _trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioEncoderConfiguration() : trt__SetAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31820 */
#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (1679)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:SetVideoAnalyticsConfiguration' of XSD type 'trt:SetVideoAnalyticsConfiguration' */
        _trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoAnalyticsConfiguration() : trt__SetVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31897 */
#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (1683)
/* Wrapper: */
struct SOAP_CMAC __trt__SetMetadataConfiguration {
      public:
        /** Optional element 'trt:SetMetadataConfiguration' of XSD type 'trt:SetMetadataConfiguration' */
        _trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__SetMetadataConfiguration() : trt__SetMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31967 */
#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (1687)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioOutputConfiguration {
      public:
        /** Optional element 'trt:SetAudioOutputConfiguration' of XSD type 'trt:SetAudioOutputConfiguration' */
        _trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioOutputConfiguration() : trt__SetAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32037 */
#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (1691)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:SetAudioDecoderConfiguration' of XSD type 'trt:SetAudioDecoderConfiguration' */
        _trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioDecoderConfiguration() : trt__SetAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32111 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (1695)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfigurationOptions {
      public:
        /** Optional element 'trt:GetVideoSourceConfigurationOptions' of XSD type 'trt:GetVideoSourceConfigurationOptions' */
        _trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfigurationOptions() : trt__GetVideoSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32193 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (1699)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetVideoEncoderConfigurationOptions' of XSD type 'trt:GetVideoEncoderConfigurationOptions' */
        _trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfigurationOptions() : trt__GetVideoEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32267 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (1703)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioSourceConfigurationOptions' of XSD type 'trt:GetAudioSourceConfigurationOptions' */
        _trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfigurationOptions() : trt__GetAudioSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32337 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (1707)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioEncoderConfigurationOptions' of XSD type 'trt:GetAudioEncoderConfigurationOptions' */
        _trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfigurationOptions() : trt__GetAudioEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32406 */
#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (1711)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfigurationOptions {
      public:
        /** Optional element 'trt:GetMetadataConfigurationOptions' of XSD type 'trt:GetMetadataConfigurationOptions' */
        _trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfigurationOptions() : trt__GetMetadataConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32475 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (1715)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioOutputConfigurationOptions' of XSD type 'trt:GetAudioOutputConfigurationOptions' */
        _trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfigurationOptions() : trt__GetAudioOutputConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32545 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (1719)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioDecoderConfigurationOptions' of XSD type 'trt:GetAudioDecoderConfigurationOptions' */
        _trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfigurationOptions() : trt__GetAudioDecoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32615 */
#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (1723)
/* Wrapper: */
struct SOAP_CMAC __trt__GetGuaranteedNumberOfVideoEncoderInstances {
      public:
        /** Optional element 'trt:GetGuaranteedNumberOfVideoEncoderInstances' of XSD type 'trt:GetGuaranteedNumberOfVideoEncoderInstances' */
        _trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances */
        long soap_type() const { return SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances; }
        /** Constructor with member initializations */
        __trt__GetGuaranteedNumberOfVideoEncoderInstances() : trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32706 */
#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (1727)
/* Wrapper: */
struct SOAP_CMAC __trt__GetStreamUri {
      public:
        /** Optional element 'trt:GetStreamUri' of XSD type 'trt:GetStreamUri' */
        _trt__GetStreamUri *trt__GetStreamUri;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetStreamUri */
        long soap_type() const { return SOAP_TYPE___trt__GetStreamUri; }
        /** Constructor with member initializations */
        __trt__GetStreamUri() : trt__GetStreamUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetStreamUri * SOAP_FMAC2 soap_instantiate___trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32781 */
#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (1731)
/* Wrapper: */
struct SOAP_CMAC __trt__StartMulticastStreaming {
      public:
        /** Optional element 'trt:StartMulticastStreaming' of XSD type 'trt:StartMulticastStreaming' */
        _trt__StartMulticastStreaming *trt__StartMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___trt__StartMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___trt__StartMulticastStreaming; }
        /** Constructor with member initializations */
        __trt__StartMulticastStreaming() : trt__StartMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32849 */
#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (1735)
/* Wrapper: */
struct SOAP_CMAC __trt__StopMulticastStreaming {
      public:
        /** Optional element 'trt:StopMulticastStreaming' of XSD type 'trt:StopMulticastStreaming' */
        _trt__StopMulticastStreaming *trt__StopMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___trt__StopMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___trt__StopMulticastStreaming; }
        /** Constructor with member initializations */
        __trt__StopMulticastStreaming() : trt__StopMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:32934 */
#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (1739)
/* Wrapper: */
struct SOAP_CMAC __trt__SetSynchronizationPoint {
      public:
        /** Optional element 'trt:SetSynchronizationPoint' of XSD type 'trt:SetSynchronizationPoint' */
        _trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetSynchronizationPoint */
        long soap_type() const { return SOAP_TYPE___trt__SetSynchronizationPoint; }
        /** Constructor with member initializations */
        __trt__SetSynchronizationPoint() : trt__SetSynchronizationPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33012 */
#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (1743)
/* Wrapper: */
struct SOAP_CMAC __trt__GetSnapshotUri {
      public:
        /** Optional element 'trt:GetSnapshotUri' of XSD type 'trt:GetSnapshotUri' */
        _trt__GetSnapshotUri *trt__GetSnapshotUri;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetSnapshotUri */
        long soap_type() const { return SOAP_TYPE___trt__GetSnapshotUri; }
        /** Constructor with member initializations */
        __trt__GetSnapshotUri() : trt__GetSnapshotUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33082 */
#ifndef SOAP_TYPE___trt__GetVideoSourceModes
#define SOAP_TYPE___trt__GetVideoSourceModes (1747)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceModes {
      public:
        /** Optional element 'trt:GetVideoSourceModes' of XSD type 'trt:GetVideoSourceModes' */
        _trt__GetVideoSourceModes *trt__GetVideoSourceModes;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceModes */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceModes; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceModes() : trt__GetVideoSourceModes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33153 */
#ifndef SOAP_TYPE___trt__SetVideoSourceMode
#define SOAP_TYPE___trt__SetVideoSourceMode (1751)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoSourceMode {
      public:
        /** Optional element 'trt:SetVideoSourceMode' of XSD type 'trt:SetVideoSourceMode' */
        _trt__SetVideoSourceMode *trt__SetVideoSourceMode;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoSourceMode */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoSourceMode; }
        /** Constructor with member initializations */
        __trt__SetVideoSourceMode() : trt__SetVideoSourceMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33221 */
#ifndef SOAP_TYPE___trt__GetOSDs
#define SOAP_TYPE___trt__GetOSDs (1755)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSDs {
      public:
        /** Optional element 'trt:GetOSDs' of XSD type 'trt:GetOSDs' */
        _trt__GetOSDs *trt__GetOSDs;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSDs */
        long soap_type() const { return SOAP_TYPE___trt__GetOSDs; }
        /** Constructor with member initializations */
        __trt__GetOSDs() : trt__GetOSDs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSDs * SOAP_FMAC2 soap_instantiate___trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33289 */
#ifndef SOAP_TYPE___trt__GetOSD
#define SOAP_TYPE___trt__GetOSD (1759)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSD {
      public:
        /** Optional element 'trt:GetOSD' of XSD type 'trt:GetOSD' */
        _trt__GetOSD *trt__GetOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSD */
        long soap_type() const { return SOAP_TYPE___trt__GetOSD; }
        /** Constructor with member initializations */
        __trt__GetOSD() : trt__GetOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSD * SOAP_FMAC2 soap_instantiate___trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33357 */
#ifndef SOAP_TYPE___trt__GetOSDOptions
#define SOAP_TYPE___trt__GetOSDOptions (1763)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSDOptions {
      public:
        /** Optional element 'trt:GetOSDOptions' of XSD type 'trt:GetOSDOptions' */
        _trt__GetOSDOptions *trt__GetOSDOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSDOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetOSDOptions; }
        /** Constructor with member initializations */
        __trt__GetOSDOptions() : trt__GetOSDOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate___trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33425 */
#ifndef SOAP_TYPE___trt__SetOSD
#define SOAP_TYPE___trt__SetOSD (1767)
/* Wrapper: */
struct SOAP_CMAC __trt__SetOSD {
      public:
        /** Optional element 'trt:SetOSD' of XSD type 'trt:SetOSD' */
        _trt__SetOSD *trt__SetOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetOSD */
        long soap_type() const { return SOAP_TYPE___trt__SetOSD; }
        /** Constructor with member initializations */
        __trt__SetOSD() : trt__SetOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetOSD * SOAP_FMAC2 soap_instantiate___trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33493 */
#ifndef SOAP_TYPE___trt__CreateOSD
#define SOAP_TYPE___trt__CreateOSD (1771)
/* Wrapper: */
struct SOAP_CMAC __trt__CreateOSD {
      public:
        /** Optional element 'trt:CreateOSD' of XSD type 'trt:CreateOSD' */
        _trt__CreateOSD *trt__CreateOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__CreateOSD */
        long soap_type() const { return SOAP_TYPE___trt__CreateOSD; }
        /** Constructor with member initializations */
        __trt__CreateOSD() : trt__CreateOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__CreateOSD * SOAP_FMAC2 soap_instantiate___trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:33561 */
#ifndef SOAP_TYPE___trt__DeleteOSD
#define SOAP_TYPE___trt__DeleteOSD (1775)
/* Wrapper: */
struct SOAP_CMAC __trt__DeleteOSD {
      public:
        /** Optional element 'trt:DeleteOSD' of XSD type 'trt:DeleteOSD' */
        _trt__DeleteOSD *trt__DeleteOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__DeleteOSD */
        long soap_type() const { return SOAP_TYPE___trt__DeleteOSD; }
        /** Constructor with member initializations */
        __trt__DeleteOSD() : trt__DeleteOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__DeleteOSD * SOAP_FMAC2 soap_instantiate___trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* wsa5.h:87 */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

/* wsa5.h:90 */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

/* wsa5.h:209 */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

/* wsa5.h:212 */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

/* wsa5.h:215 */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

/* wsa5.h:218 */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
typedef char *_wsa5__MessageID;
#endif

/* wsa5.h:221 */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

/* wsa5.h:224 */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

/* wsa5.h:227 */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

/* wsa5.h:230 */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

/* wsa5.h:233 */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
typedef char *_wsa5__To;
#endif

/* wsa5.h:236 */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
typedef char *_wsa5__Action;
#endif

/* wsa5.h:239 */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
typedef ULONG64 _wsa5__RetryAfter;
#endif

/* wsa5.h:242 */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
typedef _QName _wsa5__ProblemHeaderQName;
#endif

/* wsa5.h:245 */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
typedef char *_wsa5__ProblemIRI;
#endif

/* wsa5.h:248 */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

/* onvif.h:189 */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (69)
typedef std::string xsd__NCName;
#endif

/* onvif.h:192 */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (70)
typedef std::string xsd__anySimpleType;
#endif

/* onvif.h:195 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (71)
typedef std::string xsd__anyURI;
#endif

/* onvif.h:198 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (72)
typedef std::string xsd__integer;
#endif

/* onvif.h:201 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (73)
typedef std::string xsd__nonNegativeInteger;
#endif

/* onvif.h:204 */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (74)
typedef std::string xsd__token;
#endif

/* onvif.h:208 */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (75)
typedef std::string _xml__lang;
#endif

/* onvif.h:2274 */
#ifndef SOAP_TYPE_trt__EncodingTypes
#define SOAP_TYPE_trt__EncodingTypes (757)
typedef std::string trt__EncodingTypes;
#endif

/* onvif.h:2286 */
#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (758)
typedef std::string tt__IntAttrList;
#endif

/* onvif.h:2290 */
#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (759)
typedef std::string tt__FloatAttrList;
#endif

/* onvif.h:2294 */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (760)
typedef std::string tt__StringAttrList;
#endif

/* onvif.h:2298 */
#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (761)
typedef std::string tt__ReferenceTokenList;
#endif

/* onvif.h:2309 */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (762)
typedef std::string wsnt__AbsoluteOrRelativeTimeType;
#endif

/* onvif.h:2333 */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (763)
typedef std::string tt__Name;
#endif

/* onvif.h:2538 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (780)
typedef xsd__integer tt__NetworkInterfaceConfigPriority;
#endif

/* onvif.h:2553 */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (782)
typedef int tt__IANA_IfTypes;
#endif

/* onvif.h:2585 */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (786)
typedef xsd__token tt__IPv4Address;
#endif

/* onvif.h:2589 */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (787)
typedef xsd__token tt__IPv6Address;
#endif

/* onvif.h:2593 */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (788)
typedef xsd__token tt__HwAddress;
#endif

/* onvif.h:2605 */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (790)
typedef xsd__token tt__DNSName;
#endif

/* onvif.h:2609 */
#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (791)
typedef xsd__token tt__Domain;
#endif

/* onvif.h:2631 */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (794)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

/* onvif.h:2666 */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (798)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

/* onvif.h:2671 */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (799)
typedef std::string tt__Dot11PSKPassphrase;
#endif

/* onvif.h:2821 */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (813)
typedef std::string tt__AuxiliaryData;
#endif

/* onvif.h:2976 */
#ifndef SOAP_TYPE_tt__TopicNamespaceLocation
#define SOAP_TYPE_tt__TopicNamespaceLocation (830)
typedef xsd__anyURI tt__TopicNamespaceLocation;
#endif

/* onvif.h:3048 */
#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (835)
typedef std::string tt__Description;
#endif

/* onvif.h:3052 */
#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (836)
typedef std::string tt__XPathExpression;
#endif

/* onvif.h:3106 */
#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (840)
typedef std::string tt__RecordingJobMode;
#endif

/* onvif.h:3110 */
#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (841)
typedef std::string tt__RecordingJobState;
#endif

/* onvif.h:3130 */
#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (843)
typedef std::string tt__AudioClassType;
#endif

/* onvif.h:3149 */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (845)
typedef std::string tt__ReferenceToken;
#endif

/* onvif.h:3199 */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (848)
typedef std::string wstop__FullTopicExpression;
#endif

/* onvif.h:3208 */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (849)
typedef std::string wstop__ConcreteTopicExpression;
#endif

/* onvif.h:3216 */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (850)
typedef xsd__QName wstop__SimpleTopicExpression;
#endif

/* onvif.h:3220 */
#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (851)
typedef tt__ReferenceToken tt__ReceiverReference;
#endif

/* onvif.h:3224 */
#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (852)
typedef tt__ReferenceToken tt__RecordingReference;
#endif

/* onvif.h:3228 */
#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (853)
typedef tt__ReferenceToken tt__TrackReference;
#endif

/* onvif.h:3232 */
#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (854)
typedef tt__ReferenceToken tt__JobToken;
#endif

/* onvif.h:3236 */
#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (855)
typedef tt__ReferenceToken tt__RecordingJobReference;
#endif

/* onvif.h:27438 */
#ifndef SOAP_TYPE__trt__Capabilities
#define SOAP_TYPE__trt__Capabilities (1401)
typedef trt__Capabilities _trt__Capabilities;
#endif

/* onvif.h:27457 */
#ifndef SOAP_TYPE__tt__StringList
#define SOAP_TYPE__tt__StringList (1402)
typedef tt__StringAttrList _tt__StringList;
#endif

/* onvif.h:27460 */
#ifndef SOAP_TYPE__tt__IntRange
#define SOAP_TYPE__tt__IntRange (1403)
typedef tt__IntRange _tt__IntRange;
#endif

/* onvif.h:27463 */
#ifndef SOAP_TYPE__tt__IntList
#define SOAP_TYPE__tt__IntList (1404)
typedef tt__IntAttrList _tt__IntList;
#endif

/* onvif.h:27466 */
#ifndef SOAP_TYPE__tt__FloatRange
#define SOAP_TYPE__tt__FloatRange (1405)
typedef tt__FloatRange _tt__FloatRange;
#endif

/* onvif.h:27469 */
#ifndef SOAP_TYPE__tt__FloatList
#define SOAP_TYPE__tt__FloatList (1406)
typedef tt__FloatAttrList _tt__FloatList;
#endif

/* onvif.h:27472 */
#ifndef SOAP_TYPE__tt__DurationRange
#define SOAP_TYPE__tt__DurationRange (1407)
typedef tt__DurationRange _tt__DurationRange;
#endif

/* onvif.h:27475 */
#ifndef SOAP_TYPE__tt__IntRectangleRange
#define SOAP_TYPE__tt__IntRectangleRange (1408)
typedef tt__IntRectangleRange _tt__IntRectangleRange;
#endif

/* onvif.h:27478 */
#ifndef SOAP_TYPE__tt__VideoSourceConfiguration
#define SOAP_TYPE__tt__VideoSourceConfiguration (1409)
typedef tt__VideoSourceConfiguration _tt__VideoSourceConfiguration;
#endif

/* onvif.h:27481 */
#ifndef SOAP_TYPE__tt__AudioSourceConfiguration
#define SOAP_TYPE__tt__AudioSourceConfiguration (1410)
typedef tt__AudioSourceConfiguration _tt__AudioSourceConfiguration;
#endif

/* onvif.h:27484 */
#ifndef SOAP_TYPE__tt__VideoEncoderConfiguration
#define SOAP_TYPE__tt__VideoEncoderConfiguration (1411)
typedef tt__VideoEncoderConfiguration _tt__VideoEncoderConfiguration;
#endif

/* onvif.h:27487 */
#ifndef SOAP_TYPE__tt__AudioEncoderConfiguration
#define SOAP_TYPE__tt__AudioEncoderConfiguration (1412)
typedef tt__AudioEncoderConfiguration _tt__AudioEncoderConfiguration;
#endif

/* onvif.h:27490 */
#ifndef SOAP_TYPE__tt__VideoAnalyticsConfiguration
#define SOAP_TYPE__tt__VideoAnalyticsConfiguration (1413)
typedef tt__VideoAnalyticsConfiguration _tt__VideoAnalyticsConfiguration;
#endif

/* onvif.h:27493 */
#ifndef SOAP_TYPE__tt__PTZConfiguration
#define SOAP_TYPE__tt__PTZConfiguration (1414)
typedef tt__PTZConfiguration _tt__PTZConfiguration;
#endif

/* onvif.h:27496 */
#ifndef SOAP_TYPE__tt__MetadataConfiguration
#define SOAP_TYPE__tt__MetadataConfiguration (1415)
typedef tt__MetadataConfiguration _tt__MetadataConfiguration;
#endif

/* onvif.h:27499 */
#ifndef SOAP_TYPE__tt__AudioOutputConfiguration
#define SOAP_TYPE__tt__AudioOutputConfiguration (1416)
typedef tt__AudioOutputConfiguration _tt__AudioOutputConfiguration;
#endif

/* onvif.h:27502 */
#ifndef SOAP_TYPE__tt__AudioDecoderConfiguration
#define SOAP_TYPE__tt__AudioDecoderConfiguration (1417)
typedef tt__AudioDecoderConfiguration _tt__AudioDecoderConfiguration;
#endif

/* onvif.h:27505 */
#ifndef SOAP_TYPE__tt__Polyline
#define SOAP_TYPE__tt__Polyline (1418)
typedef tt__Polyline _tt__Polyline;
#endif

/* onvif.h:27508 */
#ifndef SOAP_TYPE__tt__Polygon
#define SOAP_TYPE__tt__Polygon (1419)
typedef tt__Polygon _tt__Polygon;
#endif

/* onvif.h:27527 */
#ifndef SOAP_TYPE__wsnt__TopicExpression
#define SOAP_TYPE__wsnt__TopicExpression (1420)
typedef wsnt__TopicExpressionType _wsnt__TopicExpression;
#endif

/* onvif.h:27530 */
#ifndef SOAP_TYPE__wsnt__FixedTopicSet
#define SOAP_TYPE__wsnt__FixedTopicSet (1421)
typedef bool _wsnt__FixedTopicSet;
#endif

/* onvif.h:27533 */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect
#define SOAP_TYPE__wsnt__TopicExpressionDialect (1422)
typedef xsd__anyURI _wsnt__TopicExpressionDialect;
#endif

/* onvif.h:27536 */
#ifndef SOAP_TYPE__wsnt__ConsumerReference
#define SOAP_TYPE__wsnt__ConsumerReference (1423)
typedef struct wsa5__EndpointReferenceType _wsnt__ConsumerReference;
#endif

/* onvif.h:27539 */
#ifndef SOAP_TYPE__wsnt__Filter
#define SOAP_TYPE__wsnt__Filter (1424)
typedef wsnt__FilterType _wsnt__Filter;
#endif

/* onvif.h:27542 */
#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy
#define SOAP_TYPE__wsnt__SubscriptionPolicy (1425)
typedef wsnt__SubscriptionPolicyType _wsnt__SubscriptionPolicy;
#endif

/* onvif.h:27545 */
#ifndef SOAP_TYPE__wsnt__CreationTime
#define SOAP_TYPE__wsnt__CreationTime (1426)
typedef time_t _wsnt__CreationTime;
#endif

/* onvif.h:27548 */
#ifndef SOAP_TYPE__wsnt__SubscriptionReference
#define SOAP_TYPE__wsnt__SubscriptionReference (1427)
typedef struct wsa5__EndpointReferenceType _wsnt__SubscriptionReference;
#endif

/* onvif.h:27551 */
#ifndef SOAP_TYPE__wsnt__Topic
#define SOAP_TYPE__wsnt__Topic (1428)
typedef wsnt__TopicExpressionType _wsnt__Topic;
#endif

/* onvif.h:27554 */
#ifndef SOAP_TYPE__wsnt__ProducerReference
#define SOAP_TYPE__wsnt__ProducerReference (1429)
typedef struct wsa5__EndpointReferenceType _wsnt__ProducerReference;
#endif

/* onvif.h:27557 */
#ifndef SOAP_TYPE__wsnt__NotificationMessage
#define SOAP_TYPE__wsnt__NotificationMessage (1430)
typedef wsnt__NotificationMessageHolderType _wsnt__NotificationMessage;
#endif

/* onvif.h:27560 */
#ifndef SOAP_TYPE__wsnt__CurrentTime
#define SOAP_TYPE__wsnt__CurrentTime (1431)
typedef time_t _wsnt__CurrentTime;
#endif

/* onvif.h:27563 */
#ifndef SOAP_TYPE__wsnt__TerminationTime
#define SOAP_TYPE__wsnt__TerminationTime (1432)
typedef time_t _wsnt__TerminationTime;
#endif

/* onvif.h:27566 */
#ifndef SOAP_TYPE__wsnt__ProducerProperties
#define SOAP_TYPE__wsnt__ProducerProperties (1433)
typedef wsnt__QueryExpressionType _wsnt__ProducerProperties;
#endif

/* onvif.h:27569 */
#ifndef SOAP_TYPE__wsnt__MessageContent
#define SOAP_TYPE__wsnt__MessageContent (1434)
typedef wsnt__QueryExpressionType _wsnt__MessageContent;
#endif

/* onvif.h:27572 */
#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault (1435)
typedef wsnt__SubscribeCreationFailedFaultType _wsnt__SubscribeCreationFailedFault;
#endif

/* onvif.h:27575 */
#ifndef SOAP_TYPE__wsnt__InvalidFilterFault
#define SOAP_TYPE__wsnt__InvalidFilterFault (1436)
typedef wsnt__InvalidFilterFaultType _wsnt__InvalidFilterFault;
#endif

/* onvif.h:27578 */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault (1437)
typedef wsnt__TopicExpressionDialectUnknownFaultType _wsnt__TopicExpressionDialectUnknownFault;
#endif

/* onvif.h:27581 */
#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault (1438)
typedef wsnt__InvalidTopicExpressionFaultType _wsnt__InvalidTopicExpressionFault;
#endif

/* onvif.h:27584 */
#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault
#define SOAP_TYPE__wsnt__TopicNotSupportedFault (1439)
typedef wsnt__TopicNotSupportedFaultType _wsnt__TopicNotSupportedFault;
#endif

/* onvif.h:27587 */
#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault (1440)
typedef wsnt__MultipleTopicsSpecifiedFaultType _wsnt__MultipleTopicsSpecifiedFault;
#endif

/* onvif.h:27590 */
#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault (1441)
typedef wsnt__InvalidProducerPropertiesExpressionFaultType _wsnt__InvalidProducerPropertiesExpressionFault;
#endif

/* onvif.h:27593 */
#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault (1442)
typedef wsnt__InvalidMessageContentExpressionFaultType _wsnt__InvalidMessageContentExpressionFault;
#endif

/* onvif.h:27596 */
#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault (1443)
typedef wsnt__UnrecognizedPolicyRequestFaultType _wsnt__UnrecognizedPolicyRequestFault;
#endif

/* onvif.h:27599 */
#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault (1444)
typedef wsnt__UnsupportedPolicyRequestFaultType _wsnt__UnsupportedPolicyRequestFault;
#endif

/* onvif.h:27602 */
#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault (1445)
typedef wsnt__NotifyMessageNotSupportedFaultType _wsnt__NotifyMessageNotSupportedFault;
#endif

/* onvif.h:27605 */
#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault (1446)
typedef wsnt__UnacceptableInitialTerminationTimeFaultType _wsnt__UnacceptableInitialTerminationTimeFault;
#endif

/* onvif.h:27608 */
#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault (1447)
typedef wsnt__NoCurrentMessageOnTopicFaultType _wsnt__NoCurrentMessageOnTopicFault;
#endif

/* onvif.h:27611 */
#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault (1448)
typedef wsnt__UnableToGetMessagesFaultType _wsnt__UnableToGetMessagesFault;
#endif

/* onvif.h:27614 */
#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault (1449)
typedef wsnt__UnableToDestroyPullPointFaultType _wsnt__UnableToDestroyPullPointFault;
#endif

/* onvif.h:27617 */
#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault (1450)
typedef wsnt__UnableToCreatePullPointFaultType _wsnt__UnableToCreatePullPointFault;
#endif

/* onvif.h:27620 */
#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault (1451)
typedef wsnt__UnacceptableTerminationTimeFaultType _wsnt__UnacceptableTerminationTimeFault;
#endif

/* onvif.h:27623 */
#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault (1452)
typedef wsnt__UnableToDestroySubscriptionFaultType _wsnt__UnableToDestroySubscriptionFault;
#endif

/* onvif.h:27626 */
#ifndef SOAP_TYPE__wsnt__PauseFailedFault
#define SOAP_TYPE__wsnt__PauseFailedFault (1453)
typedef wsnt__PauseFailedFaultType _wsnt__PauseFailedFault;
#endif

/* onvif.h:27629 */
#ifndef SOAP_TYPE__wsnt__ResumeFailedFault
#define SOAP_TYPE__wsnt__ResumeFailedFault (1454)
typedef wsnt__ResumeFailedFaultType _wsnt__ResumeFailedFault;
#endif

/* onvif.h:27648 */
#ifndef SOAP_TYPE__wsrfbf__BaseFault
#define SOAP_TYPE__wsrfbf__BaseFault (1455)
typedef wsrfbf__BaseFaultType _wsrfbf__BaseFault;
#endif

/* onvif.h:27667 */
#ifndef SOAP_TYPE__wstop__TopicNamespace
#define SOAP_TYPE__wstop__TopicNamespace (1456)
typedef wstop__TopicNamespaceType _wstop__TopicNamespace;
#endif

/* onvif.h:27670 */
#ifndef SOAP_TYPE__wstop__TopicSet
#define SOAP_TYPE__wstop__TopicSet (1457)
typedef wstop__TopicSetType _wstop__TopicSet;
#endif

/* onvif.h:27681 */
#ifndef SOAP_TYPE__wstop__topicNamespaceLocation
#define SOAP_TYPE__wstop__topicNamespaceLocation (1458)
typedef xsd__anyURI _wstop__topicNamespaceLocation;
#endif

/* onvif.h:27684 */
#ifndef SOAP_TYPE__wstop__topic
#define SOAP_TYPE__wstop__topic (1459)
typedef bool _wstop__topic;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* tt__IANA_IfTypes has binding name 'tt__IANA_IfTypes' for type 'tt:IANA-IfTypes' */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (782)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* xsd__duration has binding name 'xsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (67)
#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (861)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (1330)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif

/* _wsa5__RetryAfter has binding name '_wsa5__RetryAfter' for type '' */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (35)
#endif

/* _wsnt__TerminationTime has binding name '_wsnt__TerminationTime' for type '' */
#ifndef SOAP_TYPE__wsnt__TerminationTime
#define SOAP_TYPE__wsnt__TerminationTime (1432)
#endif

/* _wsnt__CurrentTime has binding name '_wsnt__CurrentTime' for type '' */
#ifndef SOAP_TYPE__wsnt__CurrentTime
#define SOAP_TYPE__wsnt__CurrentTime (1431)
#endif

/* _wsnt__CreationTime has binding name '_wsnt__CreationTime' for type '' */
#ifndef SOAP_TYPE__wsnt__CreationTime
#define SOAP_TYPE__wsnt__CreationTime (1426)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (1241)
#endif

/* _wstop__topic has binding name '_wstop__topic' for type '' */
#ifndef SOAP_TYPE__wstop__topic
#define SOAP_TYPE__wstop__topic (1459)
#endif

/* _wsnt__FixedTopicSet has binding name '_wsnt__FixedTopicSet' for type '' */
#ifndef SOAP_TYPE__wsnt__FixedTopicSet
#define SOAP_TYPE__wsnt__FixedTopicSet (1421)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (859)
#endif

/* enum _wsa5__IsReferenceParameter has binding name '_wsa5__IsReferenceParameter' for type 'wsa5:IsReferenceParameter' */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
#endif

/* enum wsa5__FaultCodesType has binding name 'wsa5__FaultCodesType' for type 'wsa5:FaultCodesType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
#endif

/* enum wsa5__RelationshipType has binding name 'wsa5__RelationshipType' for type 'wsa5:RelationshipType' */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
#endif

/* tt__Entity has binding name 'tt__Entity' for type 'tt:Entity' */
#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (847)
#endif

/* tt__MoveStatus has binding name 'tt__MoveStatus' for type 'tt:MoveStatus' */
#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (846)
#endif

/* tt__OSDType has binding name 'tt__OSDType' for type 'tt:OSDType' */
#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (844)
#endif

/* tt__ModeOfOperation has binding name 'tt__ModeOfOperation' for type 'tt:ModeOfOperation' */
#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (842)
#endif

/* tt__TrackType has binding name 'tt__TrackType' for type 'tt:TrackType' */
#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (839)
#endif

/* tt__RecordingStatus has binding name 'tt__RecordingStatus' for type 'tt:RecordingStatus' */
#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (838)
#endif

/* tt__SearchState has binding name 'tt__SearchState' for type 'tt:SearchState' */
#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (837)
#endif

/* tt__ReceiverState has binding name 'tt__ReceiverState' for type 'tt:ReceiverState' */
#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (834)
#endif

/* tt__ReceiverMode has binding name 'tt__ReceiverMode' for type 'tt:ReceiverMode' */
#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (833)
#endif

/* tt__Direction has binding name 'tt__Direction' for type 'tt:Direction' */
#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (832)
#endif

/* tt__PropertyOperation has binding name 'tt__PropertyOperation' for type 'tt:PropertyOperation' */
#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (831)
#endif

/* tt__DefoggingMode has binding name 'tt__DefoggingMode' for type 'tt:DefoggingMode' */
#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (829)
#endif

/* tt__ToneCompensationMode has binding name 'tt__ToneCompensationMode' for type 'tt:ToneCompensationMode' */
#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (828)
#endif

/* tt__IrCutFilterAutoBoundaryType has binding name 'tt__IrCutFilterAutoBoundaryType' for type 'tt:IrCutFilterAutoBoundaryType' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (827)
#endif

/* tt__ImageStabilizationMode has binding name 'tt__ImageStabilizationMode' for type 'tt:ImageStabilizationMode' */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (826)
#endif

/* tt__IrCutFilterMode has binding name 'tt__IrCutFilterMode' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (825)
#endif

/* tt__WhiteBalanceMode has binding name 'tt__WhiteBalanceMode' for type 'tt:WhiteBalanceMode' */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (824)
#endif

/* tt__Enabled has binding name 'tt__Enabled' for type 'tt:Enabled' */
#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (823)
#endif

/* tt__ExposureMode has binding name 'tt__ExposureMode' for type 'tt:ExposureMode' */
#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (822)
#endif

/* tt__ExposurePriority has binding name 'tt__ExposurePriority' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (821)
#endif

/* tt__BacklightCompensationMode has binding name 'tt__BacklightCompensationMode' for type 'tt:BacklightCompensationMode' */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (820)
#endif

/* tt__WideDynamicMode has binding name 'tt__WideDynamicMode' for type 'tt:WideDynamicMode' */
#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (819)
#endif

/* tt__AFModes has binding name 'tt__AFModes' for type 'tt:AFModes' */
#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (818)
#endif

/* tt__AutoFocusMode has binding name 'tt__AutoFocusMode' for type 'tt:AutoFocusMode' */
#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (817)
#endif

/* tt__PTZPresetTourOperation has binding name 'tt__PTZPresetTourOperation' for type 'tt:PTZPresetTourOperation' */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (816)
#endif

/* tt__PTZPresetTourDirection has binding name 'tt__PTZPresetTourDirection' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (815)
#endif

/* tt__PTZPresetTourState has binding name 'tt__PTZPresetTourState' for type 'tt:PTZPresetTourState' */
#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (814)
#endif

/* tt__ReverseMode has binding name 'tt__ReverseMode' for type 'tt:ReverseMode' */
#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (812)
#endif

/* tt__EFlipMode has binding name 'tt__EFlipMode' for type 'tt:EFlipMode' */
#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (811)
#endif

/* tt__DigitalIdleState has binding name 'tt__DigitalIdleState' for type 'tt:DigitalIdleState' */
#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (810)
#endif

/* tt__RelayMode has binding name 'tt__RelayMode' for type 'tt:RelayMode' */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (809)
#endif

/* tt__RelayIdleState has binding name 'tt__RelayIdleState' for type 'tt:RelayIdleState' */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (808)
#endif

/* tt__RelayLogicalState has binding name 'tt__RelayLogicalState' for type 'tt:RelayLogicalState' */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (807)
#endif

/* tt__UserLevel has binding name 'tt__UserLevel' for type 'tt:UserLevel' */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (806)
#endif

/* tt__SetDateTimeType has binding name 'tt__SetDateTimeType' for type 'tt:SetDateTimeType' */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (805)
#endif

/* tt__FactoryDefaultType has binding name 'tt__FactoryDefaultType' for type 'tt:FactoryDefaultType' */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (804)
#endif

/* tt__SystemLogType has binding name 'tt__SystemLogType' for type 'tt:SystemLogType' */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (803)
#endif

/* tt__CapabilityCategory has binding name 'tt__CapabilityCategory' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (802)
#endif

/* tt__Dot11AuthAndMangementSuite has binding name 'tt__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (801)
#endif

/* tt__Dot11SignalStrength has binding name 'tt__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (800)
#endif

/* tt__Dot11Cipher has binding name 'tt__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (797)
#endif

/* tt__Dot11SecurityMode has binding name 'tt__Dot11SecurityMode' for type 'tt:Dot11SecurityMode' */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (796)
#endif

/* tt__Dot11StationMode has binding name 'tt__Dot11StationMode' for type 'tt:Dot11StationMode' */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (795)
#endif

/* tt__DynamicDNSType has binding name 'tt__DynamicDNSType' for type 'tt:DynamicDNSType' */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (793)
#endif

/* tt__IPAddressFilterType has binding name 'tt__IPAddressFilterType' for type 'tt:IPAddressFilterType' */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (792)
#endif

/* tt__IPType has binding name 'tt__IPType' for type 'tt:IPType' */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (789)
#endif

/* tt__NetworkHostType has binding name 'tt__NetworkHostType' for type 'tt:NetworkHostType' */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (785)
#endif

/* tt__NetworkProtocolType has binding name 'tt__NetworkProtocolType' for type 'tt:NetworkProtocolType' */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (784)
#endif

/* tt__IPv6DHCPConfiguration has binding name 'tt__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (783)
#endif

/* tt__Duplex has binding name 'tt__Duplex' for type 'tt:Duplex' */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (781)
#endif

/* tt__DiscoveryMode has binding name 'tt__DiscoveryMode' for type 'tt:DiscoveryMode' */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (779)
#endif

/* tt__ScopeDefinition has binding name 'tt__ScopeDefinition' for type 'tt:ScopeDefinition' */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (778)
#endif

/* tt__TransportProtocol has binding name 'tt__TransportProtocol' for type 'tt:TransportProtocol' */
#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (777)
#endif

/* tt__StreamType has binding name 'tt__StreamType' for type 'tt:StreamType' */
#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (776)
#endif

/* tt__MetadataCompressionType has binding name 'tt__MetadataCompressionType' for type 'tt:MetadataCompressionType' */
#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (775)
#endif

/* tt__AudioEncodingMimeNames has binding name 'tt__AudioEncodingMimeNames' for type 'tt:AudioEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (774)
#endif

/* tt__AudioEncoding has binding name 'tt__AudioEncoding' for type 'tt:AudioEncoding' */
#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (773)
#endif

/* tt__VideoEncodingProfiles has binding name 'tt__VideoEncodingProfiles' for type 'tt:VideoEncodingProfiles' */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (772)
#endif

/* tt__VideoEncodingMimeNames has binding name 'tt__VideoEncodingMimeNames' for type 'tt:VideoEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (771)
#endif

/* tt__H264Profile has binding name 'tt__H264Profile' for type 'tt:H264Profile' */
#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (770)
#endif

/* tt__Mpeg4Profile has binding name 'tt__Mpeg4Profile' for type 'tt:Mpeg4Profile' */
#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (769)
#endif

/* tt__VideoEncoding has binding name 'tt__VideoEncoding' for type 'tt:VideoEncoding' */
#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (768)
#endif

/* tt__ViewModes has binding name 'tt__ViewModes' for type 'tt:ViewModes' */
#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (767)
#endif

/* tt__SceneOrientationOption has binding name 'tt__SceneOrientationOption' for type 'tt:SceneOrientationOption' */
#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (766)
#endif

/* tt__SceneOrientationMode has binding name 'tt__SceneOrientationMode' for type 'tt:SceneOrientationMode' */
#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (765)
#endif

/* tt__RotateMode has binding name 'tt__RotateMode' for type 'tt:RotateMode' */
#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (764)
#endif

/* _wstop__topicNamespaceLocation has binding name '_wstop__topicNamespaceLocation' for type '' */
#ifndef SOAP_TYPE__wstop__topicNamespaceLocation
#define SOAP_TYPE__wstop__topicNamespaceLocation (1458)
#endif

/* _wstop__TopicSet has binding name '_wstop__TopicSet' for type '' */
#ifndef SOAP_TYPE__wstop__TopicSet
#define SOAP_TYPE__wstop__TopicSet (1457)
#endif

/* _wstop__TopicNamespace has binding name '_wstop__TopicNamespace' for type '' */
#ifndef SOAP_TYPE__wstop__TopicNamespace
#define SOAP_TYPE__wstop__TopicNamespace (1456)
#endif

/* _wsrfbf__BaseFault has binding name '_wsrfbf__BaseFault' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFault
#define SOAP_TYPE__wsrfbf__BaseFault (1455)
#endif

/* _wsnt__ResumeFailedFault has binding name '_wsnt__ResumeFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeFailedFault
#define SOAP_TYPE__wsnt__ResumeFailedFault (1454)
#endif

/* _wsnt__PauseFailedFault has binding name '_wsnt__PauseFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseFailedFault
#define SOAP_TYPE__wsnt__PauseFailedFault (1453)
#endif

/* _wsnt__UnableToDestroySubscriptionFault has binding name '_wsnt__UnableToDestroySubscriptionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault (1452)
#endif

/* _wsnt__UnacceptableTerminationTimeFault has binding name '_wsnt__UnacceptableTerminationTimeFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault (1451)
#endif

/* _wsnt__UnableToCreatePullPointFault has binding name '_wsnt__UnableToCreatePullPointFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault (1450)
#endif

/* _wsnt__UnableToDestroyPullPointFault has binding name '_wsnt__UnableToDestroyPullPointFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault (1449)
#endif

/* _wsnt__UnableToGetMessagesFault has binding name '_wsnt__UnableToGetMessagesFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault (1448)
#endif

/* _wsnt__NoCurrentMessageOnTopicFault has binding name '_wsnt__NoCurrentMessageOnTopicFault' for type '' */
#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault (1447)
#endif

/* _wsnt__UnacceptableInitialTerminationTimeFault has binding name '_wsnt__UnacceptableInitialTerminationTimeFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault (1446)
#endif

/* _wsnt__NotifyMessageNotSupportedFault has binding name '_wsnt__NotifyMessageNotSupportedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault (1445)
#endif

/* _wsnt__UnsupportedPolicyRequestFault has binding name '_wsnt__UnsupportedPolicyRequestFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault (1444)
#endif

/* _wsnt__UnrecognizedPolicyRequestFault has binding name '_wsnt__UnrecognizedPolicyRequestFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault (1443)
#endif

/* _wsnt__InvalidMessageContentExpressionFault has binding name '_wsnt__InvalidMessageContentExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault (1442)
#endif

/* _wsnt__InvalidProducerPropertiesExpressionFault has binding name '_wsnt__InvalidProducerPropertiesExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault (1441)
#endif

/* _wsnt__MultipleTopicsSpecifiedFault has binding name '_wsnt__MultipleTopicsSpecifiedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault (1440)
#endif

/* _wsnt__TopicNotSupportedFault has binding name '_wsnt__TopicNotSupportedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault
#define SOAP_TYPE__wsnt__TopicNotSupportedFault (1439)
#endif

/* _wsnt__InvalidTopicExpressionFault has binding name '_wsnt__InvalidTopicExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault (1438)
#endif

/* _wsnt__TopicExpressionDialectUnknownFault has binding name '_wsnt__TopicExpressionDialectUnknownFault' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault (1437)
#endif

/* _wsnt__InvalidFilterFault has binding name '_wsnt__InvalidFilterFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidFilterFault
#define SOAP_TYPE__wsnt__InvalidFilterFault (1436)
#endif

/* _wsnt__SubscribeCreationFailedFault has binding name '_wsnt__SubscribeCreationFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault (1435)
#endif

/* _wsnt__MessageContent has binding name '_wsnt__MessageContent' for type '' */
#ifndef SOAP_TYPE__wsnt__MessageContent
#define SOAP_TYPE__wsnt__MessageContent (1434)
#endif

/* _wsnt__ProducerProperties has binding name '_wsnt__ProducerProperties' for type '' */
#ifndef SOAP_TYPE__wsnt__ProducerProperties
#define SOAP_TYPE__wsnt__ProducerProperties (1433)
#endif

/* _wsnt__NotificationMessage has binding name '_wsnt__NotificationMessage' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationMessage
#define SOAP_TYPE__wsnt__NotificationMessage (1430)
#endif

/* _wsnt__Topic has binding name '_wsnt__Topic' for type '' */
#ifndef SOAP_TYPE__wsnt__Topic
#define SOAP_TYPE__wsnt__Topic (1428)
#endif

/* _wsnt__SubscriptionPolicy has binding name '_wsnt__SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy
#define SOAP_TYPE__wsnt__SubscriptionPolicy (1425)
#endif

/* _wsnt__Filter has binding name '_wsnt__Filter' for type '' */
#ifndef SOAP_TYPE__wsnt__Filter
#define SOAP_TYPE__wsnt__Filter (1424)
#endif

/* _wsnt__TopicExpressionDialect has binding name '_wsnt__TopicExpressionDialect' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect
#define SOAP_TYPE__wsnt__TopicExpressionDialect (1422)
#endif

/* _wsnt__TopicExpression has binding name '_wsnt__TopicExpression' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpression
#define SOAP_TYPE__wsnt__TopicExpression (1420)
#endif

/* _tt__Polygon has binding name '_tt__Polygon' for type '' */
#ifndef SOAP_TYPE__tt__Polygon
#define SOAP_TYPE__tt__Polygon (1419)
#endif

/* _tt__Polyline has binding name '_tt__Polyline' for type '' */
#ifndef SOAP_TYPE__tt__Polyline
#define SOAP_TYPE__tt__Polyline (1418)
#endif

/* _tt__AudioDecoderConfiguration has binding name '_tt__AudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__AudioDecoderConfiguration
#define SOAP_TYPE__tt__AudioDecoderConfiguration (1417)
#endif

/* _tt__AudioOutputConfiguration has binding name '_tt__AudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__AudioOutputConfiguration
#define SOAP_TYPE__tt__AudioOutputConfiguration (1416)
#endif

/* _tt__MetadataConfiguration has binding name '_tt__MetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__MetadataConfiguration
#define SOAP_TYPE__tt__MetadataConfiguration (1415)
#endif

/* _tt__PTZConfiguration has binding name '_tt__PTZConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__PTZConfiguration
#define SOAP_TYPE__tt__PTZConfiguration (1414)
#endif

/* _tt__VideoAnalyticsConfiguration has binding name '_tt__VideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__VideoAnalyticsConfiguration
#define SOAP_TYPE__tt__VideoAnalyticsConfiguration (1413)
#endif

/* _tt__AudioEncoderConfiguration has binding name '_tt__AudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__AudioEncoderConfiguration
#define SOAP_TYPE__tt__AudioEncoderConfiguration (1412)
#endif

/* _tt__VideoEncoderConfiguration has binding name '_tt__VideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__VideoEncoderConfiguration
#define SOAP_TYPE__tt__VideoEncoderConfiguration (1411)
#endif

/* _tt__AudioSourceConfiguration has binding name '_tt__AudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__AudioSourceConfiguration
#define SOAP_TYPE__tt__AudioSourceConfiguration (1410)
#endif

/* _tt__VideoSourceConfiguration has binding name '_tt__VideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__tt__VideoSourceConfiguration
#define SOAP_TYPE__tt__VideoSourceConfiguration (1409)
#endif

/* _tt__IntRectangleRange has binding name '_tt__IntRectangleRange' for type '' */
#ifndef SOAP_TYPE__tt__IntRectangleRange
#define SOAP_TYPE__tt__IntRectangleRange (1408)
#endif

/* _tt__DurationRange has binding name '_tt__DurationRange' for type '' */
#ifndef SOAP_TYPE__tt__DurationRange
#define SOAP_TYPE__tt__DurationRange (1407)
#endif

/* _tt__FloatList has binding name '_tt__FloatList' for type '' */
#ifndef SOAP_TYPE__tt__FloatList
#define SOAP_TYPE__tt__FloatList (1406)
#endif

/* _tt__FloatRange has binding name '_tt__FloatRange' for type '' */
#ifndef SOAP_TYPE__tt__FloatRange
#define SOAP_TYPE__tt__FloatRange (1405)
#endif

/* _tt__IntList has binding name '_tt__IntList' for type '' */
#ifndef SOAP_TYPE__tt__IntList
#define SOAP_TYPE__tt__IntList (1404)
#endif

/* _tt__IntRange has binding name '_tt__IntRange' for type '' */
#ifndef SOAP_TYPE__tt__IntRange
#define SOAP_TYPE__tt__IntRange (1403)
#endif

/* _tt__StringList has binding name '_tt__StringList' for type '' */
#ifndef SOAP_TYPE__tt__StringList
#define SOAP_TYPE__tt__StringList (1402)
#endif

/* _trt__Capabilities has binding name '_trt__Capabilities' for type '' */
#ifndef SOAP_TYPE__trt__Capabilities
#define SOAP_TYPE__trt__Capabilities (1401)
#endif

/* _wstop__TopicNamespaceType_Topic has binding name '_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (1393)
#endif

/* _wsrfbf__BaseFaultType_FaultCause has binding name '_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1354)
#endif

/* _wsrfbf__BaseFaultType_Description has binding name '_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1351)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode has binding name '_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1349)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy has binding name '_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1346)
#endif

/* _wsnt__NotificationMessageHolderType_Message has binding name '_wsnt__NotificationMessageHolderType_Message' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1340)
#endif

/* _tt__ConfigDescription_Messages has binding name '_tt__ConfigDescription_Messages' for type '' */
#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1216)
#endif

/* _tt__ItemListDescription_ElementItemDescription has binding name '_tt__ItemListDescription_ElementItemDescription' for type '' */
#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1206)
#endif

/* _tt__ItemListDescription_SimpleItemDescription has binding name '_tt__ItemListDescription_SimpleItemDescription' for type '' */
#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1204)
#endif

/* _tt__ItemList_ElementItem has binding name '_tt__ItemList_ElementItem' for type '' */
#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1199)
#endif

/* _tt__ItemList_SimpleItem has binding name '_tt__ItemList_SimpleItem' for type '' */
#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1197)
#endif

/* _tt__EventSubscription_SubscriptionPolicy has binding name '_tt__EventSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (954)
#endif

/* tt__RecordingJobReference has binding name 'tt__RecordingJobReference' for type 'tt:RecordingJobReference' */
#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (855)
#endif

/* tt__JobToken has binding name 'tt__JobToken' for type 'tt:JobToken' */
#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (854)
#endif

/* tt__TrackReference has binding name 'tt__TrackReference' for type 'tt:TrackReference' */
#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (853)
#endif

/* tt__RecordingReference has binding name 'tt__RecordingReference' for type 'tt:RecordingReference' */
#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (852)
#endif

/* tt__ReceiverReference has binding name 'tt__ReceiverReference' for type 'tt:ReceiverReference' */
#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (851)
#endif

/* wstop__SimpleTopicExpression has binding name 'wstop__SimpleTopicExpression' for type 'xsd:QName' */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (850)
#endif

/* wstop__ConcreteTopicExpression has binding name 'wstop__ConcreteTopicExpression' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (849)
#endif

/* wstop__FullTopicExpression has binding name 'wstop__FullTopicExpression' for type 'wstop:FullTopicExpression' */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (848)
#endif

/* tt__ReferenceToken has binding name 'tt__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (845)
#endif

/* tt__AudioClassType has binding name 'tt__AudioClassType' for type 'tt:AudioClassType' */
#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (843)
#endif

/* tt__RecordingJobState has binding name 'tt__RecordingJobState' for type 'tt:RecordingJobState' */
#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (841)
#endif

/* tt__RecordingJobMode has binding name 'tt__RecordingJobMode' for type 'tt:RecordingJobMode' */
#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (840)
#endif

/* tt__XPathExpression has binding name 'tt__XPathExpression' for type 'tt:XPathExpression' */
#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (836)
#endif

/* tt__Description has binding name 'tt__Description' for type 'tt:Description' */
#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (835)
#endif

/* tt__TopicNamespaceLocation has binding name 'tt__TopicNamespaceLocation' for type 'tt:TopicNamespaceLocation' */
#ifndef SOAP_TYPE_tt__TopicNamespaceLocation
#define SOAP_TYPE_tt__TopicNamespaceLocation (830)
#endif

/* tt__AuxiliaryData has binding name 'tt__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (813)
#endif

/* tt__Dot11PSKPassphrase has binding name 'tt__Dot11PSKPassphrase' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (799)
#endif

/* tt__Dot11PSK has binding name 'tt__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (798)
#endif

/* tt__Dot11SSIDType has binding name 'tt__Dot11SSIDType' for type 'tt:Dot11SSIDType' */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (794)
#endif

/* tt__Domain has binding name 'tt__Domain' for type 'tt:Domain' */
#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (791)
#endif

/* tt__DNSName has binding name 'tt__DNSName' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (790)
#endif

/* tt__HwAddress has binding name 'tt__HwAddress' for type 'tt:HwAddress' */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (788)
#endif

/* tt__IPv6Address has binding name 'tt__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (787)
#endif

/* tt__IPv4Address has binding name 'tt__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (786)
#endif

/* tt__NetworkInterfaceConfigPriority has binding name 'tt__NetworkInterfaceConfigPriority' for type 'tt:NetworkInterfaceConfigPriority' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (780)
#endif

/* tt__Name has binding name 'tt__Name' for type 'tt:Name' */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (763)
#endif

/* wsnt__AbsoluteOrRelativeTimeType has binding name 'wsnt__AbsoluteOrRelativeTimeType' for type 'wsnt:AbsoluteOrRelativeTimeType' */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (762)
#endif

/* tt__ReferenceTokenList has binding name 'tt__ReferenceTokenList' for type 'tt:ReferenceTokenList' */
#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (761)
#endif

/* tt__StringAttrList has binding name 'tt__StringAttrList' for type 'tt:StringAttrList' */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (760)
#endif

/* tt__FloatAttrList has binding name 'tt__FloatAttrList' for type 'tt:FloatAttrList' */
#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (759)
#endif

/* tt__IntAttrList has binding name 'tt__IntAttrList' for type 'tt:IntAttrList' */
#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (758)
#endif

/* trt__EncodingTypes has binding name 'trt__EncodingTypes' for type 'trt:EncodingTypes' */
#ifndef SOAP_TYPE_trt__EncodingTypes
#define SOAP_TYPE_trt__EncodingTypes (757)
#endif

/* wstop__TopicSetType has binding name 'wstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (756)
#endif

/* wstop__TopicType has binding name 'wstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (755)
#endif

/* wstop__TopicNamespaceType has binding name 'wstop__TopicNamespaceType' for type 'wstop:TopicNamespaceType' */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (754)
#endif

/* wstop__QueryExpressionType has binding name 'wstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (753)
#endif

/* wstop__ExtensibleDocumented has binding name 'wstop__ExtensibleDocumented' for type 'wstop:ExtensibleDocumented' */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (752)
#endif

/* wstop__Documentation has binding name 'wstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (751)
#endif

/* wsrfbf__BaseFaultType has binding name 'wsrfbf__BaseFaultType' for type 'wsrfbf:BaseFaultType' */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (750)
#endif

/* _wsnt__ResumeSubscriptionResponse has binding name '_wsnt__ResumeSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (749)
#endif

/* _wsnt__ResumeSubscription has binding name '_wsnt__ResumeSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (748)
#endif

/* _wsnt__PauseSubscriptionResponse has binding name '_wsnt__PauseSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (747)
#endif

/* _wsnt__PauseSubscription has binding name '_wsnt__PauseSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (746)
#endif

/* _wsnt__UnsubscribeResponse has binding name '_wsnt__UnsubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (745)
#endif

/* _wsnt__Unsubscribe has binding name '_wsnt__Unsubscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (744)
#endif

/* _wsnt__RenewResponse has binding name '_wsnt__RenewResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (743)
#endif

/* _wsnt__Renew has binding name '_wsnt__Renew' for type '' */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (742)
#endif

/* _wsnt__CreatePullPointResponse has binding name '_wsnt__CreatePullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (741)
#endif

/* _wsnt__CreatePullPoint has binding name '_wsnt__CreatePullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (740)
#endif

/* _wsnt__DestroyPullPointResponse has binding name '_wsnt__DestroyPullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (739)
#endif

/* _wsnt__DestroyPullPoint has binding name '_wsnt__DestroyPullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (738)
#endif

/* _wsnt__GetMessagesResponse has binding name '_wsnt__GetMessagesResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (737)
#endif

/* _wsnt__GetMessages has binding name '_wsnt__GetMessages' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (736)
#endif

/* _wsnt__GetCurrentMessageResponse has binding name '_wsnt__GetCurrentMessageResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (735)
#endif

/* _wsnt__GetCurrentMessage has binding name '_wsnt__GetCurrentMessage' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (734)
#endif

/* _wsnt__SubscribeResponse has binding name '_wsnt__SubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (733)
#endif

/* _wsnt__Subscribe has binding name '_wsnt__Subscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (732)
#endif

/* _wsnt__UseRaw has binding name '_wsnt__UseRaw' for type '' */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (731)
#endif

/* _wsnt__Notify has binding name '_wsnt__Notify' for type '' */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (730)
#endif

/* _wsnt__SubscriptionManagerRP has binding name '_wsnt__SubscriptionManagerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (729)
#endif

/* _wsnt__NotificationProducerRP has binding name '_wsnt__NotificationProducerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (728)
#endif

/* wsnt__ResumeFailedFaultType has binding name 'wsnt__ResumeFailedFaultType' for type 'wsnt:ResumeFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (727)
#endif

/* wsnt__PauseFailedFaultType has binding name 'wsnt__PauseFailedFaultType' for type 'wsnt:PauseFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (726)
#endif

/* wsnt__UnableToDestroySubscriptionFaultType has binding name 'wsnt__UnableToDestroySubscriptionFaultType' for type 'wsnt:UnableToDestroySubscriptionFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (725)
#endif

/* wsnt__UnacceptableTerminationTimeFaultType has binding name 'wsnt__UnacceptableTerminationTimeFaultType' for type 'wsnt:UnacceptableTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (724)
#endif

/* wsnt__UnableToCreatePullPointFaultType has binding name 'wsnt__UnableToCreatePullPointFaultType' for type 'wsnt:UnableToCreatePullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (723)
#endif

/* wsnt__UnableToDestroyPullPointFaultType has binding name 'wsnt__UnableToDestroyPullPointFaultType' for type 'wsnt:UnableToDestroyPullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (722)
#endif

/* wsnt__UnableToGetMessagesFaultType has binding name 'wsnt__UnableToGetMessagesFaultType' for type 'wsnt:UnableToGetMessagesFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (721)
#endif

/* wsnt__NoCurrentMessageOnTopicFaultType has binding name 'wsnt__NoCurrentMessageOnTopicFaultType' for type 'wsnt:NoCurrentMessageOnTopicFaultType' */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (720)
#endif

/* wsnt__UnacceptableInitialTerminationTimeFaultType has binding name 'wsnt__UnacceptableInitialTerminationTimeFaultType' for type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (719)
#endif

/* wsnt__NotifyMessageNotSupportedFaultType has binding name 'wsnt__NotifyMessageNotSupportedFaultType' for type 'wsnt:NotifyMessageNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (718)
#endif

/* wsnt__UnsupportedPolicyRequestFaultType has binding name 'wsnt__UnsupportedPolicyRequestFaultType' for type 'wsnt:UnsupportedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (717)
#endif

/* wsnt__UnrecognizedPolicyRequestFaultType has binding name 'wsnt__UnrecognizedPolicyRequestFaultType' for type 'wsnt:UnrecognizedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (716)
#endif

/* wsnt__InvalidMessageContentExpressionFaultType has binding name 'wsnt__InvalidMessageContentExpressionFaultType' for type 'wsnt:InvalidMessageContentExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (715)
#endif

/* wsnt__InvalidProducerPropertiesExpressionFaultType has binding name 'wsnt__InvalidProducerPropertiesExpressionFaultType' for type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (714)
#endif

/* wsnt__MultipleTopicsSpecifiedFaultType has binding name 'wsnt__MultipleTopicsSpecifiedFaultType' for type 'wsnt:MultipleTopicsSpecifiedFaultType' */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (713)
#endif

/* wsnt__TopicNotSupportedFaultType has binding name 'wsnt__TopicNotSupportedFaultType' for type 'wsnt:TopicNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (712)
#endif

/* wsnt__InvalidTopicExpressionFaultType has binding name 'wsnt__InvalidTopicExpressionFaultType' for type 'wsnt:InvalidTopicExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (711)
#endif

/* wsnt__TopicExpressionDialectUnknownFaultType has binding name 'wsnt__TopicExpressionDialectUnknownFaultType' for type 'wsnt:TopicExpressionDialectUnknownFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (710)
#endif

/* wsnt__InvalidFilterFaultType has binding name 'wsnt__InvalidFilterFaultType' for type 'wsnt:InvalidFilterFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (709)
#endif

/* wsnt__SubscribeCreationFailedFaultType has binding name 'wsnt__SubscribeCreationFailedFaultType' for type 'wsnt:SubscribeCreationFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (708)
#endif

/* wsnt__NotificationMessageHolderType has binding name 'wsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (707)
#endif

/* wsnt__SubscriptionPolicyType has binding name 'wsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (706)
#endif

/* wsnt__FilterType has binding name 'wsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (705)
#endif

/* wsnt__TopicExpressionType has binding name 'wsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (704)
#endif

/* wsnt__QueryExpressionType has binding name 'wsnt__QueryExpressionType' for type 'wsnt:QueryExpressionType' */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (703)
#endif

/* _tt__Message has binding name '_tt__Message' for type '' */
#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (702)
#endif

/* _tt__StringItems has binding name '_tt__StringItems' for type '' */
#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (701)
#endif

/* tt__LocationEntity has binding name 'tt__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (700)
#endif

/* tt__LocalOrientation has binding name 'tt__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (699)
#endif

/* tt__LocalLocation has binding name 'tt__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (698)
#endif

/* tt__GeoOrientation has binding name 'tt__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (697)
#endif

/* tt__GeoLocation has binding name 'tt__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (696)
#endif

/* tt__TransformationExtension has binding name 'tt__TransformationExtension' for type 'tt:TransformationExtension' */
#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (695)
#endif

/* tt__Transformation has binding name 'tt__Transformation' for type 'tt:Transformation' */
#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (694)
#endif

/* tt__ColorCovariance has binding name 'tt__ColorCovariance' for type 'tt:ColorCovariance' */
#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (693)
#endif

/* tt__Color has binding name 'tt__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (692)
#endif

/* tt__Polygon has binding name 'tt__Polygon' for type 'tt:Polygon' */
#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (691)
#endif

/* tt__Rectangle has binding name 'tt__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (690)
#endif

/* tt__Vector has binding name 'tt__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (689)
#endif

/* tt__PTZMoveStatus has binding name 'tt__PTZMoveStatus' for type 'tt:PTZMoveStatus' */
#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (688)
#endif

/* tt__PTZStatus has binding name 'tt__PTZStatus' for type 'tt:PTZStatus' */
#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (687)
#endif

/* tt__PTZVector has binding name 'tt__PTZVector' for type 'tt:PTZVector' */
#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (686)
#endif

/* tt__Vector1D has binding name 'tt__Vector1D' for type 'tt:Vector1D' */
#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (685)
#endif

/* tt__Vector2D has binding name 'tt__Vector2D' for type 'tt:Vector2D' */
#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (684)
#endif

/* tt__IntRange has binding name 'tt__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (683)
#endif

/* tt__StorageReferencePathExtension has binding name 'tt__StorageReferencePathExtension' for type 'tt:StorageReferencePathExtension' */
#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (682)
#endif

/* tt__StorageReferencePath has binding name 'tt__StorageReferencePath' for type 'tt:StorageReferencePath' */
#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (681)
#endif

/* tt__ArrayOfFileProgressExtension has binding name 'tt__ArrayOfFileProgressExtension' for type 'tt:ArrayOfFileProgressExtension' */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (680)
#endif

/* tt__ArrayOfFileProgress has binding name 'tt__ArrayOfFileProgress' for type 'tt:ArrayOfFileProgress' */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (679)
#endif

/* tt__FileProgress has binding name 'tt__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (678)
#endif

/* tt__OSDConfigurationOptionsExtension has binding name 'tt__OSDConfigurationOptionsExtension' for type 'tt:OSDConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (677)
#endif

/* tt__OSDConfigurationOptions has binding name 'tt__OSDConfigurationOptions' for type 'tt:OSDConfigurationOptions' */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (676)
#endif

/* tt__MaximumNumberOfOSDs has binding name 'tt__MaximumNumberOfOSDs' for type 'tt:MaximumNumberOfOSDs' */
#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (675)
#endif

/* tt__OSDConfigurationExtension has binding name 'tt__OSDConfigurationExtension' for type 'tt:OSDConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (674)
#endif

/* tt__OSDConfiguration has binding name 'tt__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (673)
#endif

/* tt__OSDImgOptionsExtension has binding name 'tt__OSDImgOptionsExtension' for type 'tt:OSDImgOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (672)
#endif

/* tt__OSDImgOptions has binding name 'tt__OSDImgOptions' for type 'tt:OSDImgOptions' */
#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (671)
#endif

/* tt__OSDTextOptionsExtension has binding name 'tt__OSDTextOptionsExtension' for type 'tt:OSDTextOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (670)
#endif

/* tt__OSDTextOptions has binding name 'tt__OSDTextOptions' for type 'tt:OSDTextOptions' */
#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (669)
#endif

/* tt__OSDColorOptionsExtension has binding name 'tt__OSDColorOptionsExtension' for type 'tt:OSDColorOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (668)
#endif

/* tt__OSDColorOptions has binding name 'tt__OSDColorOptions' for type 'tt:OSDColorOptions' */
#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (667)
#endif

/* tt__ColorOptions has binding name 'tt__ColorOptions' for type 'tt:ColorOptions' */
#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (666)
#endif

/* tt__ColorspaceRange has binding name 'tt__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (665)
#endif

/* tt__OSDImgConfigurationExtension has binding name 'tt__OSDImgConfigurationExtension' for type 'tt:OSDImgConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (664)
#endif

/* tt__OSDImgConfiguration has binding name 'tt__OSDImgConfiguration' for type 'tt:OSDImgConfiguration' */
#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (663)
#endif

/* tt__OSDTextConfigurationExtension has binding name 'tt__OSDTextConfigurationExtension' for type 'tt:OSDTextConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (662)
#endif

/* tt__OSDTextConfiguration has binding name 'tt__OSDTextConfiguration' for type 'tt:OSDTextConfiguration' */
#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (661)
#endif

/* tt__OSDColor has binding name 'tt__OSDColor' for type 'tt:OSDColor' */
#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (660)
#endif

/* tt__OSDPosConfigurationExtension has binding name 'tt__OSDPosConfigurationExtension' for type 'tt:OSDPosConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (659)
#endif

/* tt__OSDPosConfiguration has binding name 'tt__OSDPosConfiguration' for type 'tt:OSDPosConfiguration' */
#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (658)
#endif

/* tt__OSDReference has binding name 'tt__OSDReference' for type 'tt:OSDReference' */
#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (657)
#endif

/* tt__ProfileStatusExtension has binding name 'tt__ProfileStatusExtension' for type 'tt:ProfileStatusExtension' */
#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (656)
#endif

/* tt__ProfileStatus has binding name 'tt__ProfileStatus' for type 'tt:ProfileStatus' */
#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (655)
#endif

/* tt__ActiveConnection has binding name 'tt__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (654)
#endif

/* tt__AudioClassDescriptorExtension has binding name 'tt__AudioClassDescriptorExtension' for type 'tt:AudioClassDescriptorExtension' */
#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (653)
#endif

/* tt__AudioClassDescriptor has binding name 'tt__AudioClassDescriptor' for type 'tt:AudioClassDescriptor' */
#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (652)
#endif

/* tt__AudioClassCandidate has binding name 'tt__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (651)
#endif

/* tt__ActionEngineEventPayloadExtension has binding name 'tt__ActionEngineEventPayloadExtension' for type 'tt:ActionEngineEventPayloadExtension' */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (650)
#endif

/* tt__ActionEngineEventPayload has binding name 'tt__ActionEngineEventPayload' for type 'tt:ActionEngineEventPayload' */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (649)
#endif

/* tt__AnalyticsState has binding name 'tt__AnalyticsState' for type 'tt:AnalyticsState' */
#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (648)
#endif

/* tt__AnalyticsStateInformation has binding name 'tt__AnalyticsStateInformation' for type 'tt:AnalyticsStateInformation' */
#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (647)
#endif

/* tt__AnalyticsEngineControl has binding name 'tt__AnalyticsEngineControl' for type 'tt:AnalyticsEngineControl' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (646)
#endif

/* tt__MetadataInputExtension has binding name 'tt__MetadataInputExtension' for type 'tt:MetadataInputExtension' */
#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (645)
#endif

/* tt__MetadataInput has binding name 'tt__MetadataInput' for type 'tt:MetadataInput' */
#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (644)
#endif

/* tt__SourceIdentificationExtension has binding name 'tt__SourceIdentificationExtension' for type 'tt:SourceIdentificationExtension' */
#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (643)
#endif

/* tt__SourceIdentification has binding name 'tt__SourceIdentification' for type 'tt:SourceIdentification' */
#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (642)
#endif

/* tt__AnalyticsEngineInput has binding name 'tt__AnalyticsEngineInput' for type 'tt:AnalyticsEngineInput' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (641)
#endif

/* tt__AnalyticsEngineInputInfoExtension has binding name 'tt__AnalyticsEngineInputInfoExtension' for type 'tt:AnalyticsEngineInputInfoExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (640)
#endif

/* tt__AnalyticsEngineInputInfo has binding name 'tt__AnalyticsEngineInputInfo' for type 'tt:AnalyticsEngineInputInfo' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (639)
#endif

/* tt__EngineConfiguration has binding name 'tt__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (638)
#endif

/* tt__AnalyticsDeviceEngineConfigurationExtension has binding name 'tt__AnalyticsDeviceEngineConfigurationExtension' for type 'tt:AnalyticsDeviceEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (637)
#endif

/* tt__AnalyticsDeviceEngineConfiguration has binding name 'tt__AnalyticsDeviceEngineConfiguration' for type 'tt:AnalyticsDeviceEngineConfiguration' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (636)
#endif

/* tt__AnalyticsEngine has binding name 'tt__AnalyticsEngine' for type 'tt:AnalyticsEngine' */
#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (635)
#endif

/* tt__ReplayConfiguration has binding name 'tt__ReplayConfiguration' for type 'tt:ReplayConfiguration' */
#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (634)
#endif

/* tt__GetRecordingJobsResponseItem has binding name 'tt__GetRecordingJobsResponseItem' for type 'tt:GetRecordingJobsResponseItem' */
#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (633)
#endif

/* tt__RecordingJobStateTrack has binding name 'tt__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (632)
#endif

/* tt__RecordingJobStateTracks has binding name 'tt__RecordingJobStateTracks' for type 'tt:RecordingJobStateTracks' */
#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (631)
#endif

/* tt__RecordingJobStateSource has binding name 'tt__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (630)
#endif

/* tt__RecordingJobStateInformationExtension has binding name 'tt__RecordingJobStateInformationExtension' for type 'tt:RecordingJobStateInformationExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (629)
#endif

/* tt__RecordingJobStateInformation has binding name 'tt__RecordingJobStateInformation' for type 'tt:RecordingJobStateInformation' */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (628)
#endif

/* tt__RecordingJobTrack has binding name 'tt__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (627)
#endif

/* tt__RecordingJobSourceExtension has binding name 'tt__RecordingJobSourceExtension' for type 'tt:RecordingJobSourceExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (626)
#endif

/* tt__RecordingJobSource has binding name 'tt__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (625)
#endif

/* tt__RecordingJobConfigurationExtension has binding name 'tt__RecordingJobConfigurationExtension' for type 'tt:RecordingJobConfigurationExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (624)
#endif

/* tt__RecordingJobConfiguration has binding name 'tt__RecordingJobConfiguration' for type 'tt:RecordingJobConfiguration' */
#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (623)
#endif

/* tt__GetTracksResponseItem has binding name 'tt__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (622)
#endif

/* tt__GetTracksResponseList has binding name 'tt__GetTracksResponseList' for type 'tt:GetTracksResponseList' */
#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (621)
#endif

/* tt__GetRecordingsResponseItem has binding name 'tt__GetRecordingsResponseItem' for type 'tt:GetRecordingsResponseItem' */
#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (620)
#endif

/* tt__TrackConfiguration has binding name 'tt__TrackConfiguration' for type 'tt:TrackConfiguration' */
#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (619)
#endif

/* tt__RecordingConfiguration has binding name 'tt__RecordingConfiguration' for type 'tt:RecordingConfiguration' */
#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (618)
#endif

/* tt__MetadataAttributes has binding name 'tt__MetadataAttributes' for type 'tt:MetadataAttributes' */
#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (617)
#endif

/* tt__AudioAttributes has binding name 'tt__AudioAttributes' for type 'tt:AudioAttributes' */
#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (616)
#endif

/* tt__VideoAttributes has binding name 'tt__VideoAttributes' for type 'tt:VideoAttributes' */
#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (615)
#endif

/* tt__TrackAttributesExtension has binding name 'tt__TrackAttributesExtension' for type 'tt:TrackAttributesExtension' */
#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (614)
#endif

/* tt__TrackAttributes has binding name 'tt__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (613)
#endif

/* tt__MediaAttributes has binding name 'tt__MediaAttributes' for type 'tt:MediaAttributes' */
#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (612)
#endif

/* tt__TrackInformation has binding name 'tt__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (611)
#endif

/* tt__RecordingSourceInformation has binding name 'tt__RecordingSourceInformation' for type 'tt:RecordingSourceInformation' */
#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (610)
#endif

/* tt__RecordingInformation has binding name 'tt__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (609)
#endif

/* tt__FindMetadataResult has binding name 'tt__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (608)
#endif

/* tt__FindMetadataResultList has binding name 'tt__FindMetadataResultList' for type 'tt:FindMetadataResultList' */
#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (607)
#endif

/* tt__FindPTZPositionResult has binding name 'tt__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (606)
#endif

/* tt__FindPTZPositionResultList has binding name 'tt__FindPTZPositionResultList' for type 'tt:FindPTZPositionResultList' */
#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (605)
#endif

/* tt__FindEventResult has binding name 'tt__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (604)
#endif

/* tt__FindEventResultList has binding name 'tt__FindEventResultList' for type 'tt:FindEventResultList' */
#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (603)
#endif

/* tt__FindRecordingResultList has binding name 'tt__FindRecordingResultList' for type 'tt:FindRecordingResultList' */
#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (602)
#endif

/* tt__MetadataFilter has binding name 'tt__MetadataFilter' for type 'tt:MetadataFilter' */
#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (601)
#endif

/* tt__PTZPositionFilter has binding name 'tt__PTZPositionFilter' for type 'tt:PTZPositionFilter' */
#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (600)
#endif

/* tt__EventFilter has binding name 'tt__EventFilter' for type 'tt:EventFilter' */
#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (599)
#endif

/* tt__SearchScopeExtension has binding name 'tt__SearchScopeExtension' for type 'tt:SearchScopeExtension' */
#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (598)
#endif

/* tt__SearchScope has binding name 'tt__SearchScope' for type 'tt:SearchScope' */
#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (597)
#endif

/* tt__RecordingSummary has binding name 'tt__RecordingSummary' for type 'tt:RecordingSummary' */
#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (596)
#endif

/* tt__DateTimeRange has binding name 'tt__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (595)
#endif

/* tt__SourceReference has binding name 'tt__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (594)
#endif

/* tt__ReceiverStateInformation has binding name 'tt__ReceiverStateInformation' for type 'tt:ReceiverStateInformation' */
#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (593)
#endif

/* tt__ReceiverConfiguration has binding name 'tt__ReceiverConfiguration' for type 'tt:ReceiverConfiguration' */
#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (592)
#endif

/* tt__Receiver has binding name 'tt__Receiver' for type 'tt:Receiver' */
#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (591)
#endif

/* tt__PaneOptionExtension has binding name 'tt__PaneOptionExtension' for type 'tt:PaneOptionExtension' */
#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (590)
#endif

/* tt__PaneLayoutOptions has binding name 'tt__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (589)
#endif

/* tt__LayoutOptionsExtension has binding name 'tt__LayoutOptionsExtension' for type 'tt:LayoutOptionsExtension' */
#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (588)
#endif

/* tt__LayoutOptions has binding name 'tt__LayoutOptions' for type 'tt:LayoutOptions' */
#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (587)
#endif

/* tt__CodingCapabilities has binding name 'tt__CodingCapabilities' for type 'tt:CodingCapabilities' */
#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (586)
#endif

/* tt__LayoutExtension has binding name 'tt__LayoutExtension' for type 'tt:LayoutExtension' */
#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (585)
#endif

/* tt__Layout has binding name 'tt__Layout' for type 'tt:Layout' */
#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (584)
#endif

/* tt__PaneLayout has binding name 'tt__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (583)
#endif

/* tt__PaneConfiguration has binding name 'tt__PaneConfiguration' for type 'tt:PaneConfiguration' */
#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (582)
#endif

/* tt__CellLayout has binding name 'tt__CellLayout' for type 'tt:CellLayout' */
#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (581)
#endif

/* tt__MotionExpressionConfiguration has binding name 'tt__MotionExpressionConfiguration' for type 'tt:MotionExpressionConfiguration' */
#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (580)
#endif

/* tt__MotionExpression has binding name 'tt__MotionExpression' for type 'tt:MotionExpression' */
#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (579)
#endif

/* tt__PolylineArrayConfiguration has binding name 'tt__PolylineArrayConfiguration' for type 'tt:PolylineArrayConfiguration' */
#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (578)
#endif

/* tt__PolylineArrayExtension has binding name 'tt__PolylineArrayExtension' for type 'tt:PolylineArrayExtension' */
#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (577)
#endif

/* tt__PolylineArray has binding name 'tt__PolylineArray' for type 'tt:PolylineArray' */
#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (576)
#endif

/* tt__PolygonConfiguration has binding name 'tt__PolygonConfiguration' for type 'tt:PolygonConfiguration' */
#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (575)
#endif

/* tt__SupportedAnalyticsModulesExtension has binding name 'tt__SupportedAnalyticsModulesExtension' for type 'tt:SupportedAnalyticsModulesExtension' */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (574)
#endif

/* tt__SupportedAnalyticsModules has binding name 'tt__SupportedAnalyticsModules' for type 'tt:SupportedAnalyticsModules' */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (573)
#endif

/* tt__SupportedRulesExtension has binding name 'tt__SupportedRulesExtension' for type 'tt:SupportedRulesExtension' */
#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (572)
#endif

/* tt__SupportedRules has binding name 'tt__SupportedRules' for type 'tt:SupportedRules' */
#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (571)
#endif

/* tt__ConfigDescriptionExtension has binding name 'tt__ConfigDescriptionExtension' for type 'tt:ConfigDescriptionExtension' */
#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (570)
#endif

/* tt__ConfigDescription has binding name 'tt__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (569)
#endif

/* tt__Config has binding name 'tt__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (568)
#endif

/* tt__RuleEngineConfigurationExtension has binding name 'tt__RuleEngineConfigurationExtension' for type 'tt:RuleEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (567)
#endif

/* tt__RuleEngineConfiguration has binding name 'tt__RuleEngineConfiguration' for type 'tt:RuleEngineConfiguration' */
#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (566)
#endif

/* tt__AnalyticsEngineConfigurationExtension has binding name 'tt__AnalyticsEngineConfigurationExtension' for type 'tt:AnalyticsEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (565)
#endif

/* tt__AnalyticsEngineConfiguration has binding name 'tt__AnalyticsEngineConfiguration' for type 'tt:AnalyticsEngineConfiguration' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (564)
#endif

/* tt__Polyline has binding name 'tt__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (563)
#endif

/* tt__ItemListDescriptionExtension has binding name 'tt__ItemListDescriptionExtension' for type 'tt:ItemListDescriptionExtension' */
#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (562)
#endif

/* tt__ItemListDescription has binding name 'tt__ItemListDescription' for type 'tt:ItemListDescription' */
#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (561)
#endif

/* tt__MessageDescriptionExtension has binding name 'tt__MessageDescriptionExtension' for type 'tt:MessageDescriptionExtension' */
#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (560)
#endif

/* tt__MessageDescription has binding name 'tt__MessageDescription' for type 'tt:MessageDescription' */
#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (559)
#endif

/* tt__ItemListExtension has binding name 'tt__ItemListExtension' for type 'tt:ItemListExtension' */
#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (558)
#endif

/* tt__ItemList has binding name 'tt__ItemList' for type 'tt:ItemList' */
#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (557)
#endif

/* tt__MessageExtension has binding name 'tt__MessageExtension' for type 'tt:MessageExtension' */
#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (556)
#endif

/* tt__NoiseReductionOptions has binding name 'tt__NoiseReductionOptions' for type 'tt:NoiseReductionOptions' */
#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (555)
#endif

/* tt__DefoggingOptions has binding name 'tt__DefoggingOptions' for type 'tt:DefoggingOptions' */
#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (554)
#endif

/* tt__ToneCompensationOptions has binding name 'tt__ToneCompensationOptions' for type 'tt:ToneCompensationOptions' */
#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (553)
#endif

/* tt__FocusOptions20Extension has binding name 'tt__FocusOptions20Extension' for type 'tt:FocusOptions20Extension' */
#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (552)
#endif

/* tt__FocusOptions20 has binding name 'tt__FocusOptions20' for type 'tt:FocusOptions20' */
#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (551)
#endif

/* tt__WhiteBalanceOptions20Extension has binding name 'tt__WhiteBalanceOptions20Extension' for type 'tt:WhiteBalanceOptions20Extension' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (550)
#endif

/* tt__WhiteBalanceOptions20 has binding name 'tt__WhiteBalanceOptions20' for type 'tt:WhiteBalanceOptions20' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (549)
#endif

/* tt__FocusConfiguration20Extension has binding name 'tt__FocusConfiguration20Extension' for type 'tt:FocusConfiguration20Extension' */
#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (548)
#endif

/* tt__FocusConfiguration20 has binding name 'tt__FocusConfiguration20' for type 'tt:FocusConfiguration20' */
#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (547)
#endif

/* tt__WhiteBalance20Extension has binding name 'tt__WhiteBalance20Extension' for type 'tt:WhiteBalance20Extension' */
#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (546)
#endif

/* tt__WhiteBalance20 has binding name 'tt__WhiteBalance20' for type 'tt:WhiteBalance20' */
#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (545)
#endif

/* tt__RelativeFocusOptions20 has binding name 'tt__RelativeFocusOptions20' for type 'tt:RelativeFocusOptions20' */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (544)
#endif

/* tt__MoveOptions20 has binding name 'tt__MoveOptions20' for type 'tt:MoveOptions20' */
#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (543)
#endif

/* tt__ExposureOptions20 has binding name 'tt__ExposureOptions20' for type 'tt:ExposureOptions20' */
#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (542)
#endif

/* tt__BacklightCompensationOptions20 has binding name 'tt__BacklightCompensationOptions20' for type 'tt:BacklightCompensationOptions20' */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (541)
#endif

/* tt__WideDynamicRangeOptions20 has binding name 'tt__WideDynamicRangeOptions20' for type 'tt:WideDynamicRangeOptions20' */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (540)
#endif

/* tt__IrCutFilterAutoAdjustmentOptionsExtension has binding name 'tt__IrCutFilterAutoAdjustmentOptionsExtension' for type 'tt:IrCutFilterAutoAdjustmentOptionsExtension' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (539)
#endif

/* tt__IrCutFilterAutoAdjustmentOptions has binding name 'tt__IrCutFilterAutoAdjustmentOptions' for type 'tt:IrCutFilterAutoAdjustmentOptions' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (538)
#endif

/* tt__ImageStabilizationOptionsExtension has binding name 'tt__ImageStabilizationOptionsExtension' for type 'tt:ImageStabilizationOptionsExtension' */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (537)
#endif

/* tt__ImageStabilizationOptions has binding name 'tt__ImageStabilizationOptions' for type 'tt:ImageStabilizationOptions' */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (536)
#endif

/* tt__ImagingOptions20Extension4 has binding name 'tt__ImagingOptions20Extension4' for type 'tt:ImagingOptions20Extension4' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (535)
#endif

/* tt__ImagingOptions20Extension3 has binding name 'tt__ImagingOptions20Extension3' for type 'tt:ImagingOptions20Extension3' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (534)
#endif

/* tt__ImagingOptions20Extension2 has binding name 'tt__ImagingOptions20Extension2' for type 'tt:ImagingOptions20Extension2' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (533)
#endif

/* tt__ImagingOptions20Extension has binding name 'tt__ImagingOptions20Extension' for type 'tt:ImagingOptions20Extension' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (532)
#endif

/* tt__ImagingOptions20 has binding name 'tt__ImagingOptions20' for type 'tt:ImagingOptions20' */
#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (531)
#endif

/* tt__NoiseReduction has binding name 'tt__NoiseReduction' for type 'tt:NoiseReduction' */
#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (530)
#endif

/* tt__DefoggingExtension has binding name 'tt__DefoggingExtension' for type 'tt:DefoggingExtension' */
#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (529)
#endif

/* tt__Defogging has binding name 'tt__Defogging' for type 'tt:Defogging' */
#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (528)
#endif

/* tt__ToneCompensationExtension has binding name 'tt__ToneCompensationExtension' for type 'tt:ToneCompensationExtension' */
#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (527)
#endif

/* tt__ToneCompensation has binding name 'tt__ToneCompensation' for type 'tt:ToneCompensation' */
#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (526)
#endif

/* tt__Exposure20 has binding name 'tt__Exposure20' for type 'tt:Exposure20' */
#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (525)
#endif

/* tt__BacklightCompensation20 has binding name 'tt__BacklightCompensation20' for type 'tt:BacklightCompensation20' */
#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (524)
#endif

/* tt__WideDynamicRange20 has binding name 'tt__WideDynamicRange20' for type 'tt:WideDynamicRange20' */
#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (523)
#endif

/* tt__IrCutFilterAutoAdjustmentExtension has binding name 'tt__IrCutFilterAutoAdjustmentExtension' for type 'tt:IrCutFilterAutoAdjustmentExtension' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (522)
#endif

/* tt__IrCutFilterAutoAdjustment has binding name 'tt__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (521)
#endif

/* tt__ImageStabilizationExtension has binding name 'tt__ImageStabilizationExtension' for type 'tt:ImageStabilizationExtension' */
#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (520)
#endif

/* tt__ImageStabilization has binding name 'tt__ImageStabilization' for type 'tt:ImageStabilization' */
#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (519)
#endif

/* tt__ImagingSettingsExtension204 has binding name 'tt__ImagingSettingsExtension204' for type 'tt:ImagingSettingsExtension204' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (518)
#endif

/* tt__ImagingSettingsExtension203 has binding name 'tt__ImagingSettingsExtension203' for type 'tt:ImagingSettingsExtension203' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (517)
#endif

/* tt__ImagingSettingsExtension202 has binding name 'tt__ImagingSettingsExtension202' for type 'tt:ImagingSettingsExtension202' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (516)
#endif

/* tt__ImagingSettingsExtension20 has binding name 'tt__ImagingSettingsExtension20' for type 'tt:ImagingSettingsExtension20' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (515)
#endif

/* tt__ImagingSettings20 has binding name 'tt__ImagingSettings20' for type 'tt:ImagingSettings20' */
#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (514)
#endif

/* tt__FocusStatus20Extension has binding name 'tt__FocusStatus20Extension' for type 'tt:FocusStatus20Extension' */
#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (513)
#endif

/* tt__FocusStatus20 has binding name 'tt__FocusStatus20' for type 'tt:FocusStatus20' */
#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (512)
#endif

/* tt__ImagingStatus20Extension has binding name 'tt__ImagingStatus20Extension' for type 'tt:ImagingStatus20Extension' */
#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (511)
#endif

/* tt__ImagingStatus20 has binding name 'tt__ImagingStatus20' for type 'tt:ImagingStatus20' */
#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (510)
#endif

/* tt__WhiteBalance has binding name 'tt__WhiteBalance' for type 'tt:WhiteBalance' */
#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (509)
#endif

/* tt__ContinuousFocusOptions has binding name 'tt__ContinuousFocusOptions' for type 'tt:ContinuousFocusOptions' */
#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (508)
#endif

/* tt__RelativeFocusOptions has binding name 'tt__RelativeFocusOptions' for type 'tt:RelativeFocusOptions' */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (507)
#endif

/* tt__AbsoluteFocusOptions has binding name 'tt__AbsoluteFocusOptions' for type 'tt:AbsoluteFocusOptions' */
#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (506)
#endif

/* tt__MoveOptions has binding name 'tt__MoveOptions' for type 'tt:MoveOptions' */
#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (505)
#endif

/* tt__ContinuousFocus has binding name 'tt__ContinuousFocus' for type 'tt:ContinuousFocus' */
#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (504)
#endif

/* tt__RelativeFocus has binding name 'tt__RelativeFocus' for type 'tt:RelativeFocus' */
#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (503)
#endif

/* tt__AbsoluteFocus has binding name 'tt__AbsoluteFocus' for type 'tt:AbsoluteFocus' */
#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (502)
#endif

/* tt__FocusMove has binding name 'tt__FocusMove' for type 'tt:FocusMove' */
#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (501)
#endif

/* tt__WhiteBalanceOptions has binding name 'tt__WhiteBalanceOptions' for type 'tt:WhiteBalanceOptions' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (500)
#endif

/* tt__ExposureOptions has binding name 'tt__ExposureOptions' for type 'tt:ExposureOptions' */
#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (499)
#endif

/* tt__FocusOptions has binding name 'tt__FocusOptions' for type 'tt:FocusOptions' */
#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (498)
#endif

/* tt__BacklightCompensationOptions has binding name 'tt__BacklightCompensationOptions' for type 'tt:BacklightCompensationOptions' */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (497)
#endif

/* tt__WideDynamicRangeOptions has binding name 'tt__WideDynamicRangeOptions' for type 'tt:WideDynamicRangeOptions' */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (496)
#endif

/* tt__ImagingOptions has binding name 'tt__ImagingOptions' for type 'tt:ImagingOptions' */
#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (495)
#endif

/* tt__BacklightCompensation has binding name 'tt__BacklightCompensation' for type 'tt:BacklightCompensation' */
#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (494)
#endif

/* tt__WideDynamicRange has binding name 'tt__WideDynamicRange' for type 'tt:WideDynamicRange' */
#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (493)
#endif

/* tt__Exposure has binding name 'tt__Exposure' for type 'tt:Exposure' */
#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (492)
#endif

/* tt__ImagingSettingsExtension has binding name 'tt__ImagingSettingsExtension' for type 'tt:ImagingSettingsExtension' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (491)
#endif

/* tt__ImagingSettings has binding name 'tt__ImagingSettings' for type 'tt:ImagingSettings' */
#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (490)
#endif

/* tt__FocusConfiguration has binding name 'tt__FocusConfiguration' for type 'tt:FocusConfiguration' */
#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (489)
#endif

/* tt__FocusStatus has binding name 'tt__FocusStatus' for type 'tt:FocusStatus' */
#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (488)
#endif

/* tt__ImagingStatus has binding name 'tt__ImagingStatus' for type 'tt:ImagingStatus' */
#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (487)
#endif

/* tt__PTZPresetTourStartingConditionOptionsExtension has binding name 'tt__PTZPresetTourStartingConditionOptionsExtension' for type 'tt:PTZPresetTourStartingConditionOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (486)
#endif

/* tt__PTZPresetTourStartingConditionOptions has binding name 'tt__PTZPresetTourStartingConditionOptions' for type 'tt:PTZPresetTourStartingConditionOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (485)
#endif

/* tt__PTZPresetTourPresetDetailOptionsExtension has binding name 'tt__PTZPresetTourPresetDetailOptionsExtension' for type 'tt:PTZPresetTourPresetDetailOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (484)
#endif

/* tt__PTZPresetTourPresetDetailOptions has binding name 'tt__PTZPresetTourPresetDetailOptions' for type 'tt:PTZPresetTourPresetDetailOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (483)
#endif

/* tt__PTZPresetTourSpotOptions has binding name 'tt__PTZPresetTourSpotOptions' for type 'tt:PTZPresetTourSpotOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (482)
#endif

/* tt__PTZPresetTourOptions has binding name 'tt__PTZPresetTourOptions' for type 'tt:PTZPresetTourOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (481)
#endif

/* tt__PTZPresetTourStartingConditionExtension has binding name 'tt__PTZPresetTourStartingConditionExtension' for type 'tt:PTZPresetTourStartingConditionExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (480)
#endif

/* tt__PTZPresetTourStartingCondition has binding name 'tt__PTZPresetTourStartingCondition' for type 'tt:PTZPresetTourStartingCondition' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (479)
#endif

/* tt__PTZPresetTourStatusExtension has binding name 'tt__PTZPresetTourStatusExtension' for type 'tt:PTZPresetTourStatusExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (478)
#endif

/* tt__PTZPresetTourStatus has binding name 'tt__PTZPresetTourStatus' for type 'tt:PTZPresetTourStatus' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (477)
#endif

/* tt__PTZPresetTourTypeExtension has binding name 'tt__PTZPresetTourTypeExtension' for type 'tt:PTZPresetTourTypeExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (476)
#endif

/* tt__PTZPresetTourPresetDetail has binding name 'tt__PTZPresetTourPresetDetail' for type 'tt:PTZPresetTourPresetDetail' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (475)
#endif

/* tt__PTZPresetTourSpotExtension has binding name 'tt__PTZPresetTourSpotExtension' for type 'tt:PTZPresetTourSpotExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (474)
#endif

/* tt__PTZPresetTourSpot has binding name 'tt__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (473)
#endif

/* tt__PTZPresetTourExtension has binding name 'tt__PTZPresetTourExtension' for type 'tt:PTZPresetTourExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (472)
#endif

/* tt__PresetTour has binding name 'tt__PresetTour' for type 'tt:PresetTour' */
#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (471)
#endif

/* tt__PTZPreset has binding name 'tt__PTZPreset' for type 'tt:PTZPreset' */
#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (470)
#endif

/* tt__PTZSpeed has binding name 'tt__PTZSpeed' for type 'tt:PTZSpeed' */
#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (469)
#endif

/* tt__Space1DDescription has binding name 'tt__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (468)
#endif

/* tt__Space2DDescription has binding name 'tt__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (467)
#endif

/* tt__PTZSpacesExtension has binding name 'tt__PTZSpacesExtension' for type 'tt:PTZSpacesExtension' */
#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (466)
#endif

/* tt__PTZSpaces has binding name 'tt__PTZSpaces' for type 'tt:PTZSpaces' */
#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (465)
#endif

/* tt__ZoomLimits has binding name 'tt__ZoomLimits' for type 'tt:ZoomLimits' */
#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (464)
#endif

/* tt__PanTiltLimits has binding name 'tt__PanTiltLimits' for type 'tt:PanTiltLimits' */
#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (463)
#endif

/* tt__ReverseOptionsExtension has binding name 'tt__ReverseOptionsExtension' for type 'tt:ReverseOptionsExtension' */
#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (462)
#endif

/* tt__ReverseOptions has binding name 'tt__ReverseOptions' for type 'tt:ReverseOptions' */
#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (461)
#endif

/* tt__EFlipOptionsExtension has binding name 'tt__EFlipOptionsExtension' for type 'tt:EFlipOptionsExtension' */
#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (460)
#endif

/* tt__EFlipOptions has binding name 'tt__EFlipOptions' for type 'tt:EFlipOptions' */
#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (459)
#endif

/* tt__PTControlDirectionOptionsExtension has binding name 'tt__PTControlDirectionOptionsExtension' for type 'tt:PTControlDirectionOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (458)
#endif

/* tt__PTControlDirectionOptions has binding name 'tt__PTControlDirectionOptions' for type 'tt:PTControlDirectionOptions' */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (457)
#endif

/* tt__PTZConfigurationOptions2 has binding name 'tt__PTZConfigurationOptions2' for type 'tt:PTZConfigurationOptions2' */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (456)
#endif

/* tt__PTZConfigurationOptions has binding name 'tt__PTZConfigurationOptions' for type 'tt:PTZConfigurationOptions' */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (455)
#endif

/* tt__Reverse has binding name 'tt__Reverse' for type 'tt:Reverse' */
#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (454)
#endif

/* tt__EFlip has binding name 'tt__EFlip' for type 'tt:EFlip' */
#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (453)
#endif

/* tt__PTControlDirectionExtension has binding name 'tt__PTControlDirectionExtension' for type 'tt:PTControlDirectionExtension' */
#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (452)
#endif

/* tt__PTControlDirection has binding name 'tt__PTControlDirection' for type 'tt:PTControlDirection' */
#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (451)
#endif

/* tt__PTZConfigurationExtension2 has binding name 'tt__PTZConfigurationExtension2' for type 'tt:PTZConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (450)
#endif

/* tt__PTZConfigurationExtension has binding name 'tt__PTZConfigurationExtension' for type 'tt:PTZConfigurationExtension' */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (449)
#endif

/* tt__PTZConfiguration has binding name 'tt__PTZConfiguration' for type 'tt:PTZConfiguration' */
#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (448)
#endif

/* tt__PTZPresetTourSupportedExtension has binding name 'tt__PTZPresetTourSupportedExtension' for type 'tt:PTZPresetTourSupportedExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (447)
#endif

/* tt__PTZPresetTourSupported has binding name 'tt__PTZPresetTourSupported' for type 'tt:PTZPresetTourSupported' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (446)
#endif

/* tt__PTZNodeExtension2 has binding name 'tt__PTZNodeExtension2' for type 'tt:PTZNodeExtension2' */
#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (445)
#endif

/* tt__PTZNodeExtension has binding name 'tt__PTZNodeExtension' for type 'tt:PTZNodeExtension' */
#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (444)
#endif

/* tt__PTZNode has binding name 'tt__PTZNode' for type 'tt:PTZNode' */
#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (443)
#endif

/* tt__DigitalInput has binding name 'tt__DigitalInput' for type 'tt:DigitalInput' */
#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (442)
#endif

/* tt__RelayOutput has binding name 'tt__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (441)
#endif

/* tt__RelayOutputSettings has binding name 'tt__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (440)
#endif

/* tt__GenericEapPwdConfigurationExtension has binding name 'tt__GenericEapPwdConfigurationExtension' for type 'tt:GenericEapPwdConfigurationExtension' */
#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (439)
#endif

/* tt__TLSConfiguration has binding name 'tt__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (438)
#endif

/* tt__EapMethodExtension has binding name 'tt__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (437)
#endif

/* tt__EAPMethodConfiguration has binding name 'tt__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (436)
#endif

/* tt__Dot1XConfigurationExtension has binding name 'tt__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (435)
#endif

/* tt__Dot1XConfiguration has binding name 'tt__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (434)
#endif

/* tt__CertificateInformationExtension has binding name 'tt__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (433)
#endif

/* tt__CertificateUsage has binding name 'tt__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (432)
#endif

/* tt__CertificateInformation has binding name 'tt__CertificateInformation' for type 'tt:CertificateInformation' */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (431)
#endif

/* tt__CertificateWithPrivateKey has binding name 'tt__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (430)
#endif

/* tt__CertificateStatus has binding name 'tt__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (429)
#endif

/* tt__Certificate has binding name 'tt__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (428)
#endif

/* tt__CertificateGenerationParametersExtension has binding name 'tt__CertificateGenerationParametersExtension' for type 'tt:CertificateGenerationParametersExtension' */
#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (427)
#endif

/* tt__CertificateGenerationParameters has binding name 'tt__CertificateGenerationParameters' for type 'tt:CertificateGenerationParameters' */
#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (426)
#endif

/* tt__UserExtension has binding name 'tt__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (425)
#endif

/* tt__User has binding name 'tt__User' for type 'tt:User' */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (424)
#endif

/* tt__RemoteUser has binding name 'tt__RemoteUser' for type 'tt:RemoteUser' */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (423)
#endif

/* tt__TimeZone has binding name 'tt__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (422)
#endif

/* tt__Time has binding name 'tt__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (421)
#endif

/* tt__Date has binding name 'tt__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (420)
#endif

/* tt__DateTime has binding name 'tt__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (419)
#endif

/* tt__SystemDateTimeExtension has binding name 'tt__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (418)
#endif

/* tt__SystemDateTime has binding name 'tt__SystemDateTime' for type 'tt:SystemDateTime' */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (417)
#endif

/* tt__SystemLogUri has binding name 'tt__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (416)
#endif

/* tt__SystemLogUriList has binding name 'tt__SystemLogUriList' for type 'tt:SystemLogUriList' */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (415)
#endif

/* tt__BackupFile has binding name 'tt__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (414)
#endif

/* tt__AttachmentData has binding name 'tt__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (413)
#endif

/* tt__BinaryData has binding name 'tt__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (412)
#endif

/* tt__SupportInformation has binding name 'tt__SupportInformation' for type 'tt:SupportInformation' */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (411)
#endif

/* tt__SystemLog has binding name 'tt__SystemLog' for type 'tt:SystemLog' */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (410)
#endif

/* tt__AnalyticsDeviceExtension has binding name 'tt__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (409)
#endif

/* tt__AnalyticsDeviceCapabilities has binding name 'tt__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (408)
#endif

/* tt__ReceiverCapabilities has binding name 'tt__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (407)
#endif

/* tt__ReplayCapabilities has binding name 'tt__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (406)
#endif

/* tt__SearchCapabilities has binding name 'tt__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (405)
#endif

/* tt__RecordingCapabilities has binding name 'tt__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (404)
#endif

/* tt__DisplayCapabilities has binding name 'tt__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (403)
#endif

/* tt__DeviceIOCapabilities has binding name 'tt__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (402)
#endif

/* tt__PTZCapabilities has binding name 'tt__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (401)
#endif

/* tt__ImagingCapabilities has binding name 'tt__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (400)
#endif

/* tt__OnvifVersion has binding name 'tt__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (399)
#endif

/* tt__SystemCapabilitiesExtension2 has binding name 'tt__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (398)
#endif

/* tt__SystemCapabilitiesExtension has binding name 'tt__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (397)
#endif

/* tt__SystemCapabilities has binding name 'tt__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (396)
#endif

/* tt__SecurityCapabilitiesExtension2 has binding name 'tt__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (395)
#endif

/* tt__SecurityCapabilitiesExtension has binding name 'tt__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (394)
#endif

/* tt__SecurityCapabilities has binding name 'tt__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (393)
#endif

/* tt__NetworkCapabilitiesExtension2 has binding name 'tt__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (392)
#endif

/* tt__NetworkCapabilitiesExtension has binding name 'tt__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (391)
#endif

/* tt__NetworkCapabilities has binding name 'tt__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (390)
#endif

/* tt__ProfileCapabilities has binding name 'tt__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (389)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension has binding name 'tt__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (388)
#endif

/* tt__RealTimeStreamingCapabilities has binding name 'tt__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (387)
#endif

/* tt__MediaCapabilitiesExtension has binding name 'tt__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (386)
#endif

/* tt__MediaCapabilities has binding name 'tt__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (385)
#endif

/* tt__IOCapabilitiesExtension2 has binding name 'tt__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (384)
#endif

/* tt__IOCapabilitiesExtension has binding name 'tt__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (383)
#endif

/* tt__IOCapabilities has binding name 'tt__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (382)
#endif

/* tt__EventCapabilities has binding name 'tt__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (381)
#endif

/* tt__DeviceCapabilitiesExtension has binding name 'tt__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (380)
#endif

/* tt__DeviceCapabilities has binding name 'tt__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (379)
#endif

/* tt__AnalyticsCapabilities has binding name 'tt__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (378)
#endif

/* tt__CapabilitiesExtension2 has binding name 'tt__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (377)
#endif

/* tt__CapabilitiesExtension has binding name 'tt__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (376)
#endif

/* tt__Capabilities has binding name 'tt__Capabilities' for type 'tt:Capabilities' */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (375)
#endif

/* tt__Dot11AvailableNetworksExtension has binding name 'tt__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (374)
#endif

/* tt__Dot11AvailableNetworks has binding name 'tt__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (373)
#endif

/* tt__Dot11Status has binding name 'tt__Dot11Status' for type 'tt:Dot11Status' */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (372)
#endif

/* tt__Dot11Capabilities has binding name 'tt__Dot11Capabilities' for type 'tt:Dot11Capabilities' */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (371)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 has binding name 'tt__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (370)
#endif

/* tt__Dot11PSKSetExtension has binding name 'tt__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (369)
#endif

/* tt__Dot11PSKSet has binding name 'tt__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (368)
#endif

/* tt__Dot11SecurityConfigurationExtension has binding name 'tt__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (367)
#endif

/* tt__Dot11SecurityConfiguration has binding name 'tt__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (366)
#endif

/* tt__Dot11Configuration has binding name 'tt__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (365)
#endif

/* tt__IPAddressFilterExtension has binding name 'tt__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (364)
#endif

/* tt__IPAddressFilter has binding name 'tt__IPAddressFilter' for type 'tt:IPAddressFilter' */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (363)
#endif

/* tt__NetworkZeroConfigurationExtension2 has binding name 'tt__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (362)
#endif

/* tt__NetworkZeroConfigurationExtension has binding name 'tt__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (361)
#endif

/* tt__NetworkZeroConfiguration has binding name 'tt__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (360)
#endif

/* tt__NetworkGateway has binding name 'tt__NetworkGateway' for type 'tt:NetworkGateway' */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (359)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration has binding name 'tt__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (358)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration has binding name 'tt__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (357)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension has binding name 'tt__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (356)
#endif

/* tt__NetworkInterfaceSetConfiguration has binding name 'tt__NetworkInterfaceSetConfiguration' for type 'tt:NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (355)
#endif

/* tt__DynamicDNSInformationExtension has binding name 'tt__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (354)
#endif

/* tt__DynamicDNSInformation has binding name 'tt__DynamicDNSInformation' for type 'tt:DynamicDNSInformation' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (353)
#endif

/* tt__NTPInformationExtension has binding name 'tt__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (352)
#endif

/* tt__NTPInformation has binding name 'tt__NTPInformation' for type 'tt:NTPInformation' */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (351)
#endif

/* tt__DNSInformationExtension has binding name 'tt__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (350)
#endif

/* tt__DNSInformation has binding name 'tt__DNSInformation' for type 'tt:DNSInformation' */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (349)
#endif

/* tt__HostnameInformationExtension has binding name 'tt__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (348)
#endif

/* tt__HostnameInformation has binding name 'tt__HostnameInformation' for type 'tt:HostnameInformation' */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (347)
#endif

/* tt__PrefixedIPv6Address has binding name 'tt__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (346)
#endif

/* tt__PrefixedIPv4Address has binding name 'tt__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (345)
#endif

/* tt__IPAddress has binding name 'tt__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (344)
#endif

/* tt__NetworkHostExtension has binding name 'tt__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (343)
#endif

/* tt__NetworkHost has binding name 'tt__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (342)
#endif

/* tt__NetworkProtocolExtension has binding name 'tt__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (341)
#endif

/* tt__NetworkProtocol has binding name 'tt__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (340)
#endif

/* tt__IPv6ConfigurationExtension has binding name 'tt__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (339)
#endif

/* tt__IPv6Configuration has binding name 'tt__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (338)
#endif

/* tt__IPv4Configuration has binding name 'tt__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (337)
#endif

/* tt__IPv4NetworkInterface has binding name 'tt__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (336)
#endif

/* tt__IPv6NetworkInterface has binding name 'tt__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (335)
#endif

/* tt__NetworkInterfaceInfo has binding name 'tt__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (334)
#endif

/* tt__NetworkInterfaceConnectionSetting has binding name 'tt__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (333)
#endif

/* tt__NetworkInterfaceLink has binding name 'tt__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (332)
#endif

/* tt__NetworkInterfaceExtension2 has binding name 'tt__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (331)
#endif

/* tt__Dot3Configuration has binding name 'tt__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (330)
#endif

/* tt__NetworkInterfaceExtension has binding name 'tt__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (329)
#endif

/* tt__NetworkInterface has binding name 'tt__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (328)
#endif

/* tt__Scope has binding name 'tt__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (327)
#endif

/* tt__MediaUri has binding name 'tt__MediaUri' for type 'tt:MediaUri' */
#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (326)
#endif

/* tt__Transport has binding name 'tt__Transport' for type 'tt:Transport' */
#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (325)
#endif

/* tt__StreamSetup has binding name 'tt__StreamSetup' for type 'tt:StreamSetup' */
#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (324)
#endif

/* tt__MulticastConfiguration has binding name 'tt__MulticastConfiguration' for type 'tt:MulticastConfiguration' */
#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (323)
#endif

/* tt__AudioDecoderConfigurationOptionsExtension has binding name 'tt__AudioDecoderConfigurationOptionsExtension' for type 'tt:AudioDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (322)
#endif

/* tt__G726DecOptions has binding name 'tt__G726DecOptions' for type 'tt:G726DecOptions' */
#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (321)
#endif

/* tt__AACDecOptions has binding name 'tt__AACDecOptions' for type 'tt:AACDecOptions' */
#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (320)
#endif

/* tt__G711DecOptions has binding name 'tt__G711DecOptions' for type 'tt:G711DecOptions' */
#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (319)
#endif

/* tt__AudioDecoderConfigurationOptions has binding name 'tt__AudioDecoderConfigurationOptions' for type 'tt:AudioDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (318)
#endif

/* tt__AudioDecoderConfiguration has binding name 'tt__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (317)
#endif

/* tt__AudioOutputConfigurationOptions has binding name 'tt__AudioOutputConfigurationOptions' for type 'tt:AudioOutputConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (316)
#endif

/* tt__AudioOutputConfiguration has binding name 'tt__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (315)
#endif

/* tt__AudioOutput has binding name 'tt__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (314)
#endif

/* tt__VideoDecoderConfigurationOptionsExtension has binding name 'tt__VideoDecoderConfigurationOptionsExtension' for type 'tt:VideoDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (313)
#endif

/* tt__Mpeg4DecOptions has binding name 'tt__Mpeg4DecOptions' for type 'tt:Mpeg4DecOptions' */
#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (312)
#endif

/* tt__JpegDecOptions has binding name 'tt__JpegDecOptions' for type 'tt:JpegDecOptions' */
#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (311)
#endif

/* tt__H264DecOptions has binding name 'tt__H264DecOptions' for type 'tt:H264DecOptions' */
#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (310)
#endif

/* tt__VideoDecoderConfigurationOptions has binding name 'tt__VideoDecoderConfigurationOptions' for type 'tt:VideoDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (309)
#endif

/* tt__VideoOutputConfigurationOptions has binding name 'tt__VideoOutputConfigurationOptions' for type 'tt:VideoOutputConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (308)
#endif

/* tt__VideoOutputConfiguration has binding name 'tt__VideoOutputConfiguration' for type 'tt:VideoOutputConfiguration' */
#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (307)
#endif

/* tt__VideoOutputExtension has binding name 'tt__VideoOutputExtension' for type 'tt:VideoOutputExtension' */
#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (306)
#endif

/* tt__VideoOutput has binding name 'tt__VideoOutput' for type 'tt:VideoOutput' */
#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (305)
#endif

/* tt__PTZStatusFilterOptionsExtension has binding name 'tt__PTZStatusFilterOptionsExtension' for type 'tt:PTZStatusFilterOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (304)
#endif

/* tt__PTZStatusFilterOptions has binding name 'tt__PTZStatusFilterOptions' for type 'tt:PTZStatusFilterOptions' */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (303)
#endif

/* tt__MetadataConfigurationOptionsExtension2 has binding name 'tt__MetadataConfigurationOptionsExtension2' for type 'tt:MetadataConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (302)
#endif

/* tt__MetadataConfigurationOptionsExtension has binding name 'tt__MetadataConfigurationOptionsExtension' for type 'tt:MetadataConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (301)
#endif

/* tt__MetadataConfigurationOptions has binding name 'tt__MetadataConfigurationOptions' for type 'tt:MetadataConfigurationOptions' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (300)
#endif

/* tt__EventSubscription has binding name 'tt__EventSubscription' for type 'tt:EventSubscription' */
#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (299)
#endif

/* tt__PTZFilter has binding name 'tt__PTZFilter' for type 'tt:PTZFilter' */
#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (298)
#endif

/* tt__MetadataConfigurationExtension has binding name 'tt__MetadataConfigurationExtension' for type 'tt:MetadataConfigurationExtension' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (297)
#endif

/* tt__MetadataConfiguration has binding name 'tt__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (296)
#endif

/* tt__VideoAnalyticsConfiguration has binding name 'tt__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (295)
#endif

/* tt__AudioEncoder2ConfigurationOptions has binding name 'tt__AudioEncoder2ConfigurationOptions' for type 'tt:AudioEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (294)
#endif

/* tt__AudioEncoder2Configuration has binding name 'tt__AudioEncoder2Configuration' for type 'tt:AudioEncoder2Configuration' */
#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (293)
#endif

/* tt__AudioEncoderConfigurationOption has binding name 'tt__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (292)
#endif

/* tt__AudioEncoderConfigurationOptions has binding name 'tt__AudioEncoderConfigurationOptions' for type 'tt:AudioEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (291)
#endif

/* tt__AudioEncoderConfiguration has binding name 'tt__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (290)
#endif

/* tt__AudioSourceOptionsExtension has binding name 'tt__AudioSourceOptionsExtension' for type 'tt:AudioSourceOptionsExtension' */
#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (289)
#endif

/* tt__AudioSourceConfigurationOptions has binding name 'tt__AudioSourceConfigurationOptions' for type 'tt:AudioSourceConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (288)
#endif

/* tt__AudioSourceConfiguration has binding name 'tt__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (287)
#endif

/* tt__VideoEncoder2ConfigurationOptions has binding name 'tt__VideoEncoder2ConfigurationOptions' for type 'tt:VideoEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (286)
#endif

/* tt__VideoRateControl2 has binding name 'tt__VideoRateControl2' for type 'tt:VideoRateControl2' */
#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (285)
#endif

/* tt__VideoResolution2 has binding name 'tt__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (284)
#endif

/* tt__VideoEncoder2Configuration has binding name 'tt__VideoEncoder2Configuration' for type 'tt:VideoEncoder2Configuration' */
#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (283)
#endif

/* tt__H264Options2 has binding name 'tt__H264Options2' for type 'tt:H264Options2' */
#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (282)
#endif

/* tt__H264Options has binding name 'tt__H264Options' for type 'tt:H264Options' */
#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (281)
#endif

/* tt__Mpeg4Options2 has binding name 'tt__Mpeg4Options2' for type 'tt:Mpeg4Options2' */
#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (280)
#endif

/* tt__Mpeg4Options has binding name 'tt__Mpeg4Options' for type 'tt:Mpeg4Options' */
#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (279)
#endif

/* tt__JpegOptions2 has binding name 'tt__JpegOptions2' for type 'tt:JpegOptions2' */
#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (278)
#endif

/* tt__JpegOptions has binding name 'tt__JpegOptions' for type 'tt:JpegOptions' */
#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (277)
#endif

/* tt__VideoEncoderOptionsExtension2 has binding name 'tt__VideoEncoderOptionsExtension2' for type 'tt:VideoEncoderOptionsExtension2' */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (276)
#endif

/* tt__VideoEncoderOptionsExtension has binding name 'tt__VideoEncoderOptionsExtension' for type 'tt:VideoEncoderOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (275)
#endif

/* tt__VideoEncoderConfigurationOptions has binding name 'tt__VideoEncoderConfigurationOptions' for type 'tt:VideoEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (274)
#endif

/* tt__H264Configuration has binding name 'tt__H264Configuration' for type 'tt:H264Configuration' */
#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (273)
#endif

/* tt__Mpeg4Configuration has binding name 'tt__Mpeg4Configuration' for type 'tt:Mpeg4Configuration' */
#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (272)
#endif

/* tt__VideoRateControl has binding name 'tt__VideoRateControl' for type 'tt:VideoRateControl' */
#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (271)
#endif

/* tt__VideoResolution has binding name 'tt__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (270)
#endif

/* tt__VideoEncoderConfiguration has binding name 'tt__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (269)
#endif

/* tt__SceneOrientation has binding name 'tt__SceneOrientation' for type 'tt:SceneOrientation' */
#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (268)
#endif

/* tt__RotateOptionsExtension has binding name 'tt__RotateOptionsExtension' for type 'tt:RotateOptionsExtension' */
#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (267)
#endif

/* tt__RotateOptions has binding name 'tt__RotateOptions' for type 'tt:RotateOptions' */
#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (266)
#endif

/* tt__VideoSourceConfigurationOptionsExtension2 has binding name 'tt__VideoSourceConfigurationOptionsExtension2' for type 'tt:VideoSourceConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (265)
#endif

/* tt__VideoSourceConfigurationOptionsExtension has binding name 'tt__VideoSourceConfigurationOptionsExtension' for type 'tt:VideoSourceConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (264)
#endif

/* tt__VideoSourceConfigurationOptions has binding name 'tt__VideoSourceConfigurationOptions' for type 'tt:VideoSourceConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (263)
#endif

/* tt__LensDescription has binding name 'tt__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (262)
#endif

/* tt__LensOffset has binding name 'tt__LensOffset' for type 'tt:LensOffset' */
#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (261)
#endif

/* tt__LensProjection has binding name 'tt__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (260)
#endif

/* tt__RotateExtension has binding name 'tt__RotateExtension' for type 'tt:RotateExtension' */
#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (259)
#endif

/* tt__Rotate has binding name 'tt__Rotate' for type 'tt:Rotate' */
#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (258)
#endif

/* tt__VideoSourceConfigurationExtension2 has binding name 'tt__VideoSourceConfigurationExtension2' for type 'tt:VideoSourceConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (257)
#endif

/* tt__VideoSourceConfigurationExtension has binding name 'tt__VideoSourceConfigurationExtension' for type 'tt:VideoSourceConfigurationExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (256)
#endif

/* tt__VideoSourceConfiguration has binding name 'tt__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (255)
#endif

/* tt__ConfigurationEntity has binding name 'tt__ConfigurationEntity' for type 'tt:ConfigurationEntity' */
#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (254)
#endif

/* tt__ProfileExtension2 has binding name 'tt__ProfileExtension2' for type 'tt:ProfileExtension2' */
#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (253)
#endif

/* tt__ProfileExtension has binding name 'tt__ProfileExtension' for type 'tt:ProfileExtension' */
#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (252)
#endif

/* tt__Profile has binding name 'tt__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (251)
#endif

/* tt__AudioSource has binding name 'tt__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (250)
#endif

/* tt__VideoSourceExtension2 has binding name 'tt__VideoSourceExtension2' for type 'tt:VideoSourceExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (249)
#endif

/* tt__VideoSourceExtension has binding name 'tt__VideoSourceExtension' for type 'tt:VideoSourceExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (248)
#endif

/* tt__VideoSource has binding name 'tt__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (247)
#endif

/* tt__AnyHolder has binding name 'tt__AnyHolder' for type 'tt:AnyHolder' */
#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (246)
#endif

/* tt__FloatList has binding name 'tt__FloatList' for type 'tt:FloatList' */
#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (245)
#endif

/* tt__IntList has binding name 'tt__IntList' for type 'tt:IntList' */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (244)
#endif

/* tt__DurationRange has binding name 'tt__DurationRange' for type 'tt:DurationRange' */
#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (243)
#endif

/* tt__FloatRange has binding name 'tt__FloatRange' for type 'tt:FloatRange' */
#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (242)
#endif

/* tt__IntRectangleRange has binding name 'tt__IntRectangleRange' for type 'tt:IntRectangleRange' */
#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (241)
#endif

/* tt__IntRectangle has binding name 'tt__IntRectangle' for type 'tt:IntRectangle' */
#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (240)
#endif

/* tt__DeviceEntity has binding name 'tt__DeviceEntity' for type 'tt:DeviceEntity' */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (239)
#endif

/* _trt__DeleteOSDResponse has binding name '_trt__DeleteOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (238)
#endif

/* _trt__DeleteOSD has binding name '_trt__DeleteOSD' for type '' */
#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (237)
#endif

/* _trt__CreateOSDResponse has binding name '_trt__CreateOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (236)
#endif

/* _trt__CreateOSD has binding name '_trt__CreateOSD' for type '' */
#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (235)
#endif

/* _trt__GetOSDOptionsResponse has binding name '_trt__GetOSDOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (234)
#endif

/* _trt__GetOSDOptions has binding name '_trt__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (233)
#endif

/* _trt__SetOSDResponse has binding name '_trt__SetOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (232)
#endif

/* _trt__SetOSD has binding name '_trt__SetOSD' for type '' */
#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (231)
#endif

/* _trt__GetOSDResponse has binding name '_trt__GetOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (230)
#endif

/* _trt__GetOSD has binding name '_trt__GetOSD' for type '' */
#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (229)
#endif

/* _trt__GetOSDsResponse has binding name '_trt__GetOSDsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (228)
#endif

/* _trt__GetOSDs has binding name '_trt__GetOSDs' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (227)
#endif

/* _trt__SetVideoSourceModeResponse has binding name '_trt__SetVideoSourceModeResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (226)
#endif

/* _trt__SetVideoSourceMode has binding name '_trt__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (225)
#endif

/* _trt__GetVideoSourceModesResponse has binding name '_trt__GetVideoSourceModesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (224)
#endif

/* _trt__GetVideoSourceModes has binding name '_trt__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (223)
#endif

/* _trt__GetSnapshotUriResponse has binding name '_trt__GetSnapshotUriResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (222)
#endif

/* _trt__GetSnapshotUri has binding name '_trt__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (221)
#endif

/* _trt__SetSynchronizationPointResponse has binding name '_trt__SetSynchronizationPointResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (220)
#endif

/* _trt__SetSynchronizationPoint has binding name '_trt__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (219)
#endif

/* _trt__StopMulticastStreamingResponse has binding name '_trt__StopMulticastStreamingResponse' for type '' */
#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (218)
#endif

/* _trt__StopMulticastStreaming has binding name '_trt__StopMulticastStreaming' for type '' */
#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (217)
#endif

/* _trt__StartMulticastStreamingResponse has binding name '_trt__StartMulticastStreamingResponse' for type '' */
#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (216)
#endif

/* _trt__StartMulticastStreaming has binding name '_trt__StartMulticastStreaming' for type '' */
#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (215)
#endif

/* _trt__GetStreamUriResponse has binding name '_trt__GetStreamUriResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (214)
#endif

/* _trt__GetStreamUri has binding name '_trt__GetStreamUri' for type '' */
#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (213)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse has binding name '_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (212)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstances has binding name '_trt__GetGuaranteedNumberOfVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (211)
#endif

/* _trt__GetAudioDecoderConfigurationOptionsResponse has binding name '_trt__GetAudioDecoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (210)
#endif

/* _trt__GetAudioDecoderConfigurationOptions has binding name '_trt__GetAudioDecoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (209)
#endif

/* _trt__GetAudioOutputConfigurationOptionsResponse has binding name '_trt__GetAudioOutputConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (208)
#endif

/* _trt__GetAudioOutputConfigurationOptions has binding name '_trt__GetAudioOutputConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (207)
#endif

/* _trt__GetMetadataConfigurationOptionsResponse has binding name '_trt__GetMetadataConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (206)
#endif

/* _trt__GetMetadataConfigurationOptions has binding name '_trt__GetMetadataConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (205)
#endif

/* _trt__GetAudioEncoderConfigurationOptionsResponse has binding name '_trt__GetAudioEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (204)
#endif

/* _trt__GetAudioEncoderConfigurationOptions has binding name '_trt__GetAudioEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (203)
#endif

/* _trt__GetAudioSourceConfigurationOptionsResponse has binding name '_trt__GetAudioSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (202)
#endif

/* _trt__GetAudioSourceConfigurationOptions has binding name '_trt__GetAudioSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (201)
#endif

/* _trt__GetVideoEncoderConfigurationOptionsResponse has binding name '_trt__GetVideoEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (200)
#endif

/* _trt__GetVideoEncoderConfigurationOptions has binding name '_trt__GetVideoEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (199)
#endif

/* _trt__GetVideoSourceConfigurationOptionsResponse has binding name '_trt__GetVideoSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (198)
#endif

/* _trt__GetVideoSourceConfigurationOptions has binding name '_trt__GetVideoSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (197)
#endif

/* _trt__SetAudioDecoderConfigurationResponse has binding name '_trt__SetAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (196)
#endif

/* _trt__SetAudioDecoderConfiguration has binding name '_trt__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (195)
#endif

/* _trt__SetAudioOutputConfigurationResponse has binding name '_trt__SetAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (194)
#endif

/* _trt__SetAudioOutputConfiguration has binding name '_trt__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (193)
#endif

/* _trt__SetMetadataConfigurationResponse has binding name '_trt__SetMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (192)
#endif

/* _trt__SetMetadataConfiguration has binding name '_trt__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (191)
#endif

/* _trt__SetVideoAnalyticsConfigurationResponse has binding name '_trt__SetVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (190)
#endif

/* _trt__SetVideoAnalyticsConfiguration has binding name '_trt__SetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (189)
#endif

/* _trt__SetAudioSourceConfigurationResponse has binding name '_trt__SetAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (188)
#endif

/* _trt__SetAudioSourceConfiguration has binding name '_trt__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (187)
#endif

/* _trt__SetAudioEncoderConfigurationResponse has binding name '_trt__SetAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (186)
#endif

/* _trt__SetAudioEncoderConfiguration has binding name '_trt__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (185)
#endif

/* _trt__SetVideoSourceConfigurationResponse has binding name '_trt__SetVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (184)
#endif

/* _trt__SetVideoSourceConfiguration has binding name '_trt__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (183)
#endif

/* _trt__SetVideoEncoderConfigurationResponse has binding name '_trt__SetVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (182)
#endif

/* _trt__SetVideoEncoderConfiguration has binding name '_trt__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (181)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurationsResponse has binding name '_trt__GetCompatibleAudioDecoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (180)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurations has binding name '_trt__GetCompatibleAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (179)
#endif

/* _trt__GetCompatibleAudioOutputConfigurationsResponse has binding name '_trt__GetCompatibleAudioOutputConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (178)
#endif

/* _trt__GetCompatibleAudioOutputConfigurations has binding name '_trt__GetCompatibleAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (177)
#endif

/* _trt__GetCompatibleMetadataConfigurationsResponse has binding name '_trt__GetCompatibleMetadataConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (176)
#endif

/* _trt__GetCompatibleMetadataConfigurations has binding name '_trt__GetCompatibleMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (175)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurationsResponse has binding name '_trt__GetCompatibleVideoAnalyticsConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (174)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurations has binding name '_trt__GetCompatibleVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (173)
#endif

/* _trt__GetCompatibleAudioSourceConfigurationsResponse has binding name '_trt__GetCompatibleAudioSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (172)
#endif

/* _trt__GetCompatibleAudioSourceConfigurations has binding name '_trt__GetCompatibleAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (171)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurationsResponse has binding name '_trt__GetCompatibleAudioEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (170)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurations has binding name '_trt__GetCompatibleAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (169)
#endif

/* _trt__GetCompatibleVideoSourceConfigurationsResponse has binding name '_trt__GetCompatibleVideoSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (168)
#endif

/* _trt__GetCompatibleVideoSourceConfigurations has binding name '_trt__GetCompatibleVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (167)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurationsResponse has binding name '_trt__GetCompatibleVideoEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (166)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurations has binding name '_trt__GetCompatibleVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (165)
#endif

/* _trt__GetAudioDecoderConfigurationResponse has binding name '_trt__GetAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (164)
#endif

/* _trt__GetAudioDecoderConfiguration has binding name '_trt__GetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (163)
#endif

/* _trt__GetAudioOutputConfigurationResponse has binding name '_trt__GetAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (162)
#endif

/* _trt__GetAudioOutputConfiguration has binding name '_trt__GetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (161)
#endif

/* _trt__GetMetadataConfigurationResponse has binding name '_trt__GetMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (160)
#endif

/* _trt__GetMetadataConfiguration has binding name '_trt__GetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (159)
#endif

/* _trt__GetVideoAnalyticsConfigurationResponse has binding name '_trt__GetVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (158)
#endif

/* _trt__GetVideoAnalyticsConfiguration has binding name '_trt__GetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (157)
#endif

/* _trt__GetAudioEncoderConfigurationResponse has binding name '_trt__GetAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (156)
#endif

/* _trt__GetAudioEncoderConfiguration has binding name '_trt__GetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (155)
#endif

/* _trt__GetAudioSourceConfigurationResponse has binding name '_trt__GetAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (154)
#endif

/* _trt__GetAudioSourceConfiguration has binding name '_trt__GetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (153)
#endif

/* _trt__GetVideoEncoderConfigurationResponse has binding name '_trt__GetVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (152)
#endif

/* _trt__GetVideoEncoderConfiguration has binding name '_trt__GetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (151)
#endif

/* _trt__GetVideoSourceConfigurationResponse has binding name '_trt__GetVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (150)
#endif

/* _trt__GetVideoSourceConfiguration has binding name '_trt__GetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (149)
#endif

/* _trt__GetAudioDecoderConfigurationsResponse has binding name '_trt__GetAudioDecoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (148)
#endif

/* _trt__GetAudioDecoderConfigurations has binding name '_trt__GetAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (147)
#endif

/* _trt__GetAudioOutputConfigurationsResponse has binding name '_trt__GetAudioOutputConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (146)
#endif

/* _trt__GetAudioOutputConfigurations has binding name '_trt__GetAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (145)
#endif

/* _trt__GetMetadataConfigurationsResponse has binding name '_trt__GetMetadataConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (144)
#endif

/* _trt__GetMetadataConfigurations has binding name '_trt__GetMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (143)
#endif

/* _trt__GetVideoAnalyticsConfigurationsResponse has binding name '_trt__GetVideoAnalyticsConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (142)
#endif

/* _trt__GetVideoAnalyticsConfigurations has binding name '_trt__GetVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (141)
#endif

/* _trt__GetAudioSourceConfigurationsResponse has binding name '_trt__GetAudioSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (140)
#endif

/* _trt__GetAudioSourceConfigurations has binding name '_trt__GetAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (139)
#endif

/* _trt__GetAudioEncoderConfigurationsResponse has binding name '_trt__GetAudioEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (138)
#endif

/* _trt__GetAudioEncoderConfigurations has binding name '_trt__GetAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (137)
#endif

/* _trt__GetVideoSourceConfigurationsResponse has binding name '_trt__GetVideoSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (136)
#endif

/* _trt__GetVideoSourceConfigurations has binding name '_trt__GetVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (135)
#endif

/* _trt__GetVideoEncoderConfigurationsResponse has binding name '_trt__GetVideoEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (134)
#endif

/* _trt__GetVideoEncoderConfigurations has binding name '_trt__GetVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (133)
#endif

/* _trt__DeleteProfileResponse has binding name '_trt__DeleteProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (132)
#endif

/* _trt__DeleteProfile has binding name '_trt__DeleteProfile' for type '' */
#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (131)
#endif

/* _trt__RemoveAudioDecoderConfigurationResponse has binding name '_trt__RemoveAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (130)
#endif

/* _trt__RemoveAudioDecoderConfiguration has binding name '_trt__RemoveAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (129)
#endif

/* _trt__AddAudioDecoderConfigurationResponse has binding name '_trt__AddAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (128)
#endif

/* _trt__AddAudioDecoderConfiguration has binding name '_trt__AddAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (127)
#endif

/* _trt__RemoveAudioOutputConfigurationResponse has binding name '_trt__RemoveAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (126)
#endif

/* _trt__RemoveAudioOutputConfiguration has binding name '_trt__RemoveAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (125)
#endif

/* _trt__AddAudioOutputConfigurationResponse has binding name '_trt__AddAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (124)
#endif

/* _trt__AddAudioOutputConfiguration has binding name '_trt__AddAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (123)
#endif

/* _trt__RemoveMetadataConfigurationResponse has binding name '_trt__RemoveMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (122)
#endif

/* _trt__RemoveMetadataConfiguration has binding name '_trt__RemoveMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (121)
#endif

/* _trt__AddMetadataConfigurationResponse has binding name '_trt__AddMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (120)
#endif

/* _trt__AddMetadataConfiguration has binding name '_trt__AddMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (119)
#endif

/* _trt__RemoveVideoAnalyticsConfigurationResponse has binding name '_trt__RemoveVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (118)
#endif

/* _trt__RemoveVideoAnalyticsConfiguration has binding name '_trt__RemoveVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (117)
#endif

/* _trt__AddVideoAnalyticsConfigurationResponse has binding name '_trt__AddVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (116)
#endif

/* _trt__AddVideoAnalyticsConfiguration has binding name '_trt__AddVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (115)
#endif

/* _trt__RemovePTZConfigurationResponse has binding name '_trt__RemovePTZConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (114)
#endif

/* _trt__RemovePTZConfiguration has binding name '_trt__RemovePTZConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (113)
#endif

/* _trt__AddPTZConfigurationResponse has binding name '_trt__AddPTZConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (112)
#endif

/* _trt__AddPTZConfiguration has binding name '_trt__AddPTZConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (111)
#endif

/* _trt__RemoveAudioSourceConfigurationResponse has binding name '_trt__RemoveAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (110)
#endif

/* _trt__RemoveAudioSourceConfiguration has binding name '_trt__RemoveAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (109)
#endif

/* _trt__AddAudioSourceConfigurationResponse has binding name '_trt__AddAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (108)
#endif

/* _trt__AddAudioSourceConfiguration has binding name '_trt__AddAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (107)
#endif

/* _trt__RemoveAudioEncoderConfigurationResponse has binding name '_trt__RemoveAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (106)
#endif

/* _trt__RemoveAudioEncoderConfiguration has binding name '_trt__RemoveAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (105)
#endif

/* _trt__AddAudioEncoderConfigurationResponse has binding name '_trt__AddAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (104)
#endif

/* _trt__AddAudioEncoderConfiguration has binding name '_trt__AddAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (103)
#endif

/* _trt__RemoveVideoSourceConfigurationResponse has binding name '_trt__RemoveVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (102)
#endif

/* _trt__RemoveVideoSourceConfiguration has binding name '_trt__RemoveVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (101)
#endif

/* _trt__AddVideoSourceConfigurationResponse has binding name '_trt__AddVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (100)
#endif

/* _trt__AddVideoSourceConfiguration has binding name '_trt__AddVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (99)
#endif

/* _trt__RemoveVideoEncoderConfigurationResponse has binding name '_trt__RemoveVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (98)
#endif

/* _trt__RemoveVideoEncoderConfiguration has binding name '_trt__RemoveVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (97)
#endif

/* _trt__AddVideoEncoderConfigurationResponse has binding name '_trt__AddVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (96)
#endif

/* _trt__AddVideoEncoderConfiguration has binding name '_trt__AddVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (95)
#endif

/* _trt__GetProfilesResponse has binding name '_trt__GetProfilesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (94)
#endif

/* _trt__GetProfiles has binding name '_trt__GetProfiles' for type '' */
#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (93)
#endif

/* _trt__GetProfileResponse has binding name '_trt__GetProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (92)
#endif

/* _trt__GetProfile has binding name '_trt__GetProfile' for type '' */
#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (91)
#endif

/* _trt__CreateProfileResponse has binding name '_trt__CreateProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (90)
#endif

/* _trt__CreateProfile has binding name '_trt__CreateProfile' for type '' */
#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (89)
#endif

/* _trt__GetAudioOutputsResponse has binding name '_trt__GetAudioOutputsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (88)
#endif

/* _trt__GetAudioOutputs has binding name '_trt__GetAudioOutputs' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (87)
#endif

/* _trt__GetAudioSourcesResponse has binding name '_trt__GetAudioSourcesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (86)
#endif

/* _trt__GetAudioSources has binding name '_trt__GetAudioSources' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (85)
#endif

/* _trt__GetVideoSourcesResponse has binding name '_trt__GetVideoSourcesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (84)
#endif

/* _trt__GetVideoSources has binding name '_trt__GetVideoSources' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (83)
#endif

/* _trt__GetServiceCapabilitiesResponse has binding name '_trt__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (82)
#endif

/* _trt__GetServiceCapabilities has binding name '_trt__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (81)
#endif

/* trt__VideoSourceModeExtension has binding name 'trt__VideoSourceModeExtension' for type 'trt:VideoSourceModeExtension' */
#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (80)
#endif

/* trt__VideoSourceMode has binding name 'trt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (79)
#endif

/* trt__StreamingCapabilities has binding name 'trt__StreamingCapabilities' for type 'trt:StreamingCapabilities' */
#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (78)
#endif

/* trt__ProfileCapabilities has binding name 'trt__ProfileCapabilities' for type 'trt:ProfileCapabilities' */
#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (77)
#endif

/* trt__Capabilities has binding name 'trt__Capabilities' for type 'trt:Capabilities' */
#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (76)
#endif

/* _xml__lang has binding name '_xml__lang' for type '' */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (75)
#endif

/* xsd__token has binding name 'xsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (74)
#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (73)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (72)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (71)
#endif

/* xsd__anySimpleType has binding name 'xsd__anySimpleType' for type 'xsd:anySimpleType' */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (70)
#endif

/* xsd__NCName has binding name 'xsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (69)
#endif

/* xsd__hexBinary has binding name 'xsd__hexBinary' for type 'xsd:hexBinary' */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (68)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (63)
#endif

/* xsd__QName has binding name 'xsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (62)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (61)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (57)
#endif

/* _wsnt__ProducerReference has binding name '_wsnt__ProducerReference' for type '' */
#ifndef SOAP_TYPE__wsnt__ProducerReference
#define SOAP_TYPE__wsnt__ProducerReference (1429)
#endif

/* _wsnt__SubscriptionReference has binding name '_wsnt__SubscriptionReference' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionReference
#define SOAP_TYPE__wsnt__SubscriptionReference (1427)
#endif

/* _wsnt__ConsumerReference has binding name '_wsnt__ConsumerReference' for type '' */
#ifndef SOAP_TYPE__wsnt__ConsumerReference
#define SOAP_TYPE__wsnt__ConsumerReference (1423)
#endif

/* struct SOAP_ENV__Envelope has binding name 'SOAP_ENV__Envelope' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (59)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
#endif

/* struct chan__ChannelInstanceType has binding name 'chan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
#endif

/* _wsa5__ProblemAction has binding name '_wsa5__ProblemAction' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
#endif

/* _wsa5__FaultTo has binding name '_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
#endif

/* _wsa5__From has binding name '_wsa5__From' for type '' */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
#endif

/* _wsa5__ReplyTo has binding name '_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
#endif

/* _wsa5__RelatesTo has binding name '_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
#endif

/* _wsa5__Metadata has binding name '_wsa5__Metadata' for type '' */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
#endif

/* _wsa5__ReferenceParameters has binding name '_wsa5__ReferenceParameters' for type '' */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
#endif

/* _wsa5__EndpointReference has binding name '_wsa5__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
#endif

/* struct wsa5__ProblemActionType has binding name 'wsa5__ProblemActionType' for type 'wsa5:ProblemActionType' */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
#endif

/* struct wsa5__RelatesToType has binding name 'wsa5__RelatesToType' for type 'wsa5:RelatesToType' */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
#endif

/* struct wsa5__MetadataType has binding name 'wsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
#endif

/* struct wsa5__ReferenceParametersType has binding name 'wsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
#endif

/* struct wsa5__EndpointReferenceType has binding name 'wsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
#endif

/* struct _xop__Include has binding name '_xop__Include' for type '' */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
#endif

/* _trt__DeleteOSD * has binding name 'PointerTo_trt__DeleteOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__DeleteOSD
#define SOAP_TYPE_PointerTo_trt__DeleteOSD (1772)
#endif

/* _trt__CreateOSD * has binding name 'PointerTo_trt__CreateOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__CreateOSD
#define SOAP_TYPE_PointerTo_trt__CreateOSD (1768)
#endif

/* _trt__SetOSD * has binding name 'PointerTo_trt__SetOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetOSD
#define SOAP_TYPE_PointerTo_trt__SetOSD (1764)
#endif

/* _trt__GetOSDOptions * has binding name 'PointerTo_trt__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSDOptions
#define SOAP_TYPE_PointerTo_trt__GetOSDOptions (1760)
#endif

/* _trt__GetOSD * has binding name 'PointerTo_trt__GetOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSD
#define SOAP_TYPE_PointerTo_trt__GetOSD (1756)
#endif

/* _trt__GetOSDs * has binding name 'PointerTo_trt__GetOSDs' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSDs
#define SOAP_TYPE_PointerTo_trt__GetOSDs (1752)
#endif

/* _trt__SetVideoSourceMode * has binding name 'PointerTo_trt__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceMode
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceMode (1748)
#endif

/* _trt__GetVideoSourceModes * has binding name 'PointerTo_trt__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceModes
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceModes (1744)
#endif

/* _trt__GetSnapshotUri * has binding name 'PointerTo_trt__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetSnapshotUri
#define SOAP_TYPE_PointerTo_trt__GetSnapshotUri (1740)
#endif

/* _trt__SetSynchronizationPoint * has binding name 'PointerTo_trt__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint (1736)
#endif

/* _trt__StopMulticastStreaming * has binding name 'PointerTo_trt__StopMulticastStreaming' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__StopMulticastStreaming
#define SOAP_TYPE_PointerTo_trt__StopMulticastStreaming (1732)
#endif

/* _trt__StartMulticastStreaming * has binding name 'PointerTo_trt__StartMulticastStreaming' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__StartMulticastStreaming
#define SOAP_TYPE_PointerTo_trt__StartMulticastStreaming (1728)
#endif

/* _trt__GetStreamUri * has binding name 'PointerTo_trt__GetStreamUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetStreamUri
#define SOAP_TYPE_PointerTo_trt__GetStreamUri (1724)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstances * has binding name 'PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances (1720)
#endif

/* _trt__GetAudioDecoderConfigurationOptions * has binding name 'PointerTo_trt__GetAudioDecoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions (1716)
#endif

/* _trt__GetAudioOutputConfigurationOptions * has binding name 'PointerTo_trt__GetAudioOutputConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions (1712)
#endif

/* _trt__GetMetadataConfigurationOptions * has binding name 'PointerTo_trt__GetMetadataConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions (1708)
#endif

/* _trt__GetAudioEncoderConfigurationOptions * has binding name 'PointerTo_trt__GetAudioEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions (1704)
#endif

/* _trt__GetAudioSourceConfigurationOptions * has binding name 'PointerTo_trt__GetAudioSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions (1700)
#endif

/* _trt__GetVideoEncoderConfigurationOptions * has binding name 'PointerTo_trt__GetVideoEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions (1696)
#endif

/* _trt__GetVideoSourceConfigurationOptions * has binding name 'PointerTo_trt__GetVideoSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions (1692)
#endif

/* _trt__SetAudioDecoderConfiguration * has binding name 'PointerTo_trt__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration (1688)
#endif

/* _trt__SetAudioOutputConfiguration * has binding name 'PointerTo_trt__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration (1684)
#endif

/* _trt__SetMetadataConfiguration * has binding name 'PointerTo_trt__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration (1680)
#endif

/* _trt__SetVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__SetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration (1676)
#endif

/* _trt__SetAudioEncoderConfiguration * has binding name 'PointerTo_trt__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration (1672)
#endif

/* _trt__SetAudioSourceConfiguration * has binding name 'PointerTo_trt__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration (1668)
#endif

/* _trt__SetVideoEncoderConfiguration * has binding name 'PointerTo_trt__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration (1664)
#endif

/* _trt__SetVideoSourceConfiguration * has binding name 'PointerTo_trt__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration (1660)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations (1656)
#endif

/* _trt__GetCompatibleAudioOutputConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations (1652)
#endif

/* _trt__GetCompatibleMetadataConfigurations * has binding name 'PointerTo_trt__GetCompatibleMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations (1648)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations (1644)
#endif

/* _trt__GetCompatibleAudioSourceConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations (1640)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations (1636)
#endif

/* _trt__GetCompatibleVideoSourceConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations (1632)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations (1628)
#endif

/* _trt__GetAudioDecoderConfiguration * has binding name 'PointerTo_trt__GetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration (1624)
#endif

/* _trt__GetAudioOutputConfiguration * has binding name 'PointerTo_trt__GetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration (1620)
#endif

/* _trt__GetMetadataConfiguration * has binding name 'PointerTo_trt__GetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration (1616)
#endif

/* _trt__GetVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__GetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration (1612)
#endif

/* _trt__GetAudioEncoderConfiguration * has binding name 'PointerTo_trt__GetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration (1608)
#endif

/* _trt__GetAudioSourceConfiguration * has binding name 'PointerTo_trt__GetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration (1604)
#endif

/* _trt__GetVideoEncoderConfiguration * has binding name 'PointerTo_trt__GetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration (1600)
#endif

/* _trt__GetVideoSourceConfiguration * has binding name 'PointerTo_trt__GetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration (1596)
#endif

/* _trt__GetAudioDecoderConfigurations * has binding name 'PointerTo_trt__GetAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations (1592)
#endif

/* _trt__GetAudioOutputConfigurations * has binding name 'PointerTo_trt__GetAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations (1588)
#endif

/* _trt__GetMetadataConfigurations * has binding name 'PointerTo_trt__GetMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations (1584)
#endif

/* _trt__GetVideoAnalyticsConfigurations * has binding name 'PointerTo_trt__GetVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations (1580)
#endif

/* _trt__GetAudioEncoderConfigurations * has binding name 'PointerTo_trt__GetAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations (1576)
#endif

/* _trt__GetAudioSourceConfigurations * has binding name 'PointerTo_trt__GetAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations (1572)
#endif

/* _trt__GetVideoEncoderConfigurations * has binding name 'PointerTo_trt__GetVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations (1568)
#endif

/* _trt__GetVideoSourceConfigurations * has binding name 'PointerTo_trt__GetVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations (1564)
#endif

/* _trt__DeleteProfile * has binding name 'PointerTo_trt__DeleteProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__DeleteProfile
#define SOAP_TYPE_PointerTo_trt__DeleteProfile (1560)
#endif

/* _trt__RemoveAudioDecoderConfiguration * has binding name 'PointerTo_trt__RemoveAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration (1556)
#endif

/* _trt__RemoveAudioOutputConfiguration * has binding name 'PointerTo_trt__RemoveAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration (1552)
#endif

/* _trt__RemoveMetadataConfiguration * has binding name 'PointerTo_trt__RemoveMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration (1548)
#endif

/* _trt__RemoveVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__RemoveVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration (1544)
#endif

/* _trt__RemovePTZConfiguration * has binding name 'PointerTo_trt__RemovePTZConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration
#define SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration (1540)
#endif

/* _trt__RemoveAudioSourceConfiguration * has binding name 'PointerTo_trt__RemoveAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration (1536)
#endif

/* _trt__RemoveAudioEncoderConfiguration * has binding name 'PointerTo_trt__RemoveAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration (1532)
#endif

/* _trt__RemoveVideoSourceConfiguration * has binding name 'PointerTo_trt__RemoveVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration (1528)
#endif

/* _trt__RemoveVideoEncoderConfiguration * has binding name 'PointerTo_trt__RemoveVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration (1524)
#endif

/* _trt__AddAudioDecoderConfiguration * has binding name 'PointerTo_trt__AddAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration (1520)
#endif

/* _trt__AddAudioOutputConfiguration * has binding name 'PointerTo_trt__AddAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration (1516)
#endif

/* _trt__AddMetadataConfiguration * has binding name 'PointerTo_trt__AddMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration (1512)
#endif

/* _trt__AddVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__AddVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration (1508)
#endif

/* _trt__AddPTZConfiguration * has binding name 'PointerTo_trt__AddPTZConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddPTZConfiguration
#define SOAP_TYPE_PointerTo_trt__AddPTZConfiguration (1504)
#endif

/* _trt__AddAudioSourceConfiguration * has binding name 'PointerTo_trt__AddAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration (1500)
#endif

/* _trt__AddAudioEncoderConfiguration * has binding name 'PointerTo_trt__AddAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration (1496)
#endif

/* _trt__AddVideoSourceConfiguration * has binding name 'PointerTo_trt__AddVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration (1492)
#endif

/* _trt__AddVideoEncoderConfiguration * has binding name 'PointerTo_trt__AddVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration (1488)
#endif

/* _trt__GetProfiles * has binding name 'PointerTo_trt__GetProfiles' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetProfiles
#define SOAP_TYPE_PointerTo_trt__GetProfiles (1484)
#endif

/* _trt__GetProfile * has binding name 'PointerTo_trt__GetProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetProfile
#define SOAP_TYPE_PointerTo_trt__GetProfile (1480)
#endif

/* _trt__CreateProfile * has binding name 'PointerTo_trt__CreateProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__CreateProfile
#define SOAP_TYPE_PointerTo_trt__CreateProfile (1476)
#endif

/* _trt__GetAudioOutputs * has binding name 'PointerTo_trt__GetAudioOutputs' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputs
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputs (1472)
#endif

/* _trt__GetAudioSources * has binding name 'PointerTo_trt__GetAudioSources' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSources
#define SOAP_TYPE_PointerTo_trt__GetAudioSources (1468)
#endif

/* _trt__GetVideoSources * has binding name 'PointerTo_trt__GetVideoSources' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSources
#define SOAP_TYPE_PointerTo_trt__GetVideoSources (1464)
#endif

/* _trt__GetServiceCapabilities * has binding name 'PointerTo_trt__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_trt__GetServiceCapabilities (1460)
#endif

/* std::string * has binding name 'PointerToxsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_PointerToxsd__NCName
#define SOAP_TYPE_PointerToxsd__NCName (1400)
#endif

/* std::string * has binding name 'PointerTowstop__ConcreteTopicExpression' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression (1398)
#endif

/* std::string * has binding name 'PointerToxsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (1397)
#endif

/* wstop__TopicType * has binding name 'PointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicType
#define SOAP_TYPE_PointerTowstop__TopicType (1395)
#endif

/* wstop__QueryExpressionType * has binding name 'PointerTowstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType
#define SOAP_TYPE_PointerTowstop__QueryExpressionType (1394)
#endif

/* tt__OSDConfigurationExtension * has binding name 'PointerTott__OSDConfigurationExtension' for type 'tt:OSDConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationExtension (1391)
#endif

/* tt__OSDImgConfiguration * has binding name 'PointerTott__OSDImgConfiguration' for type 'tt:OSDImgConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDImgConfiguration
#define SOAP_TYPE_PointerTott__OSDImgConfiguration (1390)
#endif

/* tt__OSDTextConfiguration * has binding name 'PointerTott__OSDTextConfiguration' for type 'tt:OSDTextConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDTextConfiguration
#define SOAP_TYPE_PointerTott__OSDTextConfiguration (1389)
#endif

/* tt__OSDPosConfiguration * has binding name 'PointerTott__OSDPosConfiguration' for type 'tt:OSDPosConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDPosConfiguration
#define SOAP_TYPE_PointerTott__OSDPosConfiguration (1388)
#endif

/* tt__OSDReference * has binding name 'PointerTott__OSDReference' for type 'tt:OSDReference' */
#ifndef SOAP_TYPE_PointerTott__OSDReference
#define SOAP_TYPE_PointerTott__OSDReference (1387)
#endif

/* tt__MetadataInput * has binding name 'PointerTott__MetadataInput' for type 'tt:MetadataInput' */
#ifndef SOAP_TYPE_PointerTott__MetadataInput
#define SOAP_TYPE_PointerTott__MetadataInput (1386)
#endif

/* tt__SourceIdentification * has binding name 'PointerTott__SourceIdentification' for type 'tt:SourceIdentification' */
#ifndef SOAP_TYPE_PointerTott__SourceIdentification
#define SOAP_TYPE_PointerTott__SourceIdentification (1385)
#endif

/* tt__AnalyticsDeviceEngineConfiguration * has binding name 'PointerTott__AnalyticsDeviceEngineConfiguration' for type 'tt:AnalyticsDeviceEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration (1384)
#endif

/* tt__PTZConfigurationExtension * has binding name 'PointerTott__PTZConfigurationExtension' for type 'tt:PTZConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension (1383)
#endif

/* tt__ZoomLimits * has binding name 'PointerTott__ZoomLimits' for type 'tt:ZoomLimits' */
#ifndef SOAP_TYPE_PointerTott__ZoomLimits
#define SOAP_TYPE_PointerTott__ZoomLimits (1382)
#endif

/* tt__PanTiltLimits * has binding name 'PointerTott__PanTiltLimits' for type 'tt:PanTiltLimits' */
#ifndef SOAP_TYPE_PointerTott__PanTiltLimits
#define SOAP_TYPE_PointerTott__PanTiltLimits (1381)
#endif

/* tt__PTZNodeExtension * has binding name 'PointerTott__PTZNodeExtension' for type 'tt:PTZNodeExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension
#define SOAP_TYPE_PointerTott__PTZNodeExtension (1380)
#endif

/* tt__DigitalIdleState * has binding name 'PointerTott__DigitalIdleState' for type 'tt:DigitalIdleState' */
#ifndef SOAP_TYPE_PointerTott__DigitalIdleState
#define SOAP_TYPE_PointerTott__DigitalIdleState (1379)
#endif

/* tt__RelayOutputSettings * has binding name 'PointerTott__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings
#define SOAP_TYPE_PointerTott__RelayOutputSettings (1378)
#endif

/* tt__NetworkInterfaceExtension * has binding name 'PointerTott__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension (1377)
#endif

/* tt__IPv6NetworkInterface * has binding name 'PointerTott__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface (1376)
#endif

/* tt__IPv4NetworkInterface * has binding name 'PointerTott__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface (1375)
#endif

/* tt__NetworkInterfaceLink * has binding name 'PointerTott__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink (1374)
#endif

/* tt__NetworkInterfaceInfo * has binding name 'PointerTott__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo (1373)
#endif

/* tt__VideoOutputExtension * has binding name 'PointerTott__VideoOutputExtension' for type 'tt:VideoOutputExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoOutputExtension
#define SOAP_TYPE_PointerTott__VideoOutputExtension (1372)
#endif

/* tt__Layout * has binding name 'PointerTott__Layout' for type 'tt:Layout' */
#ifndef SOAP_TYPE_PointerTott__Layout
#define SOAP_TYPE_PointerTott__Layout (1371)
#endif

/* tt__MetadataConfigurationExtension * has binding name 'PointerTott__MetadataConfigurationExtension' for type 'tt:MetadataConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationExtension (1370)
#endif

/* tt__EventSubscription * has binding name 'PointerTott__EventSubscription' for type 'tt:EventSubscription' */
#ifndef SOAP_TYPE_PointerTott__EventSubscription
#define SOAP_TYPE_PointerTott__EventSubscription (1369)
#endif

/* tt__PTZFilter * has binding name 'PointerTott__PTZFilter' for type 'tt:PTZFilter' */
#ifndef SOAP_TYPE_PointerTott__PTZFilter
#define SOAP_TYPE_PointerTott__PTZFilter (1368)
#endif

/* tt__RuleEngineConfiguration * has binding name 'PointerTott__RuleEngineConfiguration' for type 'tt:RuleEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RuleEngineConfiguration
#define SOAP_TYPE_PointerTott__RuleEngineConfiguration (1367)
#endif

/* tt__AnalyticsEngineConfiguration * has binding name 'PointerTott__AnalyticsEngineConfiguration' for type 'tt:AnalyticsEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration (1366)
#endif

/* tt__VideoRateControl2 * has binding name 'PointerTott__VideoRateControl2' for type 'tt:VideoRateControl2' */
#ifndef SOAP_TYPE_PointerTott__VideoRateControl2
#define SOAP_TYPE_PointerTott__VideoRateControl2 (1365)
#endif

/* tt__MulticastConfiguration * has binding name 'PointerTott__MulticastConfiguration' for type 'tt:MulticastConfiguration' */
#ifndef SOAP_TYPE_PointerTott__MulticastConfiguration
#define SOAP_TYPE_PointerTott__MulticastConfiguration (1364)
#endif

/* tt__H264Configuration * has binding name 'PointerTott__H264Configuration' for type 'tt:H264Configuration' */
#ifndef SOAP_TYPE_PointerTott__H264Configuration
#define SOAP_TYPE_PointerTott__H264Configuration (1363)
#endif

/* tt__Mpeg4Configuration * has binding name 'PointerTott__Mpeg4Configuration' for type 'tt:Mpeg4Configuration' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Configuration
#define SOAP_TYPE_PointerTott__Mpeg4Configuration (1362)
#endif

/* tt__VideoRateControl * has binding name 'PointerTott__VideoRateControl' for type 'tt:VideoRateControl' */
#ifndef SOAP_TYPE_PointerTott__VideoRateControl
#define SOAP_TYPE_PointerTott__VideoRateControl (1361)
#endif

/* tt__VideoSourceConfigurationExtension * has binding name 'PointerTott__VideoSourceConfigurationExtension' for type 'tt:VideoSourceConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension (1360)
#endif

/* tt__IntRectangle * has binding name 'PointerTott__IntRectangle' for type 'tt:IntRectangle' */
#ifndef SOAP_TYPE_PointerTott__IntRectangle
#define SOAP_TYPE_PointerTott__IntRectangle (1359)
#endif

/* tt__VideoSourceExtension * has binding name 'PointerTott__VideoSourceExtension' for type 'tt:VideoSourceExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension
#define SOAP_TYPE_PointerTott__VideoSourceExtension (1358)
#endif

/* tt__ImagingSettings * has binding name 'PointerTott__ImagingSettings' for type 'tt:ImagingSettings' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettings
#define SOAP_TYPE_PointerTott__ImagingSettings (1357)
#endif

/* wstop__Documentation * has binding name 'PointerTowstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_PointerTowstop__Documentation
#define SOAP_TYPE_PointerTowstop__Documentation (1356)
#endif

/* _wsrfbf__BaseFaultType_FaultCause * has binding name 'PointerTo_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause (1355)
#endif

/* std::string * has binding name 'PointerTo_xml__lang' for type '' */
#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (1352)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode * has binding name 'PointerTo_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode (1350)
#endif

/* std::string * has binding name 'PointerToxsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (1348)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy * has binding name 'PointerTo_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy (1347)
#endif

/* std::string * has binding name 'PointerTowsnt__AbsoluteOrRelativeTimeType' for type 'wsnt:AbsoluteOrRelativeTimeType' */
#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType (1345)
#endif

/* wsnt__SubscriptionPolicyType * has binding name 'PointerTowsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType (1343)
#endif

/* wstop__TopicSetType * has binding name 'PointerTowstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicSetType
#define SOAP_TYPE_PointerTowstop__TopicSetType (1342)
#endif

/* wsnt__TopicExpressionType * has binding name 'PointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType (1339)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTowsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType (1338)
#endif

/* tt__PropertyOperation * has binding name 'PointerTott__PropertyOperation' for type 'tt:PropertyOperation' */
#ifndef SOAP_TYPE_PointerTott__PropertyOperation
#define SOAP_TYPE_PointerTott__PropertyOperation (1337)
#endif

/* tt__MessageExtension * has binding name 'PointerTott__MessageExtension' for type 'tt:MessageExtension' */
#ifndef SOAP_TYPE_PointerTott__MessageExtension
#define SOAP_TYPE_PointerTott__MessageExtension (1336)
#endif

/* tt__LocalOrientation * has binding name 'PointerTott__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_PointerTott__LocalOrientation
#define SOAP_TYPE_PointerTott__LocalOrientation (1335)
#endif

/* tt__LocalLocation * has binding name 'PointerTott__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_PointerTott__LocalLocation
#define SOAP_TYPE_PointerTott__LocalLocation (1334)
#endif

/* tt__GeoOrientation * has binding name 'PointerTott__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_PointerTott__GeoOrientation
#define SOAP_TYPE_PointerTott__GeoOrientation (1333)
#endif

/* tt__GeoLocation * has binding name 'PointerTott__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_PointerTott__GeoLocation
#define SOAP_TYPE_PointerTott__GeoLocation (1332)
#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (1331)
#endif

/* tt__TransformationExtension * has binding name 'PointerTott__TransformationExtension' for type 'tt:TransformationExtension' */
#ifndef SOAP_TYPE_PointerTott__TransformationExtension
#define SOAP_TYPE_PointerTott__TransformationExtension (1329)
#endif

/* tt__MoveStatus * has binding name 'PointerTott__MoveStatus' for type 'tt:MoveStatus' */
#ifndef SOAP_TYPE_PointerTott__MoveStatus
#define SOAP_TYPE_PointerTott__MoveStatus (1328)
#endif

/* tt__PTZMoveStatus * has binding name 'PointerTott__PTZMoveStatus' for type 'tt:PTZMoveStatus' */
#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus
#define SOAP_TYPE_PointerTott__PTZMoveStatus (1327)
#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (1326)
#endif

/* tt__StorageReferencePathExtension * has binding name 'PointerTott__StorageReferencePathExtension' for type 'tt:StorageReferencePathExtension' */
#ifndef SOAP_TYPE_PointerTott__StorageReferencePathExtension
#define SOAP_TYPE_PointerTott__StorageReferencePathExtension (1325)
#endif

/* tt__ArrayOfFileProgressExtension * has binding name 'PointerTott__ArrayOfFileProgressExtension' for type 'tt:ArrayOfFileProgressExtension' */
#ifndef SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension
#define SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension (1324)
#endif

/* tt__FileProgress * has binding name 'PointerTott__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_PointerTott__FileProgress
#define SOAP_TYPE_PointerTott__FileProgress (1322)
#endif

/* tt__OSDConfigurationOptionsExtension * has binding name 'PointerTott__OSDConfigurationOptionsExtension' for type 'tt:OSDConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension (1321)
#endif

/* tt__OSDImgOptions * has binding name 'PointerTott__OSDImgOptions' for type 'tt:OSDImgOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDImgOptions
#define SOAP_TYPE_PointerTott__OSDImgOptions (1320)
#endif

/* tt__OSDTextOptions * has binding name 'PointerTott__OSDTextOptions' for type 'tt:OSDTextOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDTextOptions
#define SOAP_TYPE_PointerTott__OSDTextOptions (1319)
#endif

/* tt__MaximumNumberOfOSDs * has binding name 'PointerTott__MaximumNumberOfOSDs' for type 'tt:MaximumNumberOfOSDs' */
#ifndef SOAP_TYPE_PointerTott__MaximumNumberOfOSDs
#define SOAP_TYPE_PointerTott__MaximumNumberOfOSDs (1317)
#endif

/* tt__OSDImgOptionsExtension * has binding name 'PointerTott__OSDImgOptionsExtension' for type 'tt:OSDImgOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDImgOptionsExtension
#define SOAP_TYPE_PointerTott__OSDImgOptionsExtension (1316)
#endif

/* tt__OSDTextOptionsExtension * has binding name 'PointerTott__OSDTextOptionsExtension' for type 'tt:OSDTextOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDTextOptionsExtension
#define SOAP_TYPE_PointerTott__OSDTextOptionsExtension (1315)
#endif

/* tt__OSDColorOptions * has binding name 'PointerTott__OSDColorOptions' for type 'tt:OSDColorOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDColorOptions
#define SOAP_TYPE_PointerTott__OSDColorOptions (1314)
#endif

/* tt__OSDColorOptionsExtension * has binding name 'PointerTott__OSDColorOptionsExtension' for type 'tt:OSDColorOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDColorOptionsExtension
#define SOAP_TYPE_PointerTott__OSDColorOptionsExtension (1313)
#endif

/* tt__ColorOptions * has binding name 'PointerTott__ColorOptions' for type 'tt:ColorOptions' */
#ifndef SOAP_TYPE_PointerTott__ColorOptions
#define SOAP_TYPE_PointerTott__ColorOptions (1312)
#endif

/* std::vector<tt__ColorspaceRange *> * has binding name 'PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange (1310)
#endif

/* tt__ColorspaceRange * has binding name 'PointerTott__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_PointerTott__ColorspaceRange
#define SOAP_TYPE_PointerTott__ColorspaceRange (1308)
#endif

/* std::vector<tt__Color *> * has binding name 'PointerTostd__vectorTemplateOfPointerTott__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color (1307)
#endif

/* tt__OSDImgConfigurationExtension * has binding name 'PointerTott__OSDImgConfigurationExtension' for type 'tt:OSDImgConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDImgConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDImgConfigurationExtension (1305)
#endif

/* tt__OSDTextConfigurationExtension * has binding name 'PointerTott__OSDTextConfigurationExtension' for type 'tt:OSDTextConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDTextConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDTextConfigurationExtension (1304)
#endif

/* tt__OSDColor * has binding name 'PointerTott__OSDColor' for type 'tt:OSDColor' */
#ifndef SOAP_TYPE_PointerTott__OSDColor
#define SOAP_TYPE_PointerTott__OSDColor (1303)
#endif

/* tt__Color * has binding name 'PointerTott__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_PointerTott__Color
#define SOAP_TYPE_PointerTott__Color (1302)
#endif

/* tt__OSDPosConfigurationExtension * has binding name 'PointerTott__OSDPosConfigurationExtension' for type 'tt:OSDPosConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDPosConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDPosConfigurationExtension (1301)
#endif

/* tt__ProfileStatusExtension * has binding name 'PointerTott__ProfileStatusExtension' for type 'tt:ProfileStatusExtension' */
#ifndef SOAP_TYPE_PointerTott__ProfileStatusExtension
#define SOAP_TYPE_PointerTott__ProfileStatusExtension (1300)
#endif

/* tt__ActiveConnection * has binding name 'PointerTott__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_PointerTott__ActiveConnection
#define SOAP_TYPE_PointerTott__ActiveConnection (1298)
#endif

/* tt__AudioClassDescriptorExtension * has binding name 'PointerTott__AudioClassDescriptorExtension' for type 'tt:AudioClassDescriptorExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioClassDescriptorExtension
#define SOAP_TYPE_PointerTott__AudioClassDescriptorExtension (1297)
#endif

/* tt__AudioClassCandidate * has binding name 'PointerTott__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_PointerTott__AudioClassCandidate
#define SOAP_TYPE_PointerTott__AudioClassCandidate (1295)
#endif

/* tt__ActionEngineEventPayloadExtension * has binding name 'PointerTott__ActionEngineEventPayloadExtension' for type 'tt:ActionEngineEventPayloadExtension' */
#ifndef SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension
#define SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension (1294)
#endif

/* struct SOAP_ENV__Fault * has binding name 'PointerToSOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Fault
#define SOAP_TYPE_PointerToSOAP_ENV__Fault (1293)
#endif

/* struct SOAP_ENV__Envelope * has binding name 'PointerToSOAP_ENV__Envelope' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Envelope
#define SOAP_TYPE_PointerToSOAP_ENV__Envelope (1292)
#endif

/* tt__AnalyticsState * has binding name 'PointerTott__AnalyticsState' for type 'tt:AnalyticsState' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsState
#define SOAP_TYPE_PointerTott__AnalyticsState (1291)
#endif

/* tt__MetadataInputExtension * has binding name 'PointerTott__MetadataInputExtension' for type 'tt:MetadataInputExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataInputExtension
#define SOAP_TYPE_PointerTott__MetadataInputExtension (1290)
#endif

/* tt__SourceIdentificationExtension * has binding name 'PointerTott__SourceIdentificationExtension' for type 'tt:SourceIdentificationExtension' */
#ifndef SOAP_TYPE_PointerTott__SourceIdentificationExtension
#define SOAP_TYPE_PointerTott__SourceIdentificationExtension (1289)
#endif

/* tt__AnalyticsEngineInputInfoExtension * has binding name 'PointerTott__AnalyticsEngineInputInfoExtension' for type 'tt:AnalyticsEngineInputInfoExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension (1288)
#endif

/* tt__AnalyticsEngineInputInfo * has binding name 'PointerTott__AnalyticsEngineInputInfo' for type 'tt:AnalyticsEngineInputInfo' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo (1287)
#endif

/* tt__AnalyticsDeviceEngineConfigurationExtension * has binding name 'PointerTott__AnalyticsDeviceEngineConfigurationExtension' for type 'tt:AnalyticsDeviceEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension (1286)
#endif

/* tt__EngineConfiguration * has binding name 'PointerTott__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__EngineConfiguration
#define SOAP_TYPE_PointerTott__EngineConfiguration (1284)
#endif

/* tt__RecordingJobConfiguration * has binding name 'PointerTott__RecordingJobConfiguration' for type 'tt:RecordingJobConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobConfiguration
#define SOAP_TYPE_PointerTott__RecordingJobConfiguration (1283)
#endif

/* tt__RecordingJobStateTrack * has binding name 'PointerTott__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTrack
#define SOAP_TYPE_PointerTott__RecordingJobStateTrack (1281)
#endif

/* tt__RecordingJobStateTracks * has binding name 'PointerTott__RecordingJobStateTracks' for type 'tt:RecordingJobStateTracks' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTracks
#define SOAP_TYPE_PointerTott__RecordingJobStateTracks (1280)
#endif

/* tt__RecordingJobStateInformationExtension * has binding name 'PointerTott__RecordingJobStateInformationExtension' for type 'tt:RecordingJobStateInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension
#define SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension (1279)
#endif

/* tt__RecordingJobStateSource * has binding name 'PointerTott__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateSource
#define SOAP_TYPE_PointerTott__RecordingJobStateSource (1277)
#endif

/* tt__RecordingJobSourceExtension * has binding name 'PointerTott__RecordingJobSourceExtension' for type 'tt:RecordingJobSourceExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobSourceExtension
#define SOAP_TYPE_PointerTott__RecordingJobSourceExtension (1276)
#endif

/* tt__RecordingJobTrack * has binding name 'PointerTott__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobTrack
#define SOAP_TYPE_PointerTott__RecordingJobTrack (1274)
#endif

/* tt__RecordingJobConfigurationExtension * has binding name 'PointerTott__RecordingJobConfigurationExtension' for type 'tt:RecordingJobConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension
#define SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension (1273)
#endif

/* tt__RecordingJobSource * has binding name 'PointerTott__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobSource
#define SOAP_TYPE_PointerTott__RecordingJobSource (1271)
#endif

/* tt__TrackConfiguration * has binding name 'PointerTott__TrackConfiguration' for type 'tt:TrackConfiguration' */
#ifndef SOAP_TYPE_PointerTott__TrackConfiguration
#define SOAP_TYPE_PointerTott__TrackConfiguration (1270)
#endif

/* tt__GetTracksResponseItem * has binding name 'PointerTott__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_PointerTott__GetTracksResponseItem
#define SOAP_TYPE_PointerTott__GetTracksResponseItem (1268)
#endif

/* tt__GetTracksResponseList * has binding name 'PointerTott__GetTracksResponseList' for type 'tt:GetTracksResponseList' */
#ifndef SOAP_TYPE_PointerTott__GetTracksResponseList
#define SOAP_TYPE_PointerTott__GetTracksResponseList (1267)
#endif

/* tt__RecordingConfiguration * has binding name 'PointerTott__RecordingConfiguration' for type 'tt:RecordingConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RecordingConfiguration
#define SOAP_TYPE_PointerTott__RecordingConfiguration (1266)
#endif

/* tt__TrackAttributesExtension * has binding name 'PointerTott__TrackAttributesExtension' for type 'tt:TrackAttributesExtension' */
#ifndef SOAP_TYPE_PointerTott__TrackAttributesExtension
#define SOAP_TYPE_PointerTott__TrackAttributesExtension (1265)
#endif

/* tt__MetadataAttributes * has binding name 'PointerTott__MetadataAttributes' for type 'tt:MetadataAttributes' */
#ifndef SOAP_TYPE_PointerTott__MetadataAttributes
#define SOAP_TYPE_PointerTott__MetadataAttributes (1264)
#endif

/* tt__AudioAttributes * has binding name 'PointerTott__AudioAttributes' for type 'tt:AudioAttributes' */
#ifndef SOAP_TYPE_PointerTott__AudioAttributes
#define SOAP_TYPE_PointerTott__AudioAttributes (1263)
#endif

/* tt__VideoAttributes * has binding name 'PointerTott__VideoAttributes' for type 'tt:VideoAttributes' */
#ifndef SOAP_TYPE_PointerTott__VideoAttributes
#define SOAP_TYPE_PointerTott__VideoAttributes (1262)
#endif

/* tt__TrackAttributes * has binding name 'PointerTott__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_PointerTott__TrackAttributes
#define SOAP_TYPE_PointerTott__TrackAttributes (1260)
#endif

/* tt__TrackInformation * has binding name 'PointerTott__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_PointerTott__TrackInformation
#define SOAP_TYPE_PointerTott__TrackInformation (1258)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (1257)
#endif

/* tt__RecordingSourceInformation * has binding name 'PointerTott__RecordingSourceInformation' for type 'tt:RecordingSourceInformation' */
#ifndef SOAP_TYPE_PointerTott__RecordingSourceInformation
#define SOAP_TYPE_PointerTott__RecordingSourceInformation (1256)
#endif

/* tt__FindMetadataResult * has binding name 'PointerTott__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_PointerTott__FindMetadataResult
#define SOAP_TYPE_PointerTott__FindMetadataResult (1254)
#endif

/* tt__FindPTZPositionResult * has binding name 'PointerTott__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_PointerTott__FindPTZPositionResult
#define SOAP_TYPE_PointerTott__FindPTZPositionResult (1252)
#endif

/* wsnt__NotificationMessageHolderType * has binding name 'PointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType (1251)
#endif

/* tt__FindEventResult * has binding name 'PointerTott__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_PointerTott__FindEventResult
#define SOAP_TYPE_PointerTott__FindEventResult (1249)
#endif

/* tt__RecordingInformation * has binding name 'PointerTott__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_PointerTott__RecordingInformation
#define SOAP_TYPE_PointerTott__RecordingInformation (1247)
#endif

/* tt__SearchScopeExtension * has binding name 'PointerTott__SearchScopeExtension' for type 'tt:SearchScopeExtension' */
#ifndef SOAP_TYPE_PointerTott__SearchScopeExtension
#define SOAP_TYPE_PointerTott__SearchScopeExtension (1246)
#endif

/* std::string * has binding name 'PointerTott__XPathExpression' for type 'tt:XPathExpression' */
#ifndef SOAP_TYPE_PointerTott__XPathExpression
#define SOAP_TYPE_PointerTott__XPathExpression (1245)
#endif

/* tt__SourceReference * has binding name 'PointerTott__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_PointerTott__SourceReference
#define SOAP_TYPE_PointerTott__SourceReference (1242)
#endif

/* tt__ReceiverConfiguration * has binding name 'PointerTott__ReceiverConfiguration' for type 'tt:ReceiverConfiguration' */
#ifndef SOAP_TYPE_PointerTott__ReceiverConfiguration
#define SOAP_TYPE_PointerTott__ReceiverConfiguration (1240)
#endif

/* tt__PaneOptionExtension * has binding name 'PointerTott__PaneOptionExtension' for type 'tt:PaneOptionExtension' */
#ifndef SOAP_TYPE_PointerTott__PaneOptionExtension
#define SOAP_TYPE_PointerTott__PaneOptionExtension (1239)
#endif

/* tt__LayoutOptionsExtension * has binding name 'PointerTott__LayoutOptionsExtension' for type 'tt:LayoutOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__LayoutOptionsExtension
#define SOAP_TYPE_PointerTott__LayoutOptionsExtension (1237)
#endif

/* tt__PaneLayoutOptions * has binding name 'PointerTott__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_PointerTott__PaneLayoutOptions
#define SOAP_TYPE_PointerTott__PaneLayoutOptions (1235)
#endif

/* tt__VideoDecoderConfigurationOptions * has binding name 'PointerTott__VideoDecoderConfigurationOptions' for type 'tt:VideoDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions (1234)
#endif

/* tt__LayoutExtension * has binding name 'PointerTott__LayoutExtension' for type 'tt:LayoutExtension' */
#ifndef SOAP_TYPE_PointerTott__LayoutExtension
#define SOAP_TYPE_PointerTott__LayoutExtension (1233)
#endif

/* tt__PaneLayout * has binding name 'PointerTott__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_PointerTott__PaneLayout
#define SOAP_TYPE_PointerTott__PaneLayout (1231)
#endif

/* tt__Transformation * has binding name 'PointerTott__Transformation' for type 'tt:Transformation' */
#ifndef SOAP_TYPE_PointerTott__Transformation
#define SOAP_TYPE_PointerTott__Transformation (1230)
#endif

/* tt__MotionExpression * has binding name 'PointerTott__MotionExpression' for type 'tt:MotionExpression' */
#ifndef SOAP_TYPE_PointerTott__MotionExpression
#define SOAP_TYPE_PointerTott__MotionExpression (1229)
#endif

/* tt__PolylineArray * has binding name 'PointerTott__PolylineArray' for type 'tt:PolylineArray' */
#ifndef SOAP_TYPE_PointerTott__PolylineArray
#define SOAP_TYPE_PointerTott__PolylineArray (1228)
#endif

/* tt__PolylineArrayExtension * has binding name 'PointerTott__PolylineArrayExtension' for type 'tt:PolylineArrayExtension' */
#ifndef SOAP_TYPE_PointerTott__PolylineArrayExtension
#define SOAP_TYPE_PointerTott__PolylineArrayExtension (1227)
#endif

/* tt__Polyline * has binding name 'PointerTott__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_PointerTott__Polyline
#define SOAP_TYPE_PointerTott__Polyline (1225)
#endif

/* tt__Polygon * has binding name 'PointerTott__Polygon' for type 'tt:Polygon' */
#ifndef SOAP_TYPE_PointerTott__Polygon
#define SOAP_TYPE_PointerTott__Polygon (1224)
#endif

/* tt__SupportedAnalyticsModulesExtension * has binding name 'PointerTott__SupportedAnalyticsModulesExtension' for type 'tt:SupportedAnalyticsModulesExtension' */
#ifndef SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension (1223)
#endif

/* tt__SupportedRulesExtension * has binding name 'PointerTott__SupportedRulesExtension' for type 'tt:SupportedRulesExtension' */
#ifndef SOAP_TYPE_PointerTott__SupportedRulesExtension
#define SOAP_TYPE_PointerTott__SupportedRulesExtension (1222)
#endif

/* tt__ConfigDescription * has binding name 'PointerTott__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_PointerTott__ConfigDescription
#define SOAP_TYPE_PointerTott__ConfigDescription (1220)
#endif

/* std::string * has binding name 'PointerToxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (1219)
#endif

/* tt__ConfigDescriptionExtension * has binding name 'PointerTott__ConfigDescriptionExtension' for type 'tt:ConfigDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__ConfigDescriptionExtension
#define SOAP_TYPE_PointerTott__ConfigDescriptionExtension (1218)
#endif

/* tt__ItemList * has binding name 'PointerTott__ItemList' for type 'tt:ItemList' */
#ifndef SOAP_TYPE_PointerTott__ItemList
#define SOAP_TYPE_PointerTott__ItemList (1215)
#endif

/* tt__RuleEngineConfigurationExtension * has binding name 'PointerTott__RuleEngineConfigurationExtension' for type 'tt:RuleEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension (1214)
#endif

/* tt__AnalyticsEngineConfigurationExtension * has binding name 'PointerTott__AnalyticsEngineConfigurationExtension' for type 'tt:AnalyticsEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension (1213)
#endif

/* tt__Config * has binding name 'PointerTott__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_PointerTott__Config
#define SOAP_TYPE_PointerTott__Config (1211)
#endif

/* tt__Vector * has binding name 'PointerTott__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_PointerTott__Vector
#define SOAP_TYPE_PointerTott__Vector (1209)
#endif

/* tt__ItemListDescriptionExtension * has binding name 'PointerTott__ItemListDescriptionExtension' for type 'tt:ItemListDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__ItemListDescriptionExtension
#define SOAP_TYPE_PointerTott__ItemListDescriptionExtension (1208)
#endif

/* tt__MessageDescriptionExtension * has binding name 'PointerTott__MessageDescriptionExtension' for type 'tt:MessageDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__MessageDescriptionExtension
#define SOAP_TYPE_PointerTott__MessageDescriptionExtension (1203)
#endif

/* tt__ItemListDescription * has binding name 'PointerTott__ItemListDescription' for type 'tt:ItemListDescription' */
#ifndef SOAP_TYPE_PointerTott__ItemListDescription
#define SOAP_TYPE_PointerTott__ItemListDescription (1202)
#endif

/* tt__ItemListExtension * has binding name 'PointerTott__ItemListExtension' for type 'tt:ItemListExtension' */
#ifndef SOAP_TYPE_PointerTott__ItemListExtension
#define SOAP_TYPE_PointerTott__ItemListExtension (1201)
#endif

/* tt__FocusOptions20Extension * has binding name 'PointerTott__FocusOptions20Extension' for type 'tt:FocusOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions20Extension
#define SOAP_TYPE_PointerTott__FocusOptions20Extension (1196)
#endif

/* tt__WhiteBalanceOptions20Extension * has binding name 'PointerTott__WhiteBalanceOptions20Extension' for type 'tt:WhiteBalanceOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension (1195)
#endif

/* tt__FocusConfiguration20Extension * has binding name 'PointerTott__FocusConfiguration20Extension' for type 'tt:FocusConfiguration20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20Extension
#define SOAP_TYPE_PointerTott__FocusConfiguration20Extension (1194)
#endif

/* tt__WhiteBalance20Extension * has binding name 'PointerTott__WhiteBalance20Extension' for type 'tt:WhiteBalance20Extension' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance20Extension
#define SOAP_TYPE_PointerTott__WhiteBalance20Extension (1193)
#endif

/* tt__RelativeFocusOptions20 * has binding name 'PointerTott__RelativeFocusOptions20' for type 'tt:RelativeFocusOptions20' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions20
#define SOAP_TYPE_PointerTott__RelativeFocusOptions20 (1192)
#endif

/* tt__IrCutFilterAutoAdjustmentOptionsExtension * has binding name 'PointerTott__IrCutFilterAutoAdjustmentOptionsExtension' for type 'tt:IrCutFilterAutoAdjustmentOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension (1190)
#endif

/* tt__ImageStabilizationOptionsExtension * has binding name 'PointerTott__ImageStabilizationOptionsExtension' for type 'tt:ImageStabilizationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension (1189)
#endif

/* tt__ImagingOptions20Extension4 * has binding name 'PointerTott__ImagingOptions20Extension4' for type 'tt:ImagingOptions20Extension4' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension4
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension4 (1187)
#endif

/* tt__NoiseReductionOptions * has binding name 'PointerTott__NoiseReductionOptions' for type 'tt:NoiseReductionOptions' */
#ifndef SOAP_TYPE_PointerTott__NoiseReductionOptions
#define SOAP_TYPE_PointerTott__NoiseReductionOptions (1186)
#endif

/* tt__DefoggingOptions * has binding name 'PointerTott__DefoggingOptions' for type 'tt:DefoggingOptions' */
#ifndef SOAP_TYPE_PointerTott__DefoggingOptions
#define SOAP_TYPE_PointerTott__DefoggingOptions (1185)
#endif

/* tt__ToneCompensationOptions * has binding name 'PointerTott__ToneCompensationOptions' for type 'tt:ToneCompensationOptions' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensationOptions
#define SOAP_TYPE_PointerTott__ToneCompensationOptions (1184)
#endif

/* tt__ImagingOptions20Extension3 * has binding name 'PointerTott__ImagingOptions20Extension3' for type 'tt:ImagingOptions20Extension3' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension3
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension3 (1183)
#endif

/* tt__IrCutFilterAutoAdjustmentOptions * has binding name 'PointerTott__IrCutFilterAutoAdjustmentOptions' for type 'tt:IrCutFilterAutoAdjustmentOptions' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions (1182)
#endif

/* tt__ImagingOptions20Extension2 * has binding name 'PointerTott__ImagingOptions20Extension2' for type 'tt:ImagingOptions20Extension2' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension2
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension2 (1181)
#endif

/* tt__ImageStabilizationOptions * has binding name 'PointerTott__ImageStabilizationOptions' for type 'tt:ImageStabilizationOptions' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptions
#define SOAP_TYPE_PointerTott__ImageStabilizationOptions (1180)
#endif

/* tt__ImagingOptions20Extension * has binding name 'PointerTott__ImagingOptions20Extension' for type 'tt:ImagingOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension (1179)
#endif

/* tt__WhiteBalanceOptions20 * has binding name 'PointerTott__WhiteBalanceOptions20' for type 'tt:WhiteBalanceOptions20' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20 (1178)
#endif

/* tt__WideDynamicRangeOptions20 * has binding name 'PointerTott__WideDynamicRangeOptions20' for type 'tt:WideDynamicRangeOptions20' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions20
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions20 (1177)
#endif

/* tt__FocusOptions20 * has binding name 'PointerTott__FocusOptions20' for type 'tt:FocusOptions20' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions20
#define SOAP_TYPE_PointerTott__FocusOptions20 (1176)
#endif

/* tt__ExposureOptions20 * has binding name 'PointerTott__ExposureOptions20' for type 'tt:ExposureOptions20' */
#ifndef SOAP_TYPE_PointerTott__ExposureOptions20
#define SOAP_TYPE_PointerTott__ExposureOptions20 (1175)
#endif

/* tt__BacklightCompensationOptions20 * has binding name 'PointerTott__BacklightCompensationOptions20' for type 'tt:BacklightCompensationOptions20' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions20
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions20 (1174)
#endif

/* tt__DefoggingExtension * has binding name 'PointerTott__DefoggingExtension' for type 'tt:DefoggingExtension' */
#ifndef SOAP_TYPE_PointerTott__DefoggingExtension
#define SOAP_TYPE_PointerTott__DefoggingExtension (1173)
#endif

/* tt__ToneCompensationExtension * has binding name 'PointerTott__ToneCompensationExtension' for type 'tt:ToneCompensationExtension' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensationExtension
#define SOAP_TYPE_PointerTott__ToneCompensationExtension (1172)
#endif

/* tt__ExposurePriority * has binding name 'PointerTott__ExposurePriority' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_PointerTott__ExposurePriority
#define SOAP_TYPE_PointerTott__ExposurePriority (1171)
#endif

/* tt__IrCutFilterAutoAdjustmentExtension * has binding name 'PointerTott__IrCutFilterAutoAdjustmentExtension' for type 'tt:IrCutFilterAutoAdjustmentExtension' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension (1170)
#endif

/* tt__ImageStabilizationExtension * has binding name 'PointerTott__ImageStabilizationExtension' for type 'tt:ImageStabilizationExtension' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationExtension (1169)
#endif

/* tt__ImagingSettingsExtension204 * has binding name 'PointerTott__ImagingSettingsExtension204' for type 'tt:ImagingSettingsExtension204' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension204
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension204 (1168)
#endif

/* tt__NoiseReduction * has binding name 'PointerTott__NoiseReduction' for type 'tt:NoiseReduction' */
#ifndef SOAP_TYPE_PointerTott__NoiseReduction
#define SOAP_TYPE_PointerTott__NoiseReduction (1167)
#endif

/* tt__Defogging * has binding name 'PointerTott__Defogging' for type 'tt:Defogging' */
#ifndef SOAP_TYPE_PointerTott__Defogging
#define SOAP_TYPE_PointerTott__Defogging (1166)
#endif

/* tt__ToneCompensation * has binding name 'PointerTott__ToneCompensation' for type 'tt:ToneCompensation' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensation
#define SOAP_TYPE_PointerTott__ToneCompensation (1165)
#endif

/* tt__ImagingSettingsExtension203 * has binding name 'PointerTott__ImagingSettingsExtension203' for type 'tt:ImagingSettingsExtension203' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension203
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension203 (1164)
#endif

/* tt__IrCutFilterAutoAdjustment * has binding name 'PointerTott__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment (1162)
#endif

/* tt__ImagingSettingsExtension202 * has binding name 'PointerTott__ImagingSettingsExtension202' for type 'tt:ImagingSettingsExtension202' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension202
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension202 (1161)
#endif

/* tt__ImageStabilization * has binding name 'PointerTott__ImageStabilization' for type 'tt:ImageStabilization' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilization
#define SOAP_TYPE_PointerTott__ImageStabilization (1160)
#endif

/* tt__ImagingSettingsExtension20 * has binding name 'PointerTott__ImagingSettingsExtension20' for type 'tt:ImagingSettingsExtension20' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension20
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension20 (1159)
#endif

/* tt__WhiteBalance20 * has binding name 'PointerTott__WhiteBalance20' for type 'tt:WhiteBalance20' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance20
#define SOAP_TYPE_PointerTott__WhiteBalance20 (1158)
#endif

/* tt__WideDynamicRange20 * has binding name 'PointerTott__WideDynamicRange20' for type 'tt:WideDynamicRange20' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRange20
#define SOAP_TYPE_PointerTott__WideDynamicRange20 (1157)
#endif

/* tt__FocusConfiguration20 * has binding name 'PointerTott__FocusConfiguration20' for type 'tt:FocusConfiguration20' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20
#define SOAP_TYPE_PointerTott__FocusConfiguration20 (1156)
#endif

/* tt__Exposure20 * has binding name 'PointerTott__Exposure20' for type 'tt:Exposure20' */
#ifndef SOAP_TYPE_PointerTott__Exposure20
#define SOAP_TYPE_PointerTott__Exposure20 (1155)
#endif

/* tt__BacklightCompensation20 * has binding name 'PointerTott__BacklightCompensation20' for type 'tt:BacklightCompensation20' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensation20
#define SOAP_TYPE_PointerTott__BacklightCompensation20 (1154)
#endif

/* tt__FocusStatus20Extension * has binding name 'PointerTott__FocusStatus20Extension' for type 'tt:FocusStatus20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus20Extension
#define SOAP_TYPE_PointerTott__FocusStatus20Extension (1153)
#endif

/* tt__ImagingStatus20Extension * has binding name 'PointerTott__ImagingStatus20Extension' for type 'tt:ImagingStatus20Extension' */
#ifndef SOAP_TYPE_PointerTott__ImagingStatus20Extension
#define SOAP_TYPE_PointerTott__ImagingStatus20Extension (1152)
#endif

/* tt__FocusStatus20 * has binding name 'PointerTott__FocusStatus20' for type 'tt:FocusStatus20' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus20
#define SOAP_TYPE_PointerTott__FocusStatus20 (1151)
#endif

/* tt__ContinuousFocusOptions * has binding name 'PointerTott__ContinuousFocusOptions' for type 'tt:ContinuousFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__ContinuousFocusOptions
#define SOAP_TYPE_PointerTott__ContinuousFocusOptions (1150)
#endif

/* tt__RelativeFocusOptions * has binding name 'PointerTott__RelativeFocusOptions' for type 'tt:RelativeFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions
#define SOAP_TYPE_PointerTott__RelativeFocusOptions (1149)
#endif

/* tt__AbsoluteFocusOptions * has binding name 'PointerTott__AbsoluteFocusOptions' for type 'tt:AbsoluteFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__AbsoluteFocusOptions
#define SOAP_TYPE_PointerTott__AbsoluteFocusOptions (1148)
#endif

/* tt__ContinuousFocus * has binding name 'PointerTott__ContinuousFocus' for type 'tt:ContinuousFocus' */
#ifndef SOAP_TYPE_PointerTott__ContinuousFocus
#define SOAP_TYPE_PointerTott__ContinuousFocus (1147)
#endif

/* tt__RelativeFocus * has binding name 'PointerTott__RelativeFocus' for type 'tt:RelativeFocus' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocus
#define SOAP_TYPE_PointerTott__RelativeFocus (1146)
#endif

/* tt__AbsoluteFocus * has binding name 'PointerTott__AbsoluteFocus' for type 'tt:AbsoluteFocus' */
#ifndef SOAP_TYPE_PointerTott__AbsoluteFocus
#define SOAP_TYPE_PointerTott__AbsoluteFocus (1145)
#endif

/* tt__WhiteBalanceOptions * has binding name 'PointerTott__WhiteBalanceOptions' for type 'tt:WhiteBalanceOptions' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions (1139)
#endif

/* tt__WideDynamicRangeOptions * has binding name 'PointerTott__WideDynamicRangeOptions' for type 'tt:WideDynamicRangeOptions' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions (1138)
#endif

/* tt__FocusOptions * has binding name 'PointerTott__FocusOptions' for type 'tt:FocusOptions' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions
#define SOAP_TYPE_PointerTott__FocusOptions (1136)
#endif

/* tt__ExposureOptions * has binding name 'PointerTott__ExposureOptions' for type 'tt:ExposureOptions' */
#ifndef SOAP_TYPE_PointerTott__ExposureOptions
#define SOAP_TYPE_PointerTott__ExposureOptions (1135)
#endif

/* tt__BacklightCompensationOptions * has binding name 'PointerTott__BacklightCompensationOptions' for type 'tt:BacklightCompensationOptions' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions (1134)
#endif

/* tt__Rectangle * has binding name 'PointerTott__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_PointerTott__Rectangle
#define SOAP_TYPE_PointerTott__Rectangle (1133)
#endif

/* tt__ImagingSettingsExtension * has binding name 'PointerTott__ImagingSettingsExtension' for type 'tt:ImagingSettingsExtension' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension (1132)
#endif

/* tt__WhiteBalance * has binding name 'PointerTott__WhiteBalance' for type 'tt:WhiteBalance' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance
#define SOAP_TYPE_PointerTott__WhiteBalance (1131)
#endif

/* tt__WideDynamicRange * has binding name 'PointerTott__WideDynamicRange' for type 'tt:WideDynamicRange' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRange
#define SOAP_TYPE_PointerTott__WideDynamicRange (1130)
#endif

/* tt__IrCutFilterMode * has binding name 'PointerTott__IrCutFilterMode' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterMode
#define SOAP_TYPE_PointerTott__IrCutFilterMode (1129)
#endif

/* tt__FocusConfiguration * has binding name 'PointerTott__FocusConfiguration' for type 'tt:FocusConfiguration' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration
#define SOAP_TYPE_PointerTott__FocusConfiguration (1128)
#endif

/* tt__Exposure * has binding name 'PointerTott__Exposure' for type 'tt:Exposure' */
#ifndef SOAP_TYPE_PointerTott__Exposure
#define SOAP_TYPE_PointerTott__Exposure (1127)
#endif

/* tt__BacklightCompensation * has binding name 'PointerTott__BacklightCompensation' for type 'tt:BacklightCompensation' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensation
#define SOAP_TYPE_PointerTott__BacklightCompensation (1126)
#endif

/* tt__FocusStatus * has binding name 'PointerTott__FocusStatus' for type 'tt:FocusStatus' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus
#define SOAP_TYPE_PointerTott__FocusStatus (1125)
#endif

/* tt__PTZPresetTourStartingConditionOptionsExtension * has binding name 'PointerTott__PTZPresetTourStartingConditionOptionsExtension' for type 'tt:PTZPresetTourStartingConditionOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension (1124)
#endif

/* tt__PTZPresetTourPresetDetailOptionsExtension * has binding name 'PointerTott__PTZPresetTourPresetDetailOptionsExtension' for type 'tt:PTZPresetTourPresetDetailOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension (1122)
#endif

/* tt__PTZPresetTourPresetDetailOptions * has binding name 'PointerTott__PTZPresetTourPresetDetailOptions' for type 'tt:PTZPresetTourPresetDetailOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions (1121)
#endif

/* tt__PTZPresetTourSpotOptions * has binding name 'PointerTott__PTZPresetTourSpotOptions' for type 'tt:PTZPresetTourSpotOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions (1120)
#endif

/* tt__PTZPresetTourStartingConditionOptions * has binding name 'PointerTott__PTZPresetTourStartingConditionOptions' for type 'tt:PTZPresetTourStartingConditionOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions (1119)
#endif

/* tt__PTZPresetTourStartingConditionExtension * has binding name 'PointerTott__PTZPresetTourStartingConditionExtension' for type 'tt:PTZPresetTourStartingConditionExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension (1118)
#endif

/* tt__PTZPresetTourDirection * has binding name 'PointerTott__PTZPresetTourDirection' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection (1117)
#endif

/* tt__PTZPresetTourStatusExtension * has binding name 'PointerTott__PTZPresetTourStatusExtension' for type 'tt:PTZPresetTourStatusExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension (1116)
#endif

/* tt__PTZPresetTourTypeExtension * has binding name 'PointerTott__PTZPresetTourTypeExtension' for type 'tt:PTZPresetTourTypeExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension (1114)
#endif

/* tt__PTZPresetTourSpotExtension * has binding name 'PointerTott__PTZPresetTourSpotExtension' for type 'tt:PTZPresetTourSpotExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension (1113)
#endif

/* tt__PTZSpeed * has binding name 'PointerTott__PTZSpeed' for type 'tt:PTZSpeed' */
#ifndef SOAP_TYPE_PointerTott__PTZSpeed
#define SOAP_TYPE_PointerTott__PTZSpeed (1112)
#endif

/* tt__PTZPresetTourPresetDetail * has binding name 'PointerTott__PTZPresetTourPresetDetail' for type 'tt:PTZPresetTourPresetDetail' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail (1111)
#endif

/* tt__PTZPresetTourExtension * has binding name 'PointerTott__PTZPresetTourExtension' for type 'tt:PTZPresetTourExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension (1110)
#endif

/* tt__PTZPresetTourSpot * has binding name 'PointerTott__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot (1108)
#endif

/* tt__PTZPresetTourStartingCondition * has binding name 'PointerTott__PTZPresetTourStartingCondition' for type 'tt:PTZPresetTourStartingCondition' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition (1107)
#endif

/* tt__PTZPresetTourStatus * has binding name 'PointerTott__PTZPresetTourStatus' for type 'tt:PTZPresetTourStatus' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus (1106)
#endif

/* tt__PTZVector * has binding name 'PointerTott__PTZVector' for type 'tt:PTZVector' */
#ifndef SOAP_TYPE_PointerTott__PTZVector
#define SOAP_TYPE_PointerTott__PTZVector (1105)
#endif

/* std::string * has binding name 'PointerTott__Name' for type 'tt:Name' */
#ifndef SOAP_TYPE_PointerTott__Name
#define SOAP_TYPE_PointerTott__Name (1104)
#endif

/* tt__Vector1D * has binding name 'PointerTott__Vector1D' for type 'tt:Vector1D' */
#ifndef SOAP_TYPE_PointerTott__Vector1D
#define SOAP_TYPE_PointerTott__Vector1D (1103)
#endif

/* tt__Vector2D * has binding name 'PointerTott__Vector2D' for type 'tt:Vector2D' */
#ifndef SOAP_TYPE_PointerTott__Vector2D
#define SOAP_TYPE_PointerTott__Vector2D (1102)
#endif

/* tt__PTZSpacesExtension * has binding name 'PointerTott__PTZSpacesExtension' for type 'tt:PTZSpacesExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension
#define SOAP_TYPE_PointerTott__PTZSpacesExtension (1101)
#endif

/* tt__Space1DDescription * has binding name 'PointerTott__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_PointerTott__Space1DDescription
#define SOAP_TYPE_PointerTott__Space1DDescription (1098)
#endif

/* tt__Space2DDescription * has binding name 'PointerTott__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_PointerTott__Space2DDescription
#define SOAP_TYPE_PointerTott__Space2DDescription (1097)
#endif

/* tt__ReverseOptionsExtension * has binding name 'PointerTott__ReverseOptionsExtension' for type 'tt:ReverseOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension (1096)
#endif

/* tt__EFlipOptionsExtension * has binding name 'PointerTott__EFlipOptionsExtension' for type 'tt:EFlipOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension (1094)
#endif

/* tt__PTControlDirectionOptionsExtension * has binding name 'PointerTott__PTControlDirectionOptionsExtension' for type 'tt:PTControlDirectionOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension (1092)
#endif

/* tt__ReverseOptions * has binding name 'PointerTott__ReverseOptions' for type 'tt:ReverseOptions' */
#ifndef SOAP_TYPE_PointerTott__ReverseOptions
#define SOAP_TYPE_PointerTott__ReverseOptions (1091)
#endif

/* tt__EFlipOptions * has binding name 'PointerTott__EFlipOptions' for type 'tt:EFlipOptions' */
#ifndef SOAP_TYPE_PointerTott__EFlipOptions
#define SOAP_TYPE_PointerTott__EFlipOptions (1090)
#endif

/* tt__PTZConfigurationOptions2 * has binding name 'PointerTott__PTZConfigurationOptions2' for type 'tt:PTZConfigurationOptions2' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2 (1089)
#endif

/* tt__PTControlDirectionOptions * has binding name 'PointerTott__PTControlDirectionOptions' for type 'tt:PTControlDirectionOptions' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions (1088)
#endif

/* tt__DurationRange * has binding name 'PointerTott__DurationRange' for type 'tt:DurationRange' */
#ifndef SOAP_TYPE_PointerTott__DurationRange
#define SOAP_TYPE_PointerTott__DurationRange (1087)
#endif

/* tt__PTZSpaces * has binding name 'PointerTott__PTZSpaces' for type 'tt:PTZSpaces' */
#ifndef SOAP_TYPE_PointerTott__PTZSpaces
#define SOAP_TYPE_PointerTott__PTZSpaces (1086)
#endif

/* tt__PTControlDirectionExtension * has binding name 'PointerTott__PTControlDirectionExtension' for type 'tt:PTControlDirectionExtension' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension (1085)
#endif

/* tt__Reverse * has binding name 'PointerTott__Reverse' for type 'tt:Reverse' */
#ifndef SOAP_TYPE_PointerTott__Reverse
#define SOAP_TYPE_PointerTott__Reverse (1084)
#endif

/* tt__EFlip * has binding name 'PointerTott__EFlip' for type 'tt:EFlip' */
#ifndef SOAP_TYPE_PointerTott__EFlip
#define SOAP_TYPE_PointerTott__EFlip (1083)
#endif

/* tt__PTZConfigurationExtension2 * has binding name 'PointerTott__PTZConfigurationExtension2' for type 'tt:PTZConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2 (1082)
#endif

/* tt__PTControlDirection * has binding name 'PointerTott__PTControlDirection' for type 'tt:PTControlDirection' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirection
#define SOAP_TYPE_PointerTott__PTControlDirection (1081)
#endif

/* tt__PTZPresetTourSupportedExtension * has binding name 'PointerTott__PTZPresetTourSupportedExtension' for type 'tt:PTZPresetTourSupportedExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension (1080)
#endif

/* tt__PTZNodeExtension2 * has binding name 'PointerTott__PTZNodeExtension2' for type 'tt:PTZNodeExtension2' */
#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2
#define SOAP_TYPE_PointerTott__PTZNodeExtension2 (1078)
#endif

/* tt__PTZPresetTourSupported * has binding name 'PointerTott__PTZPresetTourSupported' for type 'tt:PTZPresetTourSupported' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported (1077)
#endif

/* tt__EapMethodExtension * has binding name 'PointerTott__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_PointerTott__EapMethodExtension
#define SOAP_TYPE_PointerTott__EapMethodExtension (1076)
#endif

/* tt__TLSConfiguration * has binding name 'PointerTott__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_PointerTott__TLSConfiguration
#define SOAP_TYPE_PointerTott__TLSConfiguration (1075)
#endif

/* tt__Dot1XConfigurationExtension * has binding name 'PointerTott__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension (1074)
#endif

/* tt__EAPMethodConfiguration * has binding name 'PointerTott__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration (1073)
#endif

/* tt__CertificateInformationExtension * has binding name 'PointerTott__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension
#define SOAP_TYPE_PointerTott__CertificateInformationExtension (1072)
#endif

/* tt__DateTimeRange * has binding name 'PointerTott__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_PointerTott__DateTimeRange
#define SOAP_TYPE_PointerTott__DateTimeRange (1071)
#endif

/* tt__CertificateUsage * has binding name 'PointerTott__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_PointerTott__CertificateUsage
#define SOAP_TYPE_PointerTott__CertificateUsage (1070)
#endif

/* tt__BinaryData * has binding name 'PointerTott__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_PointerTott__BinaryData
#define SOAP_TYPE_PointerTott__BinaryData (1069)
#endif

/* tt__CertificateGenerationParametersExtension * has binding name 'PointerTott__CertificateGenerationParametersExtension' for type 'tt:CertificateGenerationParametersExtension' */
#ifndef SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension
#define SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension (1068)
#endif

/* tt__UserExtension * has binding name 'PointerTott__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_PointerTott__UserExtension
#define SOAP_TYPE_PointerTott__UserExtension (1067)
#endif

/* tt__Date * has binding name 'PointerTott__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_PointerTott__Date
#define SOAP_TYPE_PointerTott__Date (1066)
#endif

/* tt__Time * has binding name 'PointerTott__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_PointerTott__Time
#define SOAP_TYPE_PointerTott__Time (1065)
#endif

/* tt__SystemDateTimeExtension * has binding name 'PointerTott__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension (1064)
#endif

/* tt__DateTime * has binding name 'PointerTott__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_PointerTott__DateTime
#define SOAP_TYPE_PointerTott__DateTime (1063)
#endif

/* tt__TimeZone * has binding name 'PointerTott__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_PointerTott__TimeZone
#define SOAP_TYPE_PointerTott__TimeZone (1062)
#endif

/* tt__SystemLogUri * has binding name 'PointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_PointerTott__SystemLogUri
#define SOAP_TYPE_PointerTott__SystemLogUri (1060)
#endif

/* tt__AttachmentData * has binding name 'PointerTott__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_PointerTott__AttachmentData
#define SOAP_TYPE_PointerTott__AttachmentData (1059)
#endif

/* tt__AnalyticsDeviceExtension * has binding name 'PointerTott__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension (1058)
#endif

/* tt__SystemCapabilitiesExtension2 * has binding name 'PointerTott__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2 (1057)
#endif

/* tt__SystemCapabilitiesExtension * has binding name 'PointerTott__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension (1056)
#endif

/* tt__OnvifVersion * has binding name 'PointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_PointerTott__OnvifVersion
#define SOAP_TYPE_PointerTott__OnvifVersion (1054)
#endif

/* tt__SecurityCapabilitiesExtension2 * has binding name 'PointerTott__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2 (1053)
#endif

/* tt__SecurityCapabilitiesExtension * has binding name 'PointerTott__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension (1052)
#endif

/* tt__NetworkCapabilitiesExtension2 * has binding name 'PointerTott__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2 (1051)
#endif

/* tt__NetworkCapabilitiesExtension * has binding name 'PointerTott__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension (1050)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension * has binding name 'PointerTott__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension (1049)
#endif

/* tt__ProfileCapabilities * has binding name 'PointerTott__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities
#define SOAP_TYPE_PointerTott__ProfileCapabilities (1048)
#endif

/* tt__MediaCapabilitiesExtension * has binding name 'PointerTott__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension (1047)
#endif

/* tt__RealTimeStreamingCapabilities * has binding name 'PointerTott__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities (1046)
#endif

/* tt__IOCapabilitiesExtension2 * has binding name 'PointerTott__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2 (1045)
#endif

/* tt__IOCapabilitiesExtension * has binding name 'PointerTott__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension (1043)
#endif

/* tt__DeviceCapabilitiesExtension * has binding name 'PointerTott__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension (1042)
#endif

/* tt__SecurityCapabilities * has binding name 'PointerTott__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities
#define SOAP_TYPE_PointerTott__SecurityCapabilities (1041)
#endif

/* tt__IOCapabilities * has binding name 'PointerTott__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilities
#define SOAP_TYPE_PointerTott__IOCapabilities (1040)
#endif

/* tt__SystemCapabilities * has binding name 'PointerTott__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilities
#define SOAP_TYPE_PointerTott__SystemCapabilities (1039)
#endif

/* tt__NetworkCapabilities * has binding name 'PointerTott__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities
#define SOAP_TYPE_PointerTott__NetworkCapabilities (1038)
#endif

/* tt__CapabilitiesExtension2 * has binding name 'PointerTott__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2 (1037)
#endif

/* tt__AnalyticsDeviceCapabilities * has binding name 'PointerTott__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities (1036)
#endif

/* tt__ReceiverCapabilities * has binding name 'PointerTott__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities
#define SOAP_TYPE_PointerTott__ReceiverCapabilities (1035)
#endif

/* tt__ReplayCapabilities * has binding name 'PointerTott__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities
#define SOAP_TYPE_PointerTott__ReplayCapabilities (1034)
#endif

/* tt__SearchCapabilities * has binding name 'PointerTott__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SearchCapabilities
#define SOAP_TYPE_PointerTott__SearchCapabilities (1033)
#endif

/* tt__RecordingCapabilities * has binding name 'PointerTott__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities
#define SOAP_TYPE_PointerTott__RecordingCapabilities (1032)
#endif

/* tt__DisplayCapabilities * has binding name 'PointerTott__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities
#define SOAP_TYPE_PointerTott__DisplayCapabilities (1031)
#endif

/* tt__DeviceIOCapabilities * has binding name 'PointerTott__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities (1030)
#endif

/* tt__CapabilitiesExtension * has binding name 'PointerTott__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension
#define SOAP_TYPE_PointerTott__CapabilitiesExtension (1029)
#endif

/* tt__PTZCapabilities * has binding name 'PointerTott__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_PointerTott__PTZCapabilities
#define SOAP_TYPE_PointerTott__PTZCapabilities (1028)
#endif

/* tt__MediaCapabilities * has binding name 'PointerTott__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilities
#define SOAP_TYPE_PointerTott__MediaCapabilities (1027)
#endif

/* tt__ImagingCapabilities * has binding name 'PointerTott__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities
#define SOAP_TYPE_PointerTott__ImagingCapabilities (1026)
#endif

/* tt__EventCapabilities * has binding name 'PointerTott__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_PointerTott__EventCapabilities
#define SOAP_TYPE_PointerTott__EventCapabilities (1025)
#endif

/* tt__DeviceCapabilities * has binding name 'PointerTott__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities
#define SOAP_TYPE_PointerTott__DeviceCapabilities (1024)
#endif

/* tt__AnalyticsCapabilities * has binding name 'PointerTott__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities (1023)
#endif

/* tt__Dot11AvailableNetworksExtension * has binding name 'PointerTott__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension (1022)
#endif

/* tt__Dot11SignalStrength * has binding name 'PointerTott__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength
#define SOAP_TYPE_PointerTott__Dot11SignalStrength (1019)
#endif

/* tt__Dot11PSKSetExtension * has binding name 'PointerTott__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension (1018)
#endif

/* std::string * has binding name 'PointerTott__Dot11PSKPassphrase' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKPassphrase
#define SOAP_TYPE_PointerTott__Dot11PSKPassphrase (1017)
#endif

/* xsd__hexBinary * has binding name 'PointerTott__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSK
#define SOAP_TYPE_PointerTott__Dot11PSK (1016)
#endif

/* tt__Dot11SecurityConfigurationExtension * has binding name 'PointerTott__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension (1015)
#endif

/* tt__Dot11PSKSet * has binding name 'PointerTott__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet
#define SOAP_TYPE_PointerTott__Dot11PSKSet (1014)
#endif

/* tt__Dot11Cipher * has binding name 'PointerTott__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_PointerTott__Dot11Cipher
#define SOAP_TYPE_PointerTott__Dot11Cipher (1013)
#endif

/* tt__Dot11SecurityConfiguration * has binding name 'PointerTott__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration (1012)
#endif

/* tt__IPAddressFilterExtension * has binding name 'PointerTott__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension (1011)
#endif

/* tt__NetworkZeroConfigurationExtension2 * has binding name 'PointerTott__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2 (1010)
#endif

/* tt__NetworkZeroConfiguration * has binding name 'PointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration (1008)
#endif

/* tt__NetworkZeroConfigurationExtension * has binding name 'PointerTott__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension (1007)
#endif

/* tt__IPv6DHCPConfiguration * has binding name 'PointerTott__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration (1004)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2 (1003)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension (1002)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration (1001)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration (1000)
#endif

/* tt__DynamicDNSInformationExtension * has binding name 'PointerTott__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension (999)
#endif

/* LONG64 * has binding name 'PointerToxsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_PointerToxsd__duration
#define SOAP_TYPE_PointerToxsd__duration (998)
#endif

/* tt__NTPInformationExtension * has binding name 'PointerTott__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension
#define SOAP_TYPE_PointerTott__NTPInformationExtension (997)
#endif

/* tt__NetworkHost * has binding name 'PointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_PointerTott__NetworkHost
#define SOAP_TYPE_PointerTott__NetworkHost (995)
#endif

/* tt__DNSInformationExtension * has binding name 'PointerTott__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension
#define SOAP_TYPE_PointerTott__DNSInformationExtension (994)
#endif

/* tt__HostnameInformationExtension * has binding name 'PointerTott__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension
#define SOAP_TYPE_PointerTott__HostnameInformationExtension (991)
#endif

/* std::string * has binding name 'PointerToxsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (990)
#endif

/* tt__NetworkHostExtension * has binding name 'PointerTott__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension
#define SOAP_TYPE_PointerTott__NetworkHostExtension (989)
#endif

/* std::string * has binding name 'PointerTott__DNSName' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_PointerTott__DNSName
#define SOAP_TYPE_PointerTott__DNSName (988)
#endif

/* std::string * has binding name 'PointerTott__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_PointerTott__IPv6Address
#define SOAP_TYPE_PointerTott__IPv6Address (987)
#endif

/* std::string * has binding name 'PointerTott__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_PointerTott__IPv4Address
#define SOAP_TYPE_PointerTott__IPv4Address (986)
#endif

/* tt__NetworkProtocolExtension * has binding name 'PointerTott__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension (985)
#endif

/* tt__IPv6ConfigurationExtension * has binding name 'PointerTott__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension (984)
#endif

/* tt__PrefixedIPv6Address * has binding name 'PointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address (982)
#endif

/* tt__PrefixedIPv4Address * has binding name 'PointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address (980)
#endif

/* tt__IPv4Configuration * has binding name 'PointerTott__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv4Configuration
#define SOAP_TYPE_PointerTott__IPv4Configuration (979)
#endif

/* tt__IPv6Configuration * has binding name 'PointerTott__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv6Configuration
#define SOAP_TYPE_PointerTott__IPv6Configuration (978)
#endif

/* tt__NetworkInterfaceConnectionSetting * has binding name 'PointerTott__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting (977)
#endif

/* tt__NetworkInterfaceExtension2 * has binding name 'PointerTott__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2 (976)
#endif

/* tt__Dot11Configuration * has binding name 'PointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot11Configuration
#define SOAP_TYPE_PointerTott__Dot11Configuration (974)
#endif

/* tt__Dot3Configuration * has binding name 'PointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot3Configuration
#define SOAP_TYPE_PointerTott__Dot3Configuration (972)
#endif

/* tt__Transport * has binding name 'PointerTott__Transport' for type 'tt:Transport' */
#ifndef SOAP_TYPE_PointerTott__Transport
#define SOAP_TYPE_PointerTott__Transport (971)
#endif

/* tt__IPAddress * has binding name 'PointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_PointerTott__IPAddress
#define SOAP_TYPE_PointerTott__IPAddress (970)
#endif

/* tt__AudioDecoderConfigurationOptionsExtension * has binding name 'PointerTott__AudioDecoderConfigurationOptionsExtension' for type 'tt:AudioDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension (969)
#endif

/* tt__G726DecOptions * has binding name 'PointerTott__G726DecOptions' for type 'tt:G726DecOptions' */
#ifndef SOAP_TYPE_PointerTott__G726DecOptions
#define SOAP_TYPE_PointerTott__G726DecOptions (968)
#endif

/* tt__G711DecOptions * has binding name 'PointerTott__G711DecOptions' for type 'tt:G711DecOptions' */
#ifndef SOAP_TYPE_PointerTott__G711DecOptions
#define SOAP_TYPE_PointerTott__G711DecOptions (967)
#endif

/* tt__AACDecOptions * has binding name 'PointerTott__AACDecOptions' for type 'tt:AACDecOptions' */
#ifndef SOAP_TYPE_PointerTott__AACDecOptions
#define SOAP_TYPE_PointerTott__AACDecOptions (966)
#endif

/* tt__VideoDecoderConfigurationOptionsExtension * has binding name 'PointerTott__VideoDecoderConfigurationOptionsExtension' for type 'tt:VideoDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension (964)
#endif

/* tt__Mpeg4DecOptions * has binding name 'PointerTott__Mpeg4DecOptions' for type 'tt:Mpeg4DecOptions' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4DecOptions
#define SOAP_TYPE_PointerTott__Mpeg4DecOptions (963)
#endif

/* tt__H264DecOptions * has binding name 'PointerTott__H264DecOptions' for type 'tt:H264DecOptions' */
#ifndef SOAP_TYPE_PointerTott__H264DecOptions
#define SOAP_TYPE_PointerTott__H264DecOptions (962)
#endif

/* tt__JpegDecOptions * has binding name 'PointerTott__JpegDecOptions' for type 'tt:JpegDecOptions' */
#ifndef SOAP_TYPE_PointerTott__JpegDecOptions
#define SOAP_TYPE_PointerTott__JpegDecOptions (961)
#endif

/* tt__PTZStatusFilterOptionsExtension * has binding name 'PointerTott__PTZStatusFilterOptionsExtension' for type 'tt:PTZStatusFilterOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension (960)
#endif

/* tt__MetadataConfigurationOptionsExtension2 * has binding name 'PointerTott__MetadataConfigurationOptionsExtension2' for type 'tt:MetadataConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2 (959)
#endif

/* tt__MetadataConfigurationOptionsExtension * has binding name 'PointerTott__MetadataConfigurationOptionsExtension' for type 'tt:MetadataConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension (957)
#endif

/* tt__PTZStatusFilterOptions * has binding name 'PointerTott__PTZStatusFilterOptions' for type 'tt:PTZStatusFilterOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptions
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptions (956)
#endif

/* _tt__EventSubscription_SubscriptionPolicy * has binding name 'PointerTo_tt__EventSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy (955)
#endif

/* wsnt__FilterType * has binding name 'PointerTowsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_PointerTowsnt__FilterType
#define SOAP_TYPE_PointerTowsnt__FilterType (953)
#endif

/* tt__AudioEncoderConfigurationOption * has binding name 'PointerTott__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption (951)
#endif

/* tt__AudioSourceOptionsExtension * has binding name 'PointerTott__AudioSourceOptionsExtension' for type 'tt:AudioSourceOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceOptionsExtension
#define SOAP_TYPE_PointerTott__AudioSourceOptionsExtension (950)
#endif

/* std::string * has binding name 'PointerTott__StringAttrList' for type 'tt:StringAttrList' */
#ifndef SOAP_TYPE_PointerTott__StringAttrList
#define SOAP_TYPE_PointerTott__StringAttrList (949)
#endif

/* std::string * has binding name 'PointerTott__FloatAttrList' for type 'tt:FloatAttrList' */
#ifndef SOAP_TYPE_PointerTott__FloatAttrList
#define SOAP_TYPE_PointerTott__FloatAttrList (948)
#endif

/* std::string * has binding name 'PointerTott__IntAttrList' for type 'tt:IntAttrList' */
#ifndef SOAP_TYPE_PointerTott__IntAttrList
#define SOAP_TYPE_PointerTott__IntAttrList (947)
#endif

/* tt__VideoResolution2 * has binding name 'PointerTott__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_PointerTott__VideoResolution2
#define SOAP_TYPE_PointerTott__VideoResolution2 (945)
#endif

/* tt__FloatRange * has binding name 'PointerTott__FloatRange' for type 'tt:FloatRange' */
#ifndef SOAP_TYPE_PointerTott__FloatRange
#define SOAP_TYPE_PointerTott__FloatRange (944)
#endif

/* tt__VideoEncoderOptionsExtension2 * has binding name 'PointerTott__VideoEncoderOptionsExtension2' for type 'tt:VideoEncoderOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2 (940)
#endif

/* tt__H264Options2 * has binding name 'PointerTott__H264Options2' for type 'tt:H264Options2' */
#ifndef SOAP_TYPE_PointerTott__H264Options2
#define SOAP_TYPE_PointerTott__H264Options2 (939)
#endif

/* tt__Mpeg4Options2 * has binding name 'PointerTott__Mpeg4Options2' for type 'tt:Mpeg4Options2' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Options2
#define SOAP_TYPE_PointerTott__Mpeg4Options2 (938)
#endif

/* tt__JpegOptions2 * has binding name 'PointerTott__JpegOptions2' for type 'tt:JpegOptions2' */
#ifndef SOAP_TYPE_PointerTott__JpegOptions2
#define SOAP_TYPE_PointerTott__JpegOptions2 (937)
#endif

/* tt__VideoEncoderOptionsExtension * has binding name 'PointerTott__VideoEncoderOptionsExtension' for type 'tt:VideoEncoderOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension (936)
#endif

/* tt__H264Options * has binding name 'PointerTott__H264Options' for type 'tt:H264Options' */
#ifndef SOAP_TYPE_PointerTott__H264Options
#define SOAP_TYPE_PointerTott__H264Options (935)
#endif

/* tt__Mpeg4Options * has binding name 'PointerTott__Mpeg4Options' for type 'tt:Mpeg4Options' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Options
#define SOAP_TYPE_PointerTott__Mpeg4Options (934)
#endif

/* tt__JpegOptions * has binding name 'PointerTott__JpegOptions' for type 'tt:JpegOptions' */
#ifndef SOAP_TYPE_PointerTott__JpegOptions
#define SOAP_TYPE_PointerTott__JpegOptions (933)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (932)
#endif

/* tt__RotateOptionsExtension * has binding name 'PointerTott__RotateOptionsExtension' for type 'tt:RotateOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__RotateOptionsExtension
#define SOAP_TYPE_PointerTott__RotateOptionsExtension (931)
#endif

/* tt__IntList * has binding name 'PointerTott__IntList' for type 'tt:IntList' */
#ifndef SOAP_TYPE_PointerTott__IntList
#define SOAP_TYPE_PointerTott__IntList (930)
#endif

/* tt__VideoSourceConfigurationOptionsExtension2 * has binding name 'PointerTott__VideoSourceConfigurationOptionsExtension2' for type 'tt:VideoSourceConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2 (927)
#endif

/* tt__RotateOptions * has binding name 'PointerTott__RotateOptions' for type 'tt:RotateOptions' */
#ifndef SOAP_TYPE_PointerTott__RotateOptions
#define SOAP_TYPE_PointerTott__RotateOptions (926)
#endif

/* tt__VideoSourceConfigurationOptionsExtension * has binding name 'PointerTott__VideoSourceConfigurationOptionsExtension' for type 'tt:VideoSourceConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension (925)
#endif

/* tt__IntRectangleRange * has binding name 'PointerTott__IntRectangleRange' for type 'tt:IntRectangleRange' */
#ifndef SOAP_TYPE_PointerTott__IntRectangleRange
#define SOAP_TYPE_PointerTott__IntRectangleRange (923)
#endif

/* tt__LensProjection * has binding name 'PointerTott__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_PointerTott__LensProjection
#define SOAP_TYPE_PointerTott__LensProjection (921)
#endif

/* tt__LensOffset * has binding name 'PointerTott__LensOffset' for type 'tt:LensOffset' */
#ifndef SOAP_TYPE_PointerTott__LensOffset
#define SOAP_TYPE_PointerTott__LensOffset (920)
#endif

/* float * has binding name 'PointerTofloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (919)
#endif

/* tt__RotateExtension * has binding name 'PointerTott__RotateExtension' for type 'tt:RotateExtension' */
#ifndef SOAP_TYPE_PointerTott__RotateExtension
#define SOAP_TYPE_PointerTott__RotateExtension (918)
#endif

/* tt__SceneOrientation * has binding name 'PointerTott__SceneOrientation' for type 'tt:SceneOrientation' */
#ifndef SOAP_TYPE_PointerTott__SceneOrientation
#define SOAP_TYPE_PointerTott__SceneOrientation (917)
#endif

/* tt__LensDescription * has binding name 'PointerTott__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_PointerTott__LensDescription
#define SOAP_TYPE_PointerTott__LensDescription (915)
#endif

/* tt__VideoSourceConfigurationExtension2 * has binding name 'PointerTott__VideoSourceConfigurationExtension2' for type 'tt:VideoSourceConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2 (914)
#endif

/* tt__Rotate * has binding name 'PointerTott__Rotate' for type 'tt:Rotate' */
#ifndef SOAP_TYPE_PointerTott__Rotate
#define SOAP_TYPE_PointerTott__Rotate (913)
#endif

/* tt__ProfileExtension2 * has binding name 'PointerTott__ProfileExtension2' for type 'tt:ProfileExtension2' */
#ifndef SOAP_TYPE_PointerTott__ProfileExtension2
#define SOAP_TYPE_PointerTott__ProfileExtension2 (912)
#endif

/* tt__ProfileExtension * has binding name 'PointerTott__ProfileExtension' for type 'tt:ProfileExtension' */
#ifndef SOAP_TYPE_PointerTott__ProfileExtension
#define SOAP_TYPE_PointerTott__ProfileExtension (911)
#endif

/* tt__PTZConfiguration * has binding name 'PointerTott__PTZConfiguration' for type 'tt:PTZConfiguration' */
#ifndef SOAP_TYPE_PointerTott__PTZConfiguration
#define SOAP_TYPE_PointerTott__PTZConfiguration (910)
#endif

/* tt__VideoSourceExtension2 * has binding name 'PointerTott__VideoSourceExtension2' for type 'tt:VideoSourceExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension2
#define SOAP_TYPE_PointerTott__VideoSourceExtension2 (909)
#endif

/* tt__ImagingSettings20 * has binding name 'PointerTott__ImagingSettings20' for type 'tt:ImagingSettings20' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettings20
#define SOAP_TYPE_PointerTott__ImagingSettings20 (908)
#endif

/* tt__IntRange * has binding name 'PointerTott__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_PointerTott__IntRange
#define SOAP_TYPE_PointerTott__IntRange (905)
#endif

/* tt__OSDConfigurationOptions * has binding name 'PointerTott__OSDConfigurationOptions' for type 'tt:OSDConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptions
#define SOAP_TYPE_PointerTott__OSDConfigurationOptions (904)
#endif

/* tt__OSDConfiguration * has binding name 'PointerTott__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDConfiguration
#define SOAP_TYPE_PointerTott__OSDConfiguration (902)
#endif

/* trt__VideoSourceMode * has binding name 'PointerTotrt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_PointerTotrt__VideoSourceMode
#define SOAP_TYPE_PointerTotrt__VideoSourceMode (900)
#endif

/* tt__MediaUri * has binding name 'PointerTott__MediaUri' for type 'tt:MediaUri' */
#ifndef SOAP_TYPE_PointerTott__MediaUri
#define SOAP_TYPE_PointerTott__MediaUri (899)
#endif

/* tt__StreamSetup * has binding name 'PointerTott__StreamSetup' for type 'tt:StreamSetup' */
#ifndef SOAP_TYPE_PointerTott__StreamSetup
#define SOAP_TYPE_PointerTott__StreamSetup (898)
#endif

/* tt__AudioDecoderConfigurationOptions * has binding name 'PointerTott__AudioDecoderConfigurationOptions' for type 'tt:AudioDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions (897)
#endif

/* tt__AudioOutputConfigurationOptions * has binding name 'PointerTott__AudioOutputConfigurationOptions' for type 'tt:AudioOutputConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions (896)
#endif

/* tt__MetadataConfigurationOptions * has binding name 'PointerTott__MetadataConfigurationOptions' for type 'tt:MetadataConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptions
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptions (895)
#endif

/* tt__AudioEncoderConfigurationOptions * has binding name 'PointerTott__AudioEncoderConfigurationOptions' for type 'tt:AudioEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions (894)
#endif

/* tt__AudioSourceConfigurationOptions * has binding name 'PointerTott__AudioSourceConfigurationOptions' for type 'tt:AudioSourceConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions (893)
#endif

/* tt__VideoEncoderConfigurationOptions * has binding name 'PointerTott__VideoEncoderConfigurationOptions' for type 'tt:VideoEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions (892)
#endif

/* tt__VideoSourceConfigurationOptions * has binding name 'PointerTott__VideoSourceConfigurationOptions' for type 'tt:VideoSourceConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions (891)
#endif

/* tt__AudioDecoderConfiguration * has binding name 'PointerTott__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_PointerTott__AudioDecoderConfiguration (889)
#endif

/* tt__AudioOutputConfiguration * has binding name 'PointerTott__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioOutputConfiguration
#define SOAP_TYPE_PointerTott__AudioOutputConfiguration (887)
#endif

/* tt__MetadataConfiguration * has binding name 'PointerTott__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfiguration
#define SOAP_TYPE_PointerTott__MetadataConfiguration (885)
#endif

/* tt__VideoAnalyticsConfiguration * has binding name 'PointerTott__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration (883)
#endif

/* tt__AudioSourceConfiguration * has binding name 'PointerTott__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceConfiguration
#define SOAP_TYPE_PointerTott__AudioSourceConfiguration (881)
#endif

/* tt__AudioEncoderConfiguration * has binding name 'PointerTott__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfiguration
#define SOAP_TYPE_PointerTott__AudioEncoderConfiguration (879)
#endif

/* tt__VideoSourceConfiguration * has binding name 'PointerTott__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfiguration
#define SOAP_TYPE_PointerTott__VideoSourceConfiguration (877)
#endif

/* tt__VideoEncoderConfiguration * has binding name 'PointerTott__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfiguration
#define SOAP_TYPE_PointerTott__VideoEncoderConfiguration (875)
#endif

/* tt__Profile * has binding name 'PointerTott__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_PointerTott__Profile
#define SOAP_TYPE_PointerTott__Profile (873)
#endif

/* std::string * has binding name 'PointerTott__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_PointerTott__ReferenceToken
#define SOAP_TYPE_PointerTott__ReferenceToken (872)
#endif

/* tt__AudioOutput * has binding name 'PointerTott__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_PointerTott__AudioOutput
#define SOAP_TYPE_PointerTott__AudioOutput (870)
#endif

/* tt__AudioSource * has binding name 'PointerTott__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_PointerTott__AudioSource
#define SOAP_TYPE_PointerTott__AudioSource (868)
#endif

/* tt__VideoSource * has binding name 'PointerTott__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_PointerTott__VideoSource
#define SOAP_TYPE_PointerTott__VideoSource (866)
#endif

/* trt__Capabilities * has binding name 'PointerTotrt__Capabilities' for type 'trt:Capabilities' */
#ifndef SOAP_TYPE_PointerTotrt__Capabilities
#define SOAP_TYPE_PointerTotrt__Capabilities (865)
#endif

/* trt__VideoSourceModeExtension * has binding name 'PointerTotrt__VideoSourceModeExtension' for type 'trt:VideoSourceModeExtension' */
#ifndef SOAP_TYPE_PointerTotrt__VideoSourceModeExtension
#define SOAP_TYPE_PointerTotrt__VideoSourceModeExtension (864)
#endif

/* std::string * has binding name 'PointerTott__Description' for type 'tt:Description' */
#ifndef SOAP_TYPE_PointerTott__Description
#define SOAP_TYPE_PointerTott__Description (863)
#endif

/* tt__VideoResolution * has binding name 'PointerTott__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_PointerTott__VideoResolution
#define SOAP_TYPE_PointerTott__VideoResolution (862)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (860)
#endif

/* trt__StreamingCapabilities * has binding name 'PointerTotrt__StreamingCapabilities' for type 'trt:StreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTotrt__StreamingCapabilities
#define SOAP_TYPE_PointerTotrt__StreamingCapabilities (857)
#endif

/* trt__ProfileCapabilities * has binding name 'PointerTotrt__ProfileCapabilities' for type 'trt:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTotrt__ProfileCapabilities
#define SOAP_TYPE_PointerTotrt__ProfileCapabilities (856)
#endif

/* struct SOAP_ENV__Header * has binding name 'PointerToSOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header
#define SOAP_TYPE_PointerToSOAP_ENV__Header (60)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (53)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (51)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (49)
#endif

/* struct chan__ChannelInstanceType * has binding name 'PointerTochan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (47)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (46)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (45)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (44)
#endif

/* struct wsa5__RelatesToType * has binding name 'PointerTo_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (43)
#endif

/* _wsa5__ProblemIRI has binding name '_wsa5__ProblemIRI' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
#endif

/* _wsa5__ProblemHeaderQName has binding name '_wsa5__ProblemHeaderQName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
#endif

/* _wsa5__Action has binding name '_wsa5__Action' for type '' */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
#endif

/* _wsa5__To has binding name '_wsa5__To' for type '' */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
#endif

/* _wsa5__MessageID has binding name '_wsa5__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (24)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (23)
#endif

/* struct wsa5__MetadataType * has binding name 'PointerTowsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (22)
#endif

/* struct wsa5__ReferenceParametersType * has binding name 'PointerTowsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (21)
#endif

/* wsa5__FaultCodesOpenEnumType has binding name 'wsa5__FaultCodesOpenEnumType' for type 'wsa5:FaultCodesOpenEnumType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
#endif

/* wsa5__RelationshipTypeOpenEnum has binding name 'wsa5__RelationshipTypeOpenEnum' for type 'wsa5:RelationshipTypeOpenEnum' */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<_wstop__TopicNamespaceType_Topic>  has binding name 'std__vectorTemplateOf_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic (1399)
#endif

/* std::vector<wstop__TopicType *>  has binding name 'std__vectorTemplateOfPointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType (1396)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName (1392)
#endif

/* std::vector<_wsrfbf__BaseFaultType_Description>  has binding name 'std__vectorTemplateOf_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description (1353)
#endif

/* std::vector<wsnt__NotificationMessageHolderType *>  has binding name 'std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType (1344)
#endif

/* std::vector<wsnt__TopicExpressionType *>  has binding name 'std__vectorTemplateOfPointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType (1341)
#endif

/* std::vector<tt__FileProgress *>  has binding name 'std__vectorTemplateOfPointerTott__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress (1323)
#endif

/* std::vector<tt__OSDType>  has binding name 'std__vectorTemplateOftt__OSDType' for type 'tt:OSDType' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__OSDType
#define SOAP_TYPE_std__vectorTemplateOftt__OSDType (1318)
#endif

/* std::vector<tt__ColorspaceRange *>  has binding name 'std__vectorTemplateOfPointerTott__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange (1309)
#endif

/* std::vector<tt__Color *>  has binding name 'std__vectorTemplateOfPointerTott__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Color
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Color (1306)
#endif

/* std::vector<tt__ActiveConnection *>  has binding name 'std__vectorTemplateOfPointerTott__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection (1299)
#endif

/* std::vector<tt__AudioClassCandidate *>  has binding name 'std__vectorTemplateOfPointerTott__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate (1296)
#endif

/* std::vector<tt__EngineConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration (1285)
#endif

/* std::vector<tt__RecordingJobStateTrack *>  has binding name 'std__vectorTemplateOfPointerTott__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack (1282)
#endif

/* std::vector<tt__RecordingJobStateSource *>  has binding name 'std__vectorTemplateOfPointerTott__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource (1278)
#endif

/* std::vector<tt__RecordingJobTrack *>  has binding name 'std__vectorTemplateOfPointerTott__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack (1275)
#endif

/* std::vector<tt__RecordingJobSource *>  has binding name 'std__vectorTemplateOfPointerTott__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource (1272)
#endif

/* std::vector<tt__GetTracksResponseItem *>  has binding name 'std__vectorTemplateOfPointerTott__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem (1269)
#endif

/* std::vector<tt__TrackAttributes *>  has binding name 'std__vectorTemplateOfPointerTott__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes (1261)
#endif

/* std::vector<tt__TrackInformation *>  has binding name 'std__vectorTemplateOfPointerTott__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation (1259)
#endif

/* std::vector<tt__FindMetadataResult *>  has binding name 'std__vectorTemplateOfPointerTott__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult (1255)
#endif

/* std::vector<tt__FindPTZPositionResult *>  has binding name 'std__vectorTemplateOfPointerTott__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult (1253)
#endif

/* std::vector<tt__FindEventResult *>  has binding name 'std__vectorTemplateOfPointerTott__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult (1250)
#endif

/* std::vector<tt__RecordingInformation *>  has binding name 'std__vectorTemplateOfPointerTott__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation (1248)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__RecordingReference' for type 'tt:RecordingReference' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__RecordingReference
#define SOAP_TYPE_std__vectorTemplateOftt__RecordingReference (1244)
#endif

/* std::vector<tt__SourceReference *>  has binding name 'std__vectorTemplateOfPointerTott__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference (1243)
#endif

/* std::vector<tt__Rectangle *>  has binding name 'std__vectorTemplateOfPointerTott__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle (1238)
#endif

/* std::vector<tt__PaneLayoutOptions *>  has binding name 'std__vectorTemplateOfPointerTott__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions (1236)
#endif

/* std::vector<tt__PaneLayout *>  has binding name 'std__vectorTemplateOfPointerTott__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout (1232)
#endif

/* std::vector<tt__Polyline *>  has binding name 'std__vectorTemplateOfPointerTott__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline (1226)
#endif

/* std::vector<tt__ConfigDescription *>  has binding name 'std__vectorTemplateOfPointerTott__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription (1221)
#endif

/* std::vector<_tt__ConfigDescription_Messages>  has binding name 'std__vectorTemplateOf_tt__ConfigDescription_Messages' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages
#define SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages (1217)
#endif

/* std::vector<tt__Config *>  has binding name 'std__vectorTemplateOfPointerTott__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Config
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Config (1212)
#endif

/* std::vector<tt__Vector *>  has binding name 'std__vectorTemplateOfPointerTott__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector (1210)
#endif

/* std::vector<_tt__ItemListDescription_ElementItemDescription>  has binding name 'std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription (1207)
#endif

/* std::vector<_tt__ItemListDescription_SimpleItemDescription>  has binding name 'std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription (1205)
#endif

/* std::vector<_tt__ItemList_ElementItem>  has binding name 'std__vectorTemplateOf_tt__ItemList_ElementItem' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem (1200)
#endif

/* std::vector<_tt__ItemList_SimpleItem>  has binding name 'std__vectorTemplateOf_tt__ItemList_SimpleItem' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem (1198)
#endif

/* std::vector<tt__BacklightCompensationMode>  has binding name 'std__vectorTemplateOftt__BacklightCompensationMode' for type 'tt:BacklightCompensationMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode
#define SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode (1191)
#endif

/* std::vector<tt__ImageStabilizationMode>  has binding name 'std__vectorTemplateOftt__ImageStabilizationMode' for type 'tt:ImageStabilizationMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode
#define SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode (1188)
#endif

/* std::vector<tt__IrCutFilterAutoAdjustment *>  has binding name 'std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment (1163)
#endif

/* std::vector<tt__WhiteBalanceMode>  has binding name 'std__vectorTemplateOftt__WhiteBalanceMode' for type 'tt:WhiteBalanceMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode
#define SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode (1144)
#endif

/* std::vector<tt__ExposurePriority>  has binding name 'std__vectorTemplateOftt__ExposurePriority' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority
#define SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority (1143)
#endif

/* std::vector<tt__ExposureMode>  has binding name 'std__vectorTemplateOftt__ExposureMode' for type 'tt:ExposureMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposureMode
#define SOAP_TYPE_std__vectorTemplateOftt__ExposureMode (1142)
#endif

/* std::vector<tt__AutoFocusMode>  has binding name 'std__vectorTemplateOftt__AutoFocusMode' for type 'tt:AutoFocusMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode
#define SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode (1141)
#endif

/* std::vector<tt__WideDynamicMode>  has binding name 'std__vectorTemplateOftt__WideDynamicMode' for type 'tt:WideDynamicMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode
#define SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode (1140)
#endif

/* std::vector<tt__IrCutFilterMode>  has binding name 'std__vectorTemplateOftt__IrCutFilterMode' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode
#define SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode (1137)
#endif

/* std::vector<tt__PTZPresetTourDirection>  has binding name 'std__vectorTemplateOftt__PTZPresetTourDirection' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection (1123)
#endif

/* std::vector<tt__PTZPresetTourSpot *>  has binding name 'std__vectorTemplateOfPointerTott__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot (1109)
#endif

/* std::vector<tt__Space1DDescription *>  has binding name 'std__vectorTemplateOfPointerTott__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription (1100)
#endif

/* std::vector<tt__Space2DDescription *>  has binding name 'std__vectorTemplateOfPointerTott__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription (1099)
#endif

/* std::vector<tt__ReverseMode>  has binding name 'std__vectorTemplateOftt__ReverseMode' for type 'tt:ReverseMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode (1095)
#endif

/* std::vector<tt__EFlipMode>  has binding name 'std__vectorTemplateOftt__EFlipMode' for type 'tt:EFlipMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode (1093)
#endif

/* std::vector<tt__PTZPresetTourOperation>  has binding name 'std__vectorTemplateOftt__PTZPresetTourOperation' for type 'tt:PTZPresetTourOperation' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation (1079)
#endif

/* std::vector<tt__SystemLogUri *>  has binding name 'std__vectorTemplateOfPointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri (1061)
#endif

/* std::vector<tt__OnvifVersion *>  has binding name 'std__vectorTemplateOfPointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion (1055)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData (1044)
#endif

/* std::vector<tt__Dot11Cipher>  has binding name 'std__vectorTemplateOftt__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher (1021)
#endif

/* std::vector<tt__Dot11AuthAndMangementSuite>  has binding name 'std__vectorTemplateOftt__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite (1020)
#endif

/* std::vector<tt__NetworkZeroConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration (1009)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv6Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv6Address (1006)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv4Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv4Address (1005)
#endif

/* std::vector<tt__NetworkHost *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost (996)
#endif

/* std::vector<tt__IPAddress *>  has binding name 'std__vectorTemplateOfPointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress (993)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token
#define SOAP_TYPE_std__vectorTemplateOfxsd__token (992)
#endif

/* std::vector<tt__PrefixedIPv6Address *>  has binding name 'std__vectorTemplateOfPointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address (983)
#endif

/* std::vector<tt__PrefixedIPv4Address *>  has binding name 'std__vectorTemplateOfPointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address (981)
#endif

/* std::vector<tt__Dot11Configuration *>  has binding name 'std__vectorTemplateOfPointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration (975)
#endif

/* std::vector<tt__Dot3Configuration *>  has binding name 'std__vectorTemplateOfPointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration (973)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (965)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (958)
#endif

/* std::vector<tt__AudioEncoderConfigurationOption *>  has binding name 'std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption (952)
#endif

/* std::vector<tt__VideoResolution2 *>  has binding name 'std__vectorTemplateOfPointerTott__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2 (946)
#endif

/* std::vector<tt__H264Profile>  has binding name 'std__vectorTemplateOftt__H264Profile' for type 'tt:H264Profile' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__H264Profile
#define SOAP_TYPE_std__vectorTemplateOftt__H264Profile (943)
#endif

/* std::vector<tt__Mpeg4Profile>  has binding name 'std__vectorTemplateOftt__Mpeg4Profile' for type 'tt:Mpeg4Profile' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile
#define SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile (942)
#endif

/* std::vector<tt__VideoResolution *>  has binding name 'std__vectorTemplateOfPointerTott__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution (941)
#endif

/* std::vector<tt__RotateMode>  has binding name 'std__vectorTemplateOftt__RotateMode' for type 'tt:RotateMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__RotateMode
#define SOAP_TYPE_std__vectorTemplateOftt__RotateMode (929)
#endif

/* std::vector<tt__SceneOrientationMode>  has binding name 'std__vectorTemplateOftt__SceneOrientationMode' for type 'tt:SceneOrientationMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode
#define SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode (928)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken (924)
#endif

/* std::vector<tt__LensProjection *>  has binding name 'std__vectorTemplateOfPointerTott__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection (922)
#endif

/* std::vector<tt__LensDescription *>  has binding name 'std__vectorTemplateOfPointerTott__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription (916)
#endif

/* std::vector<float>  has binding name 'std__vectorTemplateOffloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_std__vectorTemplateOffloat
#define SOAP_TYPE_std__vectorTemplateOffloat (907)
#endif

/* std::vector<int>  has binding name 'std__vectorTemplateOfint' for type 'xsd:int' */
#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (906)
#endif

/* std::vector<tt__OSDConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration (903)
#endif

/* std::vector<trt__VideoSourceMode *>  has binding name 'std__vectorTemplateOfPointerTotrt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode
#define SOAP_TYPE_std__vectorTemplateOfPointerTotrt__VideoSourceMode (901)
#endif

/* std::vector<tt__AudioDecoderConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration (890)
#endif

/* std::vector<tt__AudioOutputConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration (888)
#endif

/* std::vector<tt__MetadataConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration (886)
#endif

/* std::vector<tt__VideoAnalyticsConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration (884)
#endif

/* std::vector<tt__AudioSourceConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration (882)
#endif

/* std::vector<tt__AudioEncoderConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfiguration (880)
#endif

/* std::vector<tt__VideoSourceConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration (878)
#endif

/* std::vector<tt__VideoEncoderConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoderConfiguration (876)
#endif

/* std::vector<tt__Profile *>  has binding name 'std__vectorTemplateOfPointerTott__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Profile (874)
#endif

/* std::vector<tt__AudioOutput *>  has binding name 'std__vectorTemplateOfPointerTott__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutput (871)
#endif

/* std::vector<tt__AudioSource *>  has binding name 'std__vectorTemplateOfPointerTott__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSource (869)
#endif

/* std::vector<tt__VideoSource *>  has binding name 'std__vectorTemplateOfPointerTott__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSource (867)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (858)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
