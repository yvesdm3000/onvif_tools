/* soapStub.h
   Generated by gSOAP 2.8.60 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_wsrfrw	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_wsrfr	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20860
# error "GSOAP VERSION 20860 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* wsa5.h:94 */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (15)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {
	http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0
};
#endif

/* wsa5.h:102 */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (16)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {
	wsa5__InvalidAddressingHeader = 0,
	wsa5__InvalidAddress = 1,
	wsa5__InvalidEPR = 2,
	wsa5__InvalidCardinality = 3,
	wsa5__MissingAddressInEPR = 4,
	wsa5__DuplicateMessageID = 5,
	wsa5__ActionMismatch = 6,
	wsa5__MessageAddressingHeaderRequired = 7,
	wsa5__DestinationUnreachable = 8,
	wsa5__ActionNotSupported = 9,
	wsa5__EndpointUnavailable = 10
};
#endif

/* wsa5.h:252 */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (36)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {
	_wsa5__IsReferenceParameter__false = 0,
	_wsa5__IsReferenceParameter__true = 1
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/duration.h:90 */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (60)
typedef LONG64 xsd__duration;
#endif

/* onvif.h:174 */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (56)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct wsa5__EndpointReferenceType;	/* wsa5.h:63 */
struct wsa5__ReferenceParametersType;	/* wsa5.h:66 */
struct wsa5__MetadataType;	/* wsa5.h:69 */
struct wsa5__ProblemActionType;	/* wsa5.h:84 */
struct wsa5__RelatesToType;	/* wsa5.h:72 */
struct chan__ChannelInstanceType;	/* wsa5.h:258 */
class xsd__anyType;	/* onvif.h:171 */
class tev__Capabilities;	/* onvif.h:204 */
class _tev__GetServiceCapabilities;	/* onvif.h:207 */
class _tev__GetServiceCapabilitiesResponse;	/* onvif.h:210 */
class _tev__CreatePullPointSubscription_SubscriptionPolicy;	/* onvif.h:672 */
class _tev__CreatePullPointSubscription;	/* onvif.h:213 */
class _tev__CreatePullPointSubscriptionResponse;	/* onvif.h:216 */
class _tev__PullMessages;	/* onvif.h:219 */
class _tev__PullMessagesResponse;	/* onvif.h:222 */
class _tev__PullMessagesFaultResponse;	/* onvif.h:225 */
class _tev__Seek;	/* onvif.h:228 */
class _tev__SeekResponse;	/* onvif.h:231 */
class _tev__SetSynchronizationPoint;	/* onvif.h:234 */
class _tev__SetSynchronizationPointResponse;	/* onvif.h:237 */
class _tev__GetEventProperties;	/* onvif.h:240 */
class _tev__GetEventPropertiesResponse;	/* onvif.h:243 */
class _wsrfbf__BaseFaultType_ErrorCode;	/* onvif.h:1089 */
class _wsrfbf__BaseFaultType_Description;	/* onvif.h:1110 */
class _wsrfbf__BaseFaultType_FaultCause;	/* onvif.h:1127 */
class wsrfbf__BaseFaultType;	/* onvif.h:255 */
class wsnt__QueryExpressionType;	/* onvif.h:258 */
class wsnt__TopicExpressionType;	/* onvif.h:261 */
class wsnt__FilterType;	/* onvif.h:264 */
class wsnt__SubscriptionPolicyType;	/* onvif.h:267 */
class _wsnt__NotificationMessageHolderType_Message;	/* onvif.h:1300 */
class wsnt__NotificationMessageHolderType;	/* onvif.h:270 */
class _wsnt__NotificationProducerRP;	/* onvif.h:333 */
class _wsnt__SubscriptionManagerRP;	/* onvif.h:336 */
class _wsnt__Notify;	/* onvif.h:339 */
class _wsnt__UseRaw;	/* onvif.h:342 */
class _wsnt__Subscribe_SubscriptionPolicy;	/* onvif.h:1442 */
class _wsnt__Subscribe;	/* onvif.h:345 */
class _wsnt__SubscribeResponse;	/* onvif.h:348 */
class _wsnt__GetCurrentMessage;	/* onvif.h:351 */
class _wsnt__GetCurrentMessageResponse;	/* onvif.h:354 */
class _wsnt__GetMessages;	/* onvif.h:357 */
class _wsnt__GetMessagesResponse;	/* onvif.h:360 */
class _wsnt__DestroyPullPoint;	/* onvif.h:363 */
class _wsnt__DestroyPullPointResponse;	/* onvif.h:366 */
class _wsnt__CreatePullPoint;	/* onvif.h:369 */
class _wsnt__CreatePullPointResponse;	/* onvif.h:372 */
class _wsnt__Renew;	/* onvif.h:375 */
class _wsnt__RenewResponse;	/* onvif.h:378 */
class _wsnt__Unsubscribe;	/* onvif.h:381 */
class _wsnt__UnsubscribeResponse;	/* onvif.h:384 */
class _wsnt__PauseSubscription;	/* onvif.h:387 */
class _wsnt__PauseSubscriptionResponse;	/* onvif.h:390 */
class _wsnt__ResumeSubscription;	/* onvif.h:393 */
class _wsnt__ResumeSubscriptionResponse;	/* onvif.h:396 */
class wstop__Documentation;	/* onvif.h:399 */
class wstop__ExtensibleDocumented;	/* onvif.h:402 */
class wstop__QueryExpressionType;	/* onvif.h:405 */
class wsrfr__ResourceUnknownFaultType;	/* onvif.h:249 */
class wsrfr__ResourceUnavailableFaultType;	/* onvif.h:252 */
class wsnt__SubscribeCreationFailedFaultType;	/* onvif.h:273 */
class wsnt__InvalidFilterFaultType;	/* onvif.h:276 */
class wsnt__TopicExpressionDialectUnknownFaultType;	/* onvif.h:279 */
class wsnt__InvalidTopicExpressionFaultType;	/* onvif.h:282 */
class wsnt__TopicNotSupportedFaultType;	/* onvif.h:285 */
class wsnt__MultipleTopicsSpecifiedFaultType;	/* onvif.h:288 */
class wsnt__InvalidProducerPropertiesExpressionFaultType;	/* onvif.h:291 */
class wsnt__InvalidMessageContentExpressionFaultType;	/* onvif.h:294 */
class wsnt__UnrecognizedPolicyRequestFaultType;	/* onvif.h:297 */
class wsnt__UnsupportedPolicyRequestFaultType;	/* onvif.h:300 */
class wsnt__NotifyMessageNotSupportedFaultType;	/* onvif.h:303 */
class wsnt__UnacceptableInitialTerminationTimeFaultType;	/* onvif.h:306 */
class wsnt__NoCurrentMessageOnTopicFaultType;	/* onvif.h:309 */
class wsnt__UnableToGetMessagesFaultType;	/* onvif.h:312 */
class wsnt__UnableToDestroyPullPointFaultType;	/* onvif.h:315 */
class wsnt__UnableToCreatePullPointFaultType;	/* onvif.h:318 */
class wsnt__UnacceptableTerminationTimeFaultType;	/* onvif.h:321 */
class wsnt__UnableToDestroySubscriptionFaultType;	/* onvif.h:324 */
class wsnt__PauseFailedFaultType;	/* onvif.h:327 */
class wsnt__ResumeFailedFaultType;	/* onvif.h:330 */
class _wstop__TopicNamespaceType_Topic;	/* onvif.h:4172 */
class wstop__TopicNamespaceType;	/* onvif.h:408 */
class wstop__TopicType;	/* onvif.h:411 */
class wstop__TopicSetType;	/* onvif.h:414 */
struct __tev__PullMessages;	/* onvif.h:4786 */
struct __tev__Seek;	/* onvif.h:4868 */
struct __tev__SetSynchronizationPoint;	/* onvif.h:4951 */
struct __tev__Unsubscribe;	/* onvif.h:5029 */
struct __tev__GetServiceCapabilities;	/* onvif.h:5098 */
struct __tev__CreatePullPointSubscription;	/* onvif.h:5208 */
struct __tev__GetEventProperties;	/* onvif.h:5283 */
struct __tev__Renew;	/* onvif.h:5356 */
struct __tev__Unsubscribe_;	/* onvif.h:5429 */
struct __tev__Subscribe;	/* onvif.h:5532 */
struct __tev__GetCurrentMessage;	/* onvif.h:5617 */
struct __tev__Notify;	/* onvif.h:5680 */
struct __tev__GetMessages;	/* onvif.h:5753 */
struct __tev__DestroyPullPoint;	/* onvif.h:5826 */
struct __tev__Notify_;	/* onvif.h:5889 */
struct __tev__CreatePullPoint;	/* onvif.h:5959 */
struct __tev__Renew_;	/* onvif.h:6032 */
struct __tev__Unsubscribe__;	/* onvif.h:6105 */
struct __tev__PauseSubscription;	/* onvif.h:6178 */
struct __tev__ResumeSubscription;	/* onvif.h:6251 */

/* wsa5.h:63 */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (8)
/* complex XSD type 'wsa5:EndpointReferenceType': */
struct SOAP_CMAC wsa5__EndpointReferenceType {
      public:
        /** Required element 'wsa5:Address' of XSD type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa5:ReferenceParameters' of XSD type 'wsa5:ReferenceParametersType' */
        struct wsa5__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa5:Metadata' of XSD type 'wsa5:MetadataType' */
        struct wsa5__MetadataType *Metadata;
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
        long soap_type() const { return SOAP_TYPE_wsa5__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa5__EndpointReferenceType() : Address(), ReferenceParameters(), Metadata(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:66 */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (9)
/* complex XSD type 'wsa5:ReferenceParametersType': */
struct SOAP_CMAC wsa5__ReferenceParametersType {
      public:
        /** Optional element 'chan:ChannelInstance' of XSD type 'xsd:int' */
        int *chan__ChannelInstance;
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
        long soap_type() const { return SOAP_TYPE_wsa5__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa5__ReferenceParametersType() : chan__ChannelInstance(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:69 */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (10)
/* complex XSD type 'wsa5:MetadataType': */
struct SOAP_CMAC wsa5__MetadataType {
      public:
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__MetadataType */
        long soap_type() const { return SOAP_TYPE_wsa5__MetadataType; }
        /** Constructor with member initializations */
        wsa5__MetadataType() : __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:84 */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (12)
/* complex XSD type 'wsa5:ProblemActionType': */
struct SOAP_CMAC wsa5__ProblemActionType {
      public:
        /** Optional element 'wsa5:Action' of XSD type 'xsd:string' */
        char *Action;
        /** Optional element 'wsa5:SoapAction' of XSD type 'xsd:string' */
        char *SoapAction;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ProblemActionType */
        long soap_type() const { return SOAP_TYPE_wsa5__ProblemActionType; }
        /** Constructor with member initializations */
        wsa5__ProblemActionType() : Action(), SoapAction(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:72 */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (11)
/* simple XSD type 'wsa5:RelatesToType': */
struct SOAP_CMAC wsa5__RelatesToType {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XSD type 'wsa5:RelationshipTypeOpenEnum' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__RelatesToType */
        long soap_type() const { return SOAP_TYPE_wsa5__RelatesToType; }
        /** Constructor with member initializations */
        wsa5__RelatesToType() : __item(), RelationshipType(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:258 */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (37)
/* simple XSD type 'chan:ChannelInstanceType': */
struct SOAP_CMAC chan__ChannelInstanceType {
      public:
        /** Simple content of XSD type 'xsd:int' wrapped by this struct */
        int __item;
        /** Optional attribute 'wsa5:IsReferenceParameter' of XSD type 'wsa5:IsReferenceParameter' */
        enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	 /**< initialized with default value = (enum _wsa5__IsReferenceParameter)0 */
      public:
        /** Return unique type id SOAP_TYPE_chan__ChannelInstanceType */
        long soap_type() const { return SOAP_TYPE_chan__ChannelInstanceType; }
        /** Constructor with member initializations */
        chan__ChannelInstanceType() : __item(), wsa5__IsReferenceParameter((enum _wsa5__IsReferenceParameter)0) { }
        /** Friend allocator */
        friend SOAP_FMAC1 chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:264 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Optional element 'wsa5:MessageID' of XSD type 'wsa5:MessageID' */
        char *wsa5__MessageID;
        /** Optional element 'wsa5:RelatesTo' of XSD type 'wsa5:RelatesTo' */
        struct wsa5__RelatesToType *wsa5__RelatesTo;
        /** Optional element 'wsa5:From' of XSD type 'wsa5:From' */
        struct wsa5__EndpointReferenceType *wsa5__From;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__ReplyTo;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__FaultTo;
        /** MustUnderstand */
        char *wsa5__To;
        /** MustUnderstand */
        char *wsa5__Action;
        /** Optional element 'chan:ChannelInstance' of XSD type 'chan:ChannelInstanceType' */
        struct chan__ChannelInstanceType *chan__ChannelInstance;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() : wsa5__MessageID(), wsa5__RelatesTo(), wsa5__From(), wsa5__ReplyTo(), wsa5__FaultTo(), wsa5__To(), wsa5__Action(), chan__ChannelInstance() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:282 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (46)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:283 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (48)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:288 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:171 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (53)
/* simple XSD type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with initializations
        xsd__anyType() : __item(), soap() { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:204 */
#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (66)
/* complex XSD type 'tev:Capabilities': */
class SOAP_CMAC tev__Capabilities {
      public:
        std::vector<char *> __any;
        /// optional attribute 'WSSubscriptionPolicySupport' of XSD type 'xsd:boolean'
        bool *WSSubscriptionPolicySupport;
        /// optional attribute 'WSPullPointSupport' of XSD type 'xsd:boolean'
        bool *WSPullPointSupport;
        /// optional attribute 'WSPausableSubscriptionManagerInterfaceSupport' of XSD type 'xsd:boolean'
        bool *WSPausableSubscriptionManagerInterfaceSupport;
        /// optional attribute 'MaxNotificationProducers' of XSD type 'xsd:int'
        int *MaxNotificationProducers;
        /// optional attribute 'MaxPullPoints' of XSD type 'xsd:int'
        int *MaxPullPoints;
        /// optional attribute 'PersistentNotificationStorage' of XSD type 'xsd:boolean'
        bool *PersistentNotificationStorage;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tev__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tev__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tev__Capabilities, default initialized and not managed by a soap context
        virtual tev__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tev__Capabilities); }
      public:
        /// Constructor with initializations
        tev__Capabilities() : __any(), WSSubscriptionPolicySupport(), WSPullPointSupport(), WSPausableSubscriptionManagerInterfaceSupport(), MaxNotificationProducers(), MaxPullPoints(), PersistentNotificationStorage(), __anyAttribute(), soap() { }
        virtual ~tev__Capabilities() { }
        /// Friend allocator used by soap_new_tev__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tev__Capabilities * SOAP_FMAC2 soap_instantiate_tev__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:207 */
#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (67)
/* complex XSD type 'tev:GetServiceCapabilities': */
class SOAP_CMAC _tev__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tev__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetServiceCapabilities); }
      public:
        /// Constructor with initializations
        _tev__GetServiceCapabilities() : soap() { }
        virtual ~_tev__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tev__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:210 */
#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (68)
/* complex XSD type 'tev:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tev__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tev:Capabilities' of XSD type 'tev:Capabilities'
        tev__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tev__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with initializations
        _tev__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tev__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tev__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:672 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (147)
/* complex XSD type 'tev:CreatePullPointSubscription-SubscriptionPolicy': */
class SOAP_CMAC _tev__CreatePullPointSubscription_SubscriptionPolicy {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscription_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscription_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscription_SubscriptionPolicy); }
      public:
        /// Constructor with initializations
        _tev__CreatePullPointSubscription_SubscriptionPolicy() : __any() { }
        virtual ~_tev__CreatePullPointSubscription_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:213 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (69)
/* complex XSD type 'tev:CreatePullPointSubscription': */
class SOAP_CMAC _tev__CreatePullPointSubscription {
      public:
        /// Optional element 'tev:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'tev:InitialTerminationTime' of XSD type 'wsnt:AbsoluteOrRelativeTimeType'
        std::string *InitialTerminationTime;
        /// Optional element 'tev:SubscriptionPolicy' of XSD type 'tev:CreatePullPointSubscription-SubscriptionPolicy'
        _tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscription, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscription); }
      public:
        /// Constructor with initializations
        _tev__CreatePullPointSubscription() : Filter(), InitialTerminationTime(), SubscriptionPolicy(), __any(), soap() { }
        virtual ~_tev__CreatePullPointSubscription() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscription(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:216 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (70)
/* complex XSD type 'tev:CreatePullPointSubscriptionResponse': */
class SOAP_CMAC _tev__CreatePullPointSubscriptionResponse {
      public:
        /// Required element 'tev:SubscriptionReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType SubscriptionReference;
        /// Required element 'wsnt:CurrentTime' of XSD type 'xsd:dateTime'
        time_t wsnt__CurrentTime;
        /// Required element 'wsnt:TerminationTime' of XSD type 'xsd:dateTime'
        time_t wsnt__TerminationTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscriptionResponse, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscriptionResponse); }
      public:
        /// Constructor with initializations
        _tev__CreatePullPointSubscriptionResponse() : SubscriptionReference(), wsnt__CurrentTime(), wsnt__TerminationTime(), __any(), soap() { }
        virtual ~_tev__CreatePullPointSubscriptionResponse() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscriptionResponse * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:219 */
#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (71)
/* complex XSD type 'tev:PullMessages': */
class SOAP_CMAC _tev__PullMessages {
      public:
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 Timeout;
        /// Required element 'tev:MessageLimit' of XSD type 'xsd:int'
        int MessageLimit;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessages
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessages, default initialized and not managed by a soap context
        virtual _tev__PullMessages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessages); }
      public:
        /// Constructor with initializations
        _tev__PullMessages() : Timeout(), MessageLimit(), __any(), soap() { }
        virtual ~_tev__PullMessages() { }
        /// Friend allocator used by soap_new__tev__PullMessages(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessages * SOAP_FMAC2 soap_instantiate__tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:222 */
#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (72)
/* complex XSD type 'tev:PullMessagesResponse': */
class SOAP_CMAC _tev__PullMessagesResponse {
      public:
        /// Required element 'tev:CurrentTime' of XSD type 'xsd:dateTime'
        time_t CurrentTime;
        /// Required element 'tev:TerminationTime' of XSD type 'xsd:dateTime'
        time_t TerminationTime;
        /// Optional element 'wsnt:NotificationMessage' of XSD type 'wsnt:NotificationMessageHolderType'
        std::vector<wsnt__NotificationMessageHolderType *> wsnt__NotificationMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessagesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessagesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessagesResponse, default initialized and not managed by a soap context
        virtual _tev__PullMessagesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessagesResponse); }
      public:
        /// Constructor with initializations
        _tev__PullMessagesResponse() : CurrentTime(), TerminationTime(), wsnt__NotificationMessage(), soap() { }
        virtual ~_tev__PullMessagesResponse() { }
        /// Friend allocator used by soap_new__tev__PullMessagesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessagesResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:225 */
#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (73)
/* complex XSD type 'tev:PullMessagesFaultResponse': */
class SOAP_CMAC _tev__PullMessagesFaultResponse {
      public:
        /// Typedef xsd__duration with custom serializer for LONG64
        LONG64 MaxTimeout;
        /// Required element 'tev:MaxMessageLimit' of XSD type 'xsd:int'
        int MaxMessageLimit;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessagesFaultResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessagesFaultResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessagesFaultResponse, default initialized and not managed by a soap context
        virtual _tev__PullMessagesFaultResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessagesFaultResponse); }
      public:
        /// Constructor with initializations
        _tev__PullMessagesFaultResponse() : MaxTimeout(), MaxMessageLimit(), __any(), soap() { }
        virtual ~_tev__PullMessagesFaultResponse() { }
        /// Friend allocator used by soap_new__tev__PullMessagesFaultResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessagesFaultResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesFaultResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:228 */
#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (74)
/* complex XSD type 'tev:Seek': */
class SOAP_CMAC _tev__Seek {
      public:
        /// Required element 'tev:UtcTime' of XSD type 'xsd:dateTime'
        time_t UtcTime;
        /// Optional element 'tev:Reverse' of XSD type 'xsd:boolean'
        bool *Reverse;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__Seek
        virtual long soap_type(void) const { return SOAP_TYPE__tev__Seek; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__Seek, default initialized and not managed by a soap context
        virtual _tev__Seek *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__Seek); }
      public:
        /// Constructor with initializations
        _tev__Seek() : UtcTime(), Reverse(), __any(), soap() { }
        virtual ~_tev__Seek() { }
        /// Friend allocator used by soap_new__tev__Seek(struct soap*, int)
        friend SOAP_FMAC1 _tev__Seek * SOAP_FMAC2 soap_instantiate__tev__Seek(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:231 */
#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (75)
/* complex XSD type 'tev:SeekResponse': */
class SOAP_CMAC _tev__SeekResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SeekResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SeekResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SeekResponse, default initialized and not managed by a soap context
        virtual _tev__SeekResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SeekResponse); }
      public:
        /// Constructor with initializations
        _tev__SeekResponse() : soap() { }
        virtual ~_tev__SeekResponse() { }
        /// Friend allocator used by soap_new__tev__SeekResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__SeekResponse * SOAP_FMAC2 soap_instantiate__tev__SeekResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:234 */
#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (76)
/* complex XSD type 'tev:SetSynchronizationPoint': */
class SOAP_CMAC _tev__SetSynchronizationPoint {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SetSynchronizationPoint
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SetSynchronizationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SetSynchronizationPoint, default initialized and not managed by a soap context
        virtual _tev__SetSynchronizationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SetSynchronizationPoint); }
      public:
        /// Constructor with initializations
        _tev__SetSynchronizationPoint() : soap() { }
        virtual ~_tev__SetSynchronizationPoint() { }
        /// Friend allocator used by soap_new__tev__SetSynchronizationPoint(struct soap*, int)
        friend SOAP_FMAC1 _tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:237 */
#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (77)
/* complex XSD type 'tev:SetSynchronizationPointResponse': */
class SOAP_CMAC _tev__SetSynchronizationPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SetSynchronizationPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SetSynchronizationPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SetSynchronizationPointResponse, default initialized and not managed by a soap context
        virtual _tev__SetSynchronizationPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SetSynchronizationPointResponse); }
      public:
        /// Constructor with initializations
        _tev__SetSynchronizationPointResponse() : soap() { }
        virtual ~_tev__SetSynchronizationPointResponse() { }
        /// Friend allocator used by soap_new__tev__SetSynchronizationPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:240 */
#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (78)
/* complex XSD type 'tev:GetEventProperties': */
class SOAP_CMAC _tev__GetEventProperties {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventProperties
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventProperties; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventProperties, default initialized and not managed by a soap context
        virtual _tev__GetEventProperties *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventProperties); }
      public:
        /// Constructor with initializations
        _tev__GetEventProperties() : soap() { }
        virtual ~_tev__GetEventProperties() { }
        /// Friend allocator used by soap_new__tev__GetEventProperties(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventProperties * SOAP_FMAC2 soap_instantiate__tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:243 */
#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (79)
/* complex XSD type 'tev:GetEventPropertiesResponse': */
class SOAP_CMAC _tev__GetEventPropertiesResponse {
      public:
        /// Required element 'tev:TopicNamespaceLocation' of XSD type 'xsd:anyURI'
        std::vector<std::string> TopicNamespaceLocation;
        /// Required element 'wsnt:FixedTopicSet' of XSD type 'xsd:boolean'
        bool wsnt__FixedTopicSet;	///< initialized with default value = (bool)1
        /// Required element 'wstop:TopicSet' of XSD type 'wstop:TopicSetType'
        wstop__TopicSetType *wstop__TopicSet;
        /// Required element 'wsnt:TopicExpressionDialect' of XSD type 'xsd:anyURI'
        std::vector<std::string> wsnt__TopicExpressionDialect;
        /// Required element 'tev:MessageContentFilterDialect' of XSD type 'xsd:anyURI'
        std::vector<std::string> MessageContentFilterDialect;
        /// Optional element 'tev:ProducerPropertiesFilterDialect' of XSD type 'xsd:anyURI'
        std::vector<std::string> ProducerPropertiesFilterDialect;
        /// Required element 'tev:MessageContentSchemaLocation' of XSD type 'xsd:anyURI'
        std::vector<std::string> MessageContentSchemaLocation;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventPropertiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventPropertiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventPropertiesResponse, default initialized and not managed by a soap context
        virtual _tev__GetEventPropertiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventPropertiesResponse); }
      public:
        /// Constructor with initializations
        _tev__GetEventPropertiesResponse() : TopicNamespaceLocation(), wsnt__FixedTopicSet((bool)1), wstop__TopicSet(), wsnt__TopicExpressionDialect(), MessageContentFilterDialect(), ProducerPropertiesFilterDialect(), MessageContentSchemaLocation(), __any(), soap() { }
        virtual ~_tev__GetEventPropertiesResponse() { }
        /// Friend allocator used by soap_new__tev__GetEventPropertiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventPropertiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetEventPropertiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1089 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (155)
/* complex XSD type 'wsrfbf:BaseFaultType-ErrorCode': */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode {
      public:
        /// required attribute 'dialect' of XSD type 'xsd:anyURI'
        std::string dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_ErrorCode, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_ErrorCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_ErrorCode); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_ErrorCode() : dialect(), __mixed() { }
        virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1110 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (157)
/* simple XSD type 'wsrfbf:BaseFaultType-Description': */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// optional attribute 'xml:lang' of XSD type 'xml:lang'
        std::string *xml__lang;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_Description
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_Description; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_Description, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_Description *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_Description); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_Description() : __item(), xml__lang() { }
        virtual ~_wsrfbf__BaseFaultType_Description() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_Description(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1127 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (160)
/* complex XSD type 'wsrfbf:BaseFaultType-FaultCause': */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause {
      public:
        char *__any;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_FaultCause, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_FaultCause *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_FaultCause); }
      public:
        /// Constructor with initializations
        _wsrfbf__BaseFaultType_FaultCause() : __any() { }
        virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:255 */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (83)
/* Type wsrfbf__BaseFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsrfbf:BaseFaultType': */
class SOAP_CMAC wsrfbf__BaseFaultType {
      public:
        std::vector<char *> __any;
        /// Required element 'wsrfbf:Timestamp' of XSD type 'xsd:dateTime'
        time_t Timestamp;
        /// Optional element 'wsrfbf:Originator' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *Originator;
        /// Optional element 'wsrfbf:ErrorCode' of XSD type 'wsrfbf:BaseFaultType-ErrorCode'
        _wsrfbf__BaseFaultType_ErrorCode *ErrorCode;
        /// Optional element 'wsrfbf:Description' of XSD type 'wsrfbf:BaseFaultType-Description'
        std::vector<_wsrfbf__BaseFaultType_Description> Description;
        /// Optional element 'wsrfbf:FaultCause' of XSD type 'wsrfbf:BaseFaultType-FaultCause'
        _wsrfbf__BaseFaultType_FaultCause *FaultCause;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsrfbf__BaseFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfbf__BaseFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfbf__BaseFaultType, default initialized and not managed by a soap context
        virtual wsrfbf__BaseFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfbf__BaseFaultType); }
      public:
        /// Constructor with initializations
        wsrfbf__BaseFaultType() : __any(), Timestamp(), Originator(), ErrorCode(), Description(), FaultCause(), __anyAttribute(), soap() { }
        virtual ~wsrfbf__BaseFaultType() { }
        /// Friend allocator used by soap_new_wsrfbf__BaseFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:258 */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (84)
/* complex XSD type 'wsnt:QueryExpressionType': */
class SOAP_CMAC wsnt__QueryExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__QueryExpressionType, default initialized and not managed by a soap context
        virtual wsnt__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__QueryExpressionType); }
      public:
        /// Constructor with initializations
        wsnt__QueryExpressionType() : __any(), Dialect(), __mixed(), soap() { }
        virtual ~wsnt__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:261 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (85)
/* complex XSD type 'wsnt:TopicExpressionType': */
class SOAP_CMAC wsnt__TopicExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionType); }
      public:
        /// Constructor with initializations
        wsnt__TopicExpressionType() : __any(), Dialect(), __anyAttribute(), __mixed(), soap() { }
        virtual ~wsnt__TopicExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:264 */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (86)
/* complex XSD type 'wsnt:FilterType': */
class SOAP_CMAC wsnt__FilterType {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__FilterType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__FilterType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__FilterType, default initialized and not managed by a soap context
        virtual wsnt__FilterType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__FilterType); }
      public:
        /// Constructor with initializations
        wsnt__FilterType() : __any(), soap() { }
        virtual ~wsnt__FilterType() { }
        /// Friend allocator used by soap_new_wsnt__FilterType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:267 */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (87)
/* complex XSD type 'wsnt:SubscriptionPolicyType': */
class SOAP_CMAC wsnt__SubscriptionPolicyType {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscriptionPolicyType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscriptionPolicyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscriptionPolicyType, default initialized and not managed by a soap context
        virtual wsnt__SubscriptionPolicyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscriptionPolicyType); }
      public:
        /// Constructor with initializations
        wsnt__SubscriptionPolicyType() : __any(), soap() { }
        virtual ~wsnt__SubscriptionPolicyType() { }
        /// Friend allocator used by soap_new_wsnt__SubscriptionPolicyType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1300 */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (163)
/* complex XSD type 'wsnt:NotificationMessageHolderType-Message': */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message {
      public:
        char *__any;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationMessageHolderType_Message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationMessageHolderType_Message, default initialized and not managed by a soap context
        virtual _wsnt__NotificationMessageHolderType_Message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationMessageHolderType_Message); }
      public:
        /// Constructor with initializations
        _wsnt__NotificationMessageHolderType_Message() : __any() { }
        virtual ~_wsnt__NotificationMessageHolderType_Message() { }
        /// Friend allocator used by soap_new__wsnt__NotificationMessageHolderType_Message(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:270 */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (88)
/* complex XSD type 'wsnt:NotificationMessageHolderType': */
class SOAP_CMAC wsnt__NotificationMessageHolderType {
      public:
        /// Optional element 'wsnt:SubscriptionReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *SubscriptionReference;
        /// Optional element 'wsnt:Topic' of XSD type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        /// Optional element 'wsnt:ProducerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *ProducerReference;
        /// Required element 'wsnt:Message' of XSD type 'wsnt:NotificationMessageHolderType-Message'
        _wsnt__NotificationMessageHolderType_Message Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotificationMessageHolderType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotificationMessageHolderType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotificationMessageHolderType, default initialized and not managed by a soap context
        virtual wsnt__NotificationMessageHolderType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotificationMessageHolderType); }
      public:
        /// Constructor with initializations
        wsnt__NotificationMessageHolderType() : SubscriptionReference(), Topic(), ProducerReference(), Message(), soap() { }
        virtual ~wsnt__NotificationMessageHolderType() { }
        /// Friend allocator used by soap_new_wsnt__NotificationMessageHolderType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:333 */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (109)
/* complex XSD type 'wsnt:NotificationProducerRP': */
class SOAP_CMAC _wsnt__NotificationProducerRP {
      public:
        /// Optional element 'wsnt:TopicExpression' of XSD type 'wsnt:TopicExpressionType'
        std::vector<wsnt__TopicExpressionType *> TopicExpression;
        /// Optional element 'wsnt:FixedTopicSet' of XSD type 'xsd:boolean'
        bool *FixedTopicSet;	///< optional with default value = (bool)1
        /// Optional element 'wsnt:TopicExpressionDialect' of XSD type 'xsd:anyURI'
        std::vector<std::string> TopicExpressionDialect;
        /// Optional element 'wstop:TopicSet' of XSD type 'wstop:TopicSetType'
        wstop__TopicSetType *wstop__TopicSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationProducerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationProducerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationProducerRP, default initialized and not managed by a soap context
        virtual _wsnt__NotificationProducerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationProducerRP); }
      public:
        /// Constructor with initializations
        _wsnt__NotificationProducerRP() : TopicExpression(), FixedTopicSet(), TopicExpressionDialect(), wstop__TopicSet(), soap() { }
        virtual ~_wsnt__NotificationProducerRP() { }
        /// Friend allocator used by soap_new__wsnt__NotificationProducerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:336 */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (110)
/* complex XSD type 'wsnt:SubscriptionManagerRP': */
class SOAP_CMAC _wsnt__SubscriptionManagerRP {
      public:
        /// Required element 'wsnt:ConsumerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:SubscriptionPolicy' of XSD type 'wsnt:SubscriptionPolicyType'
        wsnt__SubscriptionPolicyType *SubscriptionPolicy;
        /// Optional element 'wsnt:CreationTime' of XSD type 'xsd:dateTime'
        time_t *CreationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscriptionManagerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscriptionManagerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscriptionManagerRP, default initialized and not managed by a soap context
        virtual _wsnt__SubscriptionManagerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscriptionManagerRP); }
      public:
        /// Constructor with initializations
        _wsnt__SubscriptionManagerRP() : ConsumerReference(), Filter(), SubscriptionPolicy(), CreationTime(), soap() { }
        virtual ~_wsnt__SubscriptionManagerRP() { }
        /// Friend allocator used by soap_new__wsnt__SubscriptionManagerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:339 */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (111)
/* complex XSD type 'wsnt:Notify': */
class SOAP_CMAC _wsnt__Notify {
      public:
        /// Required element 'wsnt:NotificationMessage' of XSD type 'wsnt:NotificationMessageHolderType'
        std::vector<wsnt__NotificationMessageHolderType *> NotificationMessage;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Notify
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Notify; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Notify, default initialized and not managed by a soap context
        virtual _wsnt__Notify *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Notify); }
      public:
        /// Constructor with initializations
        _wsnt__Notify() : NotificationMessage(), __any(), soap() { }
        virtual ~_wsnt__Notify() { }
        /// Friend allocator used by soap_new__wsnt__Notify(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:342 */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (112)
/* complex XSD type 'wsnt:UseRaw': */
class SOAP_CMAC _wsnt__UseRaw {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UseRaw
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UseRaw; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UseRaw, default initialized and not managed by a soap context
        virtual _wsnt__UseRaw *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UseRaw); }
      public:
        /// Constructor with initializations
        _wsnt__UseRaw() : soap() { }
        virtual ~_wsnt__UseRaw() { }
        /// Friend allocator used by soap_new__wsnt__UseRaw(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1442 */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (167)
/* complex XSD type 'wsnt:Subscribe-SubscriptionPolicy': */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe_SubscriptionPolicy); }
      public:
        /// Constructor with initializations
        _wsnt__Subscribe_SubscriptionPolicy() : __any() { }
        virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:345 */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (113)
/* complex XSD type 'wsnt:Subscribe': */
class SOAP_CMAC _wsnt__Subscribe {
      public:
        /// Required element 'wsnt:ConsumerReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XSD type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:InitialTerminationTime' of XSD type 'wsnt:AbsoluteOrRelativeTimeType'
        std::string *InitialTerminationTime;
        /// Optional element 'wsnt:SubscriptionPolicy' of XSD type 'wsnt:Subscribe-SubscriptionPolicy'
        _wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe); }
      public:
        /// Constructor with initializations
        _wsnt__Subscribe() : ConsumerReference(), Filter(), InitialTerminationTime(), SubscriptionPolicy(), __any(), soap() { }
        virtual ~_wsnt__Subscribe() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:348 */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (114)
/* complex XSD type 'wsnt:SubscribeResponse': */
class SOAP_CMAC _wsnt__SubscribeResponse {
      public:
        /// Required element 'wsnt:SubscriptionReference' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType SubscriptionReference;
        /// Optional element 'wsnt:CurrentTime' of XSD type 'xsd:dateTime'
        time_t *CurrentTime;
        /// Optional element 'wsnt:TerminationTime' of XSD type 'xsd:dateTime'
        time_t *TerminationTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__SubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscribeResponse); }
      public:
        /// Constructor with initializations
        _wsnt__SubscribeResponse() : SubscriptionReference(), CurrentTime(), TerminationTime(), __any(), soap() { }
        virtual ~_wsnt__SubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__SubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:351 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (115)
/* complex XSD type 'wsnt:GetCurrentMessage': */
class SOAP_CMAC _wsnt__GetCurrentMessage {
      public:
        /// Required element 'wsnt:Topic' of XSD type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessage
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessage, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessage); }
      public:
        /// Constructor with initializations
        _wsnt__GetCurrentMessage() : Topic(), __any(), soap() { }
        virtual ~_wsnt__GetCurrentMessage() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessage(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:354 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (116)
/* complex XSD type 'wsnt:GetCurrentMessageResponse': */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessageResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessageResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessageResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessageResponse); }
      public:
        /// Constructor with initializations
        _wsnt__GetCurrentMessageResponse() : __any(), soap() { }
        virtual ~_wsnt__GetCurrentMessageResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:357 */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (117)
/* complex XSD type 'wsnt:GetMessages': */
class SOAP_CMAC _wsnt__GetMessages {
      public:
        /// Optional element 'wsnt:MaximumNumber' of XSD type 'xsd:nonNegativeInteger'
        std::string *MaximumNumber;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessages
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessages, default initialized and not managed by a soap context
        virtual _wsnt__GetMessages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessages); }
      public:
        /// Constructor with initializations
        _wsnt__GetMessages() : MaximumNumber(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__GetMessages() { }
        /// Friend allocator used by soap_new__wsnt__GetMessages(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:360 */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (118)
/* complex XSD type 'wsnt:GetMessagesResponse': */
class SOAP_CMAC _wsnt__GetMessagesResponse {
      public:
        /// Optional element 'wsnt:NotificationMessage' of XSD type 'wsnt:NotificationMessageHolderType'
        std::vector<wsnt__NotificationMessageHolderType *> NotificationMessage;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessagesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessagesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessagesResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetMessagesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessagesResponse); }
      public:
        /// Constructor with initializations
        _wsnt__GetMessagesResponse() : NotificationMessage(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__GetMessagesResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetMessagesResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:363 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (119)
/* complex XSD type 'wsnt:DestroyPullPoint': */
class SOAP_CMAC _wsnt__DestroyPullPoint {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPoint, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPoint); }
      public:
        /// Constructor with initializations
        _wsnt__DestroyPullPoint() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__DestroyPullPoint() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:366 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (120)
/* complex XSD type 'wsnt:DestroyPullPointResponse': */
class SOAP_CMAC _wsnt__DestroyPullPointResponse {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPointResponse); }
      public:
        /// Constructor with initializations
        _wsnt__DestroyPullPointResponse() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__DestroyPullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:369 */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (121)
/* complex XSD type 'wsnt:CreatePullPoint': */
class SOAP_CMAC _wsnt__CreatePullPoint {
      public:
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPoint, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPoint); }
      public:
        /// Constructor with initializations
        _wsnt__CreatePullPoint() : __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__CreatePullPoint() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:372 */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (122)
/* complex XSD type 'wsnt:CreatePullPointResponse': */
class SOAP_CMAC _wsnt__CreatePullPointResponse {
      public:
        /// Required element 'wsnt:PullPoint' of XSD type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType PullPoint;
        std::vector<char *> __any;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPointResponse); }
      public:
        /// Constructor with initializations
        _wsnt__CreatePullPointResponse() : PullPoint(), __any(), __anyAttribute(), soap() { }
        virtual ~_wsnt__CreatePullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:375 */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (123)
/* complex XSD type 'wsnt:Renew': */
class SOAP_CMAC _wsnt__Renew {
      public:
        /// Required nillable (xsi:nil when NULL) element 'wsnt:TerminationTime' of XSD type 'wsnt:AbsoluteOrRelativeTimeType'
        std::string *TerminationTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Renew
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Renew; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Renew, default initialized and not managed by a soap context
        virtual _wsnt__Renew *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Renew); }
      public:
        /// Constructor with initializations
        _wsnt__Renew() : TerminationTime(), __any(), soap() { }
        virtual ~_wsnt__Renew() { }
        /// Friend allocator used by soap_new__wsnt__Renew(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:378 */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (124)
/* complex XSD type 'wsnt:RenewResponse': */
class SOAP_CMAC _wsnt__RenewResponse {
      public:
        /// Required element 'wsnt:TerminationTime' of XSD type 'xsd:dateTime'
        time_t TerminationTime;
        /// Optional element 'wsnt:CurrentTime' of XSD type 'xsd:dateTime'
        time_t *CurrentTime;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__RenewResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__RenewResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__RenewResponse, default initialized and not managed by a soap context
        virtual _wsnt__RenewResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__RenewResponse); }
      public:
        /// Constructor with initializations
        _wsnt__RenewResponse() : TerminationTime(), CurrentTime(), __any(), soap() { }
        virtual ~_wsnt__RenewResponse() { }
        /// Friend allocator used by soap_new__wsnt__RenewResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:381 */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (125)
/* complex XSD type 'wsnt:Unsubscribe': */
class SOAP_CMAC _wsnt__Unsubscribe {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Unsubscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Unsubscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Unsubscribe, default initialized and not managed by a soap context
        virtual _wsnt__Unsubscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Unsubscribe); }
      public:
        /// Constructor with initializations
        _wsnt__Unsubscribe() : __any(), soap() { }
        virtual ~_wsnt__Unsubscribe() { }
        /// Friend allocator used by soap_new__wsnt__Unsubscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:384 */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (126)
/* complex XSD type 'wsnt:UnsubscribeResponse': */
class SOAP_CMAC _wsnt__UnsubscribeResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UnsubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UnsubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UnsubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__UnsubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UnsubscribeResponse); }
      public:
        /// Constructor with initializations
        _wsnt__UnsubscribeResponse() : __any(), soap() { }
        virtual ~_wsnt__UnsubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__UnsubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:387 */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (127)
/* complex XSD type 'wsnt:PauseSubscription': */
class SOAP_CMAC _wsnt__PauseSubscription {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscription, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscription); }
      public:
        /// Constructor with initializations
        _wsnt__PauseSubscription() : __any(), soap() { }
        virtual ~_wsnt__PauseSubscription() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:390 */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (128)
/* complex XSD type 'wsnt:PauseSubscriptionResponse': */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscriptionResponse); }
      public:
        /// Constructor with initializations
        _wsnt__PauseSubscriptionResponse() : __any(), soap() { }
        virtual ~_wsnt__PauseSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:393 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (129)
/* complex XSD type 'wsnt:ResumeSubscription': */
class SOAP_CMAC _wsnt__ResumeSubscription {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscription, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscription); }
      public:
        /// Constructor with initializations
        _wsnt__ResumeSubscription() : __any(), soap() { }
        virtual ~_wsnt__ResumeSubscription() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:396 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (130)
/* complex XSD type 'wsnt:ResumeSubscriptionResponse': */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscriptionResponse); }
      public:
        /// Constructor with initializations
        _wsnt__ResumeSubscriptionResponse() : __any(), soap() { }
        virtual ~_wsnt__ResumeSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:399 */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (131)
/* complex XSD type 'wstop:Documentation': */
class SOAP_CMAC wstop__Documentation {
      public:
        std::vector<char *> __any;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__Documentation
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__Documentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__Documentation, default initialized and not managed by a soap context
        virtual wstop__Documentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__Documentation); }
      public:
        /// Constructor with initializations
        wstop__Documentation() : __any(), __mixed(), soap() { }
        virtual ~wstop__Documentation() { }
        /// Friend allocator used by soap_new_wstop__Documentation(struct soap*, int)
        friend SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:402 */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (132)
/* Type wstop__ExtensibleDocumented is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:ExtensibleDocumented': */
class SOAP_CMAC wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:documentation' of XSD type 'wstop:Documentation'
        wstop__Documentation *documentation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__ExtensibleDocumented
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__ExtensibleDocumented; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__ExtensibleDocumented, default initialized and not managed by a soap context
        virtual wstop__ExtensibleDocumented *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__ExtensibleDocumented); }
      public:
        /// Constructor with initializations
        wstop__ExtensibleDocumented() : documentation(), __anyAttribute(), soap() { }
        virtual ~wstop__ExtensibleDocumented() { }
        /// Friend allocator used by soap_new_wstop__ExtensibleDocumented(struct soap*, int)
        friend SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:405 */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (133)
/* complex XSD type 'wstop:QueryExpressionType': */
class SOAP_CMAC wstop__QueryExpressionType {
      public:
        char *__any;
        /// required attribute 'Dialect' of XSD type 'xsd:anyURI'
        std::string Dialect;
        char *__mixed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_wstop__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__QueryExpressionType, default initialized and not managed by a soap context
        virtual wstop__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__QueryExpressionType); }
      public:
        /// Constructor with initializations
        wstop__QueryExpressionType() : __any(), Dialect(), __mixed(), soap() { }
        virtual ~wstop__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wstop__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:249 */
#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (81)
/* Type wsrfr__ResourceUnknownFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsrfr:ResourceUnknownFaultType': */
class SOAP_CMAC wsrfr__ResourceUnknownFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsrfr__ResourceUnknownFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfr__ResourceUnknownFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfr__ResourceUnknownFaultType, default initialized and not managed by a soap context
        virtual wsrfr__ResourceUnknownFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfr__ResourceUnknownFaultType); }
      public:
        /// Constructor with initializations
        wsrfr__ResourceUnknownFaultType() { }
        virtual ~wsrfr__ResourceUnknownFaultType() { }
        /// Friend allocator used by soap_new_wsrfr__ResourceUnknownFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfr__ResourceUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:252 */
#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (82)
/* Type wsrfr__ResourceUnavailableFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsrfr:ResourceUnavailableFaultType': */
class SOAP_CMAC wsrfr__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfr__ResourceUnavailableFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfr__ResourceUnavailableFaultType, default initialized and not managed by a soap context
        virtual wsrfr__ResourceUnavailableFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfr__ResourceUnavailableFaultType); }
      public:
        /// Constructor with initializations
        wsrfr__ResourceUnavailableFaultType() { }
        virtual ~wsrfr__ResourceUnavailableFaultType() { }
        /// Friend allocator used by soap_new_wsrfr__ResourceUnavailableFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnavailableFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:273 */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (89)
/* Type wsnt__SubscribeCreationFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:SubscribeCreationFailedFaultType': */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscribeCreationFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__SubscribeCreationFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscribeCreationFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__SubscribeCreationFailedFaultType() { }
        virtual ~wsnt__SubscribeCreationFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:276 */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (90)
/* Type wsnt__InvalidFilterFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidFilterFaultType': */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:UnknownFilter' of XSD type 'xsd:QName'
        std::vector<std::string> UnknownFilter;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidFilterFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidFilterFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidFilterFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidFilterFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidFilterFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidFilterFaultType() : UnknownFilter() { }
        virtual ~wsnt__InvalidFilterFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidFilterFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:279 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (91)
/* Type wsnt__TopicExpressionDialectUnknownFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:TopicExpressionDialectUnknownFaultType': */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionDialectUnknownFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionDialectUnknownFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionDialectUnknownFaultType); }
      public:
        /// Constructor with initializations
        wsnt__TopicExpressionDialectUnknownFaultType() { }
        virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:282 */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (92)
/* Type wsnt__InvalidTopicExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidTopicExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidTopicExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidTopicExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidTopicExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidTopicExpressionFaultType() { }
        virtual ~wsnt__InvalidTopicExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:285 */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (93)
/* Type wsnt__TopicNotSupportedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:TopicNotSupportedFaultType': */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicNotSupportedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__TopicNotSupportedFaultType() { }
        virtual ~wsnt__TopicNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:288 */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (94)
/* Type wsnt__MultipleTopicsSpecifiedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:MultipleTopicsSpecifiedFaultType': */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__MultipleTopicsSpecifiedFaultType, default initialized and not managed by a soap context
        virtual wsnt__MultipleTopicsSpecifiedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__MultipleTopicsSpecifiedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__MultipleTopicsSpecifiedFaultType() { }
        virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:291 */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (95)
/* Type wsnt__InvalidProducerPropertiesExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidProducerPropertiesExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidProducerPropertiesExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidProducerPropertiesExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidProducerPropertiesExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:294 */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (96)
/* Type wsnt__InvalidMessageContentExpressionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:InvalidMessageContentExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidMessageContentExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidMessageContentExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidMessageContentExpressionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__InvalidMessageContentExpressionFaultType() { }
        virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:297 */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (97)
/* Type wsnt__UnrecognizedPolicyRequestFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnrecognizedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Optional element 'wsnt:UnrecognizedPolicy' of XSD type 'xsd:QName'
        std::vector<std::string> UnrecognizedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnrecognizedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnrecognizedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnrecognizedPolicyRequestFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnrecognizedPolicyRequestFaultType() : UnrecognizedPolicy() { }
        virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:300 */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (98)
/* Type wsnt__UnsupportedPolicyRequestFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnsupportedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Optional element 'wsnt:UnsupportedPolicy' of XSD type 'xsd:QName'
        std::vector<std::string> UnsupportedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnsupportedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnsupportedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnsupportedPolicyRequestFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnsupportedPolicyRequestFaultType() : UnsupportedPolicy() { }
        virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:303 */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (99)
/* Type wsnt__NotifyMessageNotSupportedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:NotifyMessageNotSupportedFaultType': */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotifyMessageNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__NotifyMessageNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotifyMessageNotSupportedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__NotifyMessageNotSupportedFaultType() { }
        virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:306 */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (100)
/* Type wsnt__UnacceptableInitialTerminationTimeFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnacceptableInitialTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XSD type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XSD type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableInitialTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableInitialTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableInitialTerminationTimeFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnacceptableInitialTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:309 */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (101)
/* Type wsnt__NoCurrentMessageOnTopicFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:NoCurrentMessageOnTopicFaultType': */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NoCurrentMessageOnTopicFaultType, default initialized and not managed by a soap context
        virtual wsnt__NoCurrentMessageOnTopicFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NoCurrentMessageOnTopicFaultType); }
      public:
        /// Constructor with initializations
        wsnt__NoCurrentMessageOnTopicFaultType() { }
        virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:312 */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (102)
/* Type wsnt__UnableToGetMessagesFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToGetMessagesFaultType': */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToGetMessagesFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToGetMessagesFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToGetMessagesFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToGetMessagesFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToGetMessagesFaultType() { }
        virtual ~wsnt__UnableToGetMessagesFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToGetMessagesFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:315 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (103)
/* Type wsnt__UnableToDestroyPullPointFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToDestroyPullPointFaultType': */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroyPullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroyPullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroyPullPointFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToDestroyPullPointFaultType() { }
        virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:318 */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (104)
/* Type wsnt__UnableToCreatePullPointFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToCreatePullPointFaultType': */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToCreatePullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToCreatePullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToCreatePullPointFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToCreatePullPointFaultType() { }
        virtual ~wsnt__UnableToCreatePullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:321 */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (105)
/* Type wsnt__UnacceptableTerminationTimeFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnacceptableTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XSD type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XSD type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableTerminationTimeFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnacceptableTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:324 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (106)
/* Type wsnt__UnableToDestroySubscriptionFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:UnableToDestroySubscriptionFaultType': */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroySubscriptionFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroySubscriptionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroySubscriptionFaultType); }
      public:
        /// Constructor with initializations
        wsnt__UnableToDestroySubscriptionFaultType() { }
        virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:327 */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (107)
/* Type wsnt__PauseFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:PauseFailedFaultType': */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__PauseFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__PauseFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__PauseFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__PauseFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__PauseFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__PauseFailedFaultType() { }
        virtual ~wsnt__PauseFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__PauseFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:330 */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (108)
/* Type wsnt__ResumeFailedFaultType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wsnt:ResumeFailedFaultType': */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__ResumeFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__ResumeFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__ResumeFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__ResumeFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__ResumeFailedFaultType); }
      public:
        /// Constructor with initializations
        wsnt__ResumeFailedFaultType() { }
        virtual ~wsnt__ResumeFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__ResumeFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4172 */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (172)
/* complex XSD type 'wstop:TopicNamespaceType-Topic': */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic {
      public:
        /// Optional element 'wstop:documentation' of XSD type 'wstop:Documentation'
        wstop__Documentation *documentation;
        /// optional attribute '-anyAttribute' of XSD type 'xsd:anyType'
        char *__anyAttribute;
        /// Optional element 'wstop:MessagePattern' of XSD type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicType'
        std::vector<wstop__TopicType *> Topic;
        std::vector<char *> __any;
        /// required attribute 'name' of XSD type 'xsd:NCName'
        std::string name;
        /// optional attribute 'messageTypes' of XSD type 'xsd:QName'
        std::string *messageTypes;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
        /// optional attribute 'parent' of XSD type 'wstop:ConcreteTopicExpression'
        std::string *parent;
      public:
        /// Return unique type id SOAP_TYPE__wstop__TopicNamespaceType_Topic
        virtual long soap_type(void) const { return SOAP_TYPE__wstop__TopicNamespaceType_Topic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wstop__TopicNamespaceType_Topic, default initialized and not managed by a soap context
        virtual _wstop__TopicNamespaceType_Topic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wstop__TopicNamespaceType_Topic); }
      public:
        /// Constructor with initializations
        _wstop__TopicNamespaceType_Topic() : documentation(), __anyAttribute(), MessagePattern(), Topic(), __any(), name(), messageTypes(), final_((bool)0), parent() { }
        virtual ~_wstop__TopicNamespaceType_Topic() { }
        /// Friend allocator used by soap_new__wstop__TopicNamespaceType_Topic(struct soap*, int)
        friend SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:408 */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (134)
/* Type wstop__TopicNamespaceType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicNamespaceType': */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicNamespaceType-Topic'
        std::vector<_wstop__TopicNamespaceType_Topic> Topic;
        std::vector<char *> __any;
        /// optional attribute 'name' of XSD type 'xsd:NCName'
        std::string *name;
        /// required attribute 'targetNamespace' of XSD type 'xsd:anyURI'
        std::string targetNamespace;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicNamespaceType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicNamespaceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicNamespaceType, default initialized and not managed by a soap context
        virtual wstop__TopicNamespaceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicNamespaceType); }
      public:
        /// Constructor with initializations
        wstop__TopicNamespaceType() : Topic(), __any(), name(), targetNamespace(), final_((bool)0) { }
        virtual ~wstop__TopicNamespaceType() { }
        /// Friend allocator used by soap_new_wstop__TopicNamespaceType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:411 */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (135)
/* Type wstop__TopicType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicType': */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:MessagePattern' of XSD type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Optional element 'wstop:Topic' of XSD type 'wstop:TopicType'
        std::vector<wstop__TopicType *> Topic;
        std::vector<char *> __any;
        /// required attribute 'name' of XSD type 'xsd:NCName'
        std::string name;
        /// optional attribute 'messageTypes' of XSD type 'xsd:QName'
        std::string *messageTypes;
        /// optional attribute 'final' of XSD type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicType, default initialized and not managed by a soap context
        virtual wstop__TopicType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicType); }
      public:
        /// Constructor with initializations
        wstop__TopicType() : MessagePattern(), Topic(), __any(), name(), messageTypes(), final_((bool)0) { }
        virtual ~wstop__TopicType() { }
        /// Friend allocator used by soap_new_wstop__TopicType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:414 */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (136)
/* Type wstop__TopicSetType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'wstop:TopicSetType': */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented {
      public:
        std::vector<char *> __any;
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicSetType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicSetType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicSetType, default initialized and not managed by a soap context
        virtual wstop__TopicSetType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicSetType); }
      public:
        /// Constructor with initializations
        wstop__TopicSetType() : __any() { }
        virtual ~wstop__TopicSetType() { }
        /// Friend allocator used by soap_new_wstop__TopicSetType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:281 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (44)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'wsnt:InvalidFilterFault' of XSD type 'wsnt:InvalidFilterFaultType' */
        wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault;
        /** Optional element 'wsnt:InvalidMessageContentExpressionFault' of XSD type 'wsnt:InvalidMessageContentExpressionFaultType' */
        wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault;
        /** Optional element 'wsnt:InvalidProducerPropertiesExpressionFault' of XSD type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
        wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault;
        /** Optional element 'wsnt:InvalidTopicExpressionFault' of XSD type 'wsnt:InvalidTopicExpressionFaultType' */
        wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault;
        /** Optional element 'wsnt:MultipleTopicsSpecifiedFault' of XSD type 'wsnt:MultipleTopicsSpecifiedFaultType' */
        wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault;
        /** Optional element 'wsnt:NoCurrentMessageOnTopicFault' of XSD type 'wsnt:NoCurrentMessageOnTopicFaultType' */
        wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault;
        /** Optional element 'wsnt:NotifyMessageNotSupportedFault' of XSD type 'wsnt:NotifyMessageNotSupportedFaultType' */
        wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault;
        /** Optional element 'wsnt:PauseFailedFault' of XSD type 'wsnt:PauseFailedFaultType' */
        wsnt__PauseFailedFaultType *wsnt__PauseFailedFault;
        /** Optional element 'tev:PullMessagesFaultResponse' of XSD type 'tev:PullMessagesFaultResponse' */
        _tev__PullMessagesFaultResponse *tev__PullMessagesFaultResponse;
        /** Optional element 'wsrfr:ResourceUnknownFault' of XSD type 'wsrfr:ResourceUnknownFaultType' */
        wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault;
        /** Optional element 'wsnt:ResumeFailedFault' of XSD type 'wsnt:ResumeFailedFaultType' */
        wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault;
        /** Optional element 'wsnt:SubscribeCreationFailedFault' of XSD type 'wsnt:SubscribeCreationFailedFaultType' */
        wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault;
        /** Optional element 'wsnt:TopicExpressionDialectUnknownFault' of XSD type 'wsnt:TopicExpressionDialectUnknownFaultType' */
        wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault;
        /** Optional element 'wsnt:TopicNotSupportedFault' of XSD type 'wsnt:TopicNotSupportedFaultType' */
        wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault;
        /** Optional element 'wsnt:UnableToCreatePullPointFault' of XSD type 'wsnt:UnableToCreatePullPointFaultType' */
        wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault;
        /** Optional element 'wsnt:UnableToDestroyPullPointFault' of XSD type 'wsnt:UnableToDestroyPullPointFaultType' */
        wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault;
        /** Optional element 'wsnt:UnableToDestroySubscriptionFault' of XSD type 'wsnt:UnableToDestroySubscriptionFaultType' */
        wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault;
        /** Optional element 'wsnt:UnableToGetMessagesFault' of XSD type 'wsnt:UnableToGetMessagesFaultType' */
        wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault;
        /** Optional element 'wsnt:UnacceptableInitialTerminationTimeFault' of XSD type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
        wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault;
        /** Optional element 'wsnt:UnacceptableTerminationTimeFault' of XSD type 'wsnt:UnacceptableTerminationTimeFaultType' */
        wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault;
        /** Optional element 'wsnt:UnrecognizedPolicyRequestFault' of XSD type 'wsnt:UnrecognizedPolicyRequestFaultType' */
        wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault;
        /** Optional element 'wsnt:UnsupportedPolicyRequestFault' of XSD type 'wsnt:UnsupportedPolicyRequestFaultType' */
        wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : wsnt__InvalidFilterFault(), wsnt__InvalidMessageContentExpressionFault(), wsnt__InvalidProducerPropertiesExpressionFault(), wsnt__InvalidTopicExpressionFault(), wsnt__MultipleTopicsSpecifiedFault(), wsnt__NoCurrentMessageOnTopicFault(), wsnt__NotifyMessageNotSupportedFault(), wsnt__PauseFailedFault(), tev__PullMessagesFaultResponse(), wsrfr__ResourceUnknownFault(), wsnt__ResumeFailedFault(), wsnt__SubscribeCreationFailedFault(), wsnt__TopicExpressionDialectUnknownFault(), wsnt__TopicNotSupportedFault(), wsnt__UnableToCreatePullPointFault(), wsnt__UnableToDestroyPullPointFault(), wsnt__UnableToDestroySubscriptionFault(), wsnt__UnableToGetMessagesFault(), wsnt__UnacceptableInitialTerminationTimeFault(), wsnt__UnacceptableTerminationTimeFault(), wsnt__UnrecognizedPolicyRequestFault(), wsnt__UnsupportedPolicyRequestFault(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:4786 */
#ifndef SOAP_TYPE___tev__PullMessages
#define SOAP_TYPE___tev__PullMessages (249)
/* Wrapper: */
struct SOAP_CMAC __tev__PullMessages {
      public:
        /** Optional element 'tev:PullMessages' of XSD type 'tev:PullMessages' */
        _tev__PullMessages *tev__PullMessages;
      public:
        /** Return unique type id SOAP_TYPE___tev__PullMessages */
        long soap_type() const { return SOAP_TYPE___tev__PullMessages; }
        /** Constructor with member initializations */
        __tev__PullMessages() : tev__PullMessages() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__PullMessages * SOAP_FMAC2 soap_instantiate___tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4868 */
#ifndef SOAP_TYPE___tev__Seek
#define SOAP_TYPE___tev__Seek (253)
/* Wrapper: */
struct SOAP_CMAC __tev__Seek {
      public:
        /** Optional element 'tev:Seek' of XSD type 'tev:Seek' */
        _tev__Seek *tev__Seek;
      public:
        /** Return unique type id SOAP_TYPE___tev__Seek */
        long soap_type() const { return SOAP_TYPE___tev__Seek; }
        /** Constructor with member initializations */
        __tev__Seek() : tev__Seek() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Seek * SOAP_FMAC2 soap_instantiate___tev__Seek(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4951 */
#ifndef SOAP_TYPE___tev__SetSynchronizationPoint
#define SOAP_TYPE___tev__SetSynchronizationPoint (257)
/* Wrapper: */
struct SOAP_CMAC __tev__SetSynchronizationPoint {
      public:
        /** Optional element 'tev:SetSynchronizationPoint' of XSD type 'tev:SetSynchronizationPoint' */
        _tev__SetSynchronizationPoint *tev__SetSynchronizationPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__SetSynchronizationPoint */
        long soap_type() const { return SOAP_TYPE___tev__SetSynchronizationPoint; }
        /** Constructor with member initializations */
        __tev__SetSynchronizationPoint() : tev__SetSynchronizationPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5029 */
#ifndef SOAP_TYPE___tev__Unsubscribe
#define SOAP_TYPE___tev__Unsubscribe (261)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XSD type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe; }
        /** Constructor with member initializations */
        __tev__Unsubscribe() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5098 */
#ifndef SOAP_TYPE___tev__GetServiceCapabilities
#define SOAP_TYPE___tev__GetServiceCapabilities (265)
/* Wrapper: */
struct SOAP_CMAC __tev__GetServiceCapabilities {
      public:
        /** Optional element 'tev:GetServiceCapabilities' of XSD type 'tev:GetServiceCapabilities' */
        _tev__GetServiceCapabilities *tev__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tev__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tev__GetServiceCapabilities() : tev__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5208 */
#ifndef SOAP_TYPE___tev__CreatePullPointSubscription
#define SOAP_TYPE___tev__CreatePullPointSubscription (269)
/* Wrapper: */
struct SOAP_CMAC __tev__CreatePullPointSubscription {
      public:
        /** Optional element 'tev:CreatePullPointSubscription' of XSD type 'tev:CreatePullPointSubscription' */
        _tev__CreatePullPointSubscription *tev__CreatePullPointSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__CreatePullPointSubscription */
        long soap_type() const { return SOAP_TYPE___tev__CreatePullPointSubscription; }
        /** Constructor with member initializations */
        __tev__CreatePullPointSubscription() : tev__CreatePullPointSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate___tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5283 */
#ifndef SOAP_TYPE___tev__GetEventProperties
#define SOAP_TYPE___tev__GetEventProperties (273)
/* Wrapper: */
struct SOAP_CMAC __tev__GetEventProperties {
      public:
        /** Optional element 'tev:GetEventProperties' of XSD type 'tev:GetEventProperties' */
        _tev__GetEventProperties *tev__GetEventProperties;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetEventProperties */
        long soap_type() const { return SOAP_TYPE___tev__GetEventProperties; }
        /** Constructor with member initializations */
        __tev__GetEventProperties() : tev__GetEventProperties() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetEventProperties * SOAP_FMAC2 soap_instantiate___tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5356 */
#ifndef SOAP_TYPE___tev__Renew
#define SOAP_TYPE___tev__Renew (277)
/* Wrapper: */
struct SOAP_CMAC __tev__Renew {
      public:
        /** Optional element 'wsnt:Renew' of XSD type 'wsnt:Renew' */
        _wsnt__Renew *wsnt__Renew;
      public:
        /** Return unique type id SOAP_TYPE___tev__Renew */
        long soap_type() const { return SOAP_TYPE___tev__Renew; }
        /** Constructor with member initializations */
        __tev__Renew() : wsnt__Renew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Renew * SOAP_FMAC2 soap_instantiate___tev__Renew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5429 */
#ifndef SOAP_TYPE___tev__Unsubscribe_
#define SOAP_TYPE___tev__Unsubscribe_ (279)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe_ {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XSD type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe_ */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe_; }
        /** Constructor with member initializations */
        __tev__Unsubscribe_() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe_ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5532 */
#ifndef SOAP_TYPE___tev__Subscribe
#define SOAP_TYPE___tev__Subscribe (283)
/* Wrapper: */
struct SOAP_CMAC __tev__Subscribe {
      public:
        /** Optional element 'wsnt:Subscribe' of XSD type 'wsnt:Subscribe' */
        _wsnt__Subscribe *wsnt__Subscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Subscribe */
        long soap_type() const { return SOAP_TYPE___tev__Subscribe; }
        /** Constructor with member initializations */
        __tev__Subscribe() : wsnt__Subscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Subscribe * SOAP_FMAC2 soap_instantiate___tev__Subscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5617 */
#ifndef SOAP_TYPE___tev__GetCurrentMessage
#define SOAP_TYPE___tev__GetCurrentMessage (287)
/* Wrapper: */
struct SOAP_CMAC __tev__GetCurrentMessage {
      public:
        /** Optional element 'wsnt:GetCurrentMessage' of XSD type 'wsnt:GetCurrentMessage' */
        _wsnt__GetCurrentMessage *wsnt__GetCurrentMessage;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetCurrentMessage */
        long soap_type() const { return SOAP_TYPE___tev__GetCurrentMessage; }
        /** Constructor with member initializations */
        __tev__GetCurrentMessage() : wsnt__GetCurrentMessage() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetCurrentMessage * SOAP_FMAC2 soap_instantiate___tev__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5680 */
#ifndef SOAP_TYPE___tev__Notify
#define SOAP_TYPE___tev__Notify (290)
/* Wrapper: */
struct SOAP_CMAC __tev__Notify {
      public:
        /** Optional element 'wsnt:Notify' of XSD type 'wsnt:Notify' */
        _wsnt__Notify *wsnt__Notify;
      public:
        /** Return unique type id SOAP_TYPE___tev__Notify */
        long soap_type() const { return SOAP_TYPE___tev__Notify; }
        /** Constructor with member initializations */
        __tev__Notify() : wsnt__Notify() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Notify * SOAP_FMAC2 soap_instantiate___tev__Notify(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5753 */
#ifndef SOAP_TYPE___tev__GetMessages
#define SOAP_TYPE___tev__GetMessages (294)
/* Wrapper: */
struct SOAP_CMAC __tev__GetMessages {
      public:
        /** Optional element 'wsnt:GetMessages' of XSD type 'wsnt:GetMessages' */
        _wsnt__GetMessages *wsnt__GetMessages;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetMessages */
        long soap_type() const { return SOAP_TYPE___tev__GetMessages; }
        /** Constructor with member initializations */
        __tev__GetMessages() : wsnt__GetMessages() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetMessages * SOAP_FMAC2 soap_instantiate___tev__GetMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5826 */
#ifndef SOAP_TYPE___tev__DestroyPullPoint
#define SOAP_TYPE___tev__DestroyPullPoint (298)
/* Wrapper: */
struct SOAP_CMAC __tev__DestroyPullPoint {
      public:
        /** Optional element 'wsnt:DestroyPullPoint' of XSD type 'wsnt:DestroyPullPoint' */
        _wsnt__DestroyPullPoint *wsnt__DestroyPullPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__DestroyPullPoint */
        long soap_type() const { return SOAP_TYPE___tev__DestroyPullPoint; }
        /** Constructor with member initializations */
        __tev__DestroyPullPoint() : wsnt__DestroyPullPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__DestroyPullPoint * SOAP_FMAC2 soap_instantiate___tev__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5889 */
#ifndef SOAP_TYPE___tev__Notify_
#define SOAP_TYPE___tev__Notify_ (300)
/* Wrapper: */
struct SOAP_CMAC __tev__Notify_ {
      public:
        /** Optional element 'wsnt:Notify' of XSD type 'wsnt:Notify' */
        _wsnt__Notify *wsnt__Notify;
      public:
        /** Return unique type id SOAP_TYPE___tev__Notify_ */
        long soap_type() const { return SOAP_TYPE___tev__Notify_; }
        /** Constructor with member initializations */
        __tev__Notify_() : wsnt__Notify() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Notify_ * SOAP_FMAC2 soap_instantiate___tev__Notify_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5959 */
#ifndef SOAP_TYPE___tev__CreatePullPoint
#define SOAP_TYPE___tev__CreatePullPoint (304)
/* Wrapper: */
struct SOAP_CMAC __tev__CreatePullPoint {
      public:
        /** Optional element 'wsnt:CreatePullPoint' of XSD type 'wsnt:CreatePullPoint' */
        _wsnt__CreatePullPoint *wsnt__CreatePullPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__CreatePullPoint */
        long soap_type() const { return SOAP_TYPE___tev__CreatePullPoint; }
        /** Constructor with member initializations */
        __tev__CreatePullPoint() : wsnt__CreatePullPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__CreatePullPoint * SOAP_FMAC2 soap_instantiate___tev__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:6032 */
#ifndef SOAP_TYPE___tev__Renew_
#define SOAP_TYPE___tev__Renew_ (306)
/* Wrapper: */
struct SOAP_CMAC __tev__Renew_ {
      public:
        /** Optional element 'wsnt:Renew' of XSD type 'wsnt:Renew' */
        _wsnt__Renew *wsnt__Renew;
      public:
        /** Return unique type id SOAP_TYPE___tev__Renew_ */
        long soap_type() const { return SOAP_TYPE___tev__Renew_; }
        /** Constructor with member initializations */
        __tev__Renew_() : wsnt__Renew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Renew_ * SOAP_FMAC2 soap_instantiate___tev__Renew_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:6105 */
#ifndef SOAP_TYPE___tev__Unsubscribe__
#define SOAP_TYPE___tev__Unsubscribe__ (308)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe__ {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XSD type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe__ */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe__; }
        /** Constructor with member initializations */
        __tev__Unsubscribe__() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe__ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:6178 */
#ifndef SOAP_TYPE___tev__PauseSubscription
#define SOAP_TYPE___tev__PauseSubscription (312)
/* Wrapper: */
struct SOAP_CMAC __tev__PauseSubscription {
      public:
        /** Optional element 'wsnt:PauseSubscription' of XSD type 'wsnt:PauseSubscription' */
        _wsnt__PauseSubscription *wsnt__PauseSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__PauseSubscription */
        long soap_type() const { return SOAP_TYPE___tev__PauseSubscription; }
        /** Constructor with member initializations */
        __tev__PauseSubscription() : wsnt__PauseSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__PauseSubscription * SOAP_FMAC2 soap_instantiate___tev__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:6251 */
#ifndef SOAP_TYPE___tev__ResumeSubscription
#define SOAP_TYPE___tev__ResumeSubscription (316)
/* Wrapper: */
struct SOAP_CMAC __tev__ResumeSubscription {
      public:
        /** Optional element 'wsnt:ResumeSubscription' of XSD type 'wsnt:ResumeSubscription' */
        _wsnt__ResumeSubscription *wsnt__ResumeSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__ResumeSubscription */
        long soap_type() const { return SOAP_TYPE___tev__ResumeSubscription; }
        /** Constructor with member initializations */
        __tev__ResumeSubscription() : wsnt__ResumeSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__ResumeSubscription * SOAP_FMAC2 soap_instantiate___tev__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* wsa5.h:87 */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (13)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

/* wsa5.h:90 */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (14)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

/* wsa5.h:209 */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (21)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

/* wsa5.h:212 */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (22)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

/* wsa5.h:215 */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (23)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

/* wsa5.h:218 */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (24)
typedef char *_wsa5__MessageID;
#endif

/* wsa5.h:221 */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (25)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

/* wsa5.h:224 */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (26)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

/* wsa5.h:227 */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (27)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

/* wsa5.h:230 */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (28)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

/* wsa5.h:233 */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (29)
typedef char *_wsa5__To;
#endif

/* wsa5.h:236 */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (30)
typedef char *_wsa5__Action;
#endif

/* wsa5.h:239 */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (32)
typedef ULONG64 _wsa5__RetryAfter;
#endif

/* wsa5.h:242 */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (33)
typedef _QName _wsa5__ProblemHeaderQName;
#endif

/* wsa5.h:245 */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (34)
typedef char *_wsa5__ProblemIRI;
#endif

/* wsa5.h:248 */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (35)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

/* onvif.h:181 */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (61)
typedef std::string xsd__NCName;
#endif

/* onvif.h:184 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (62)
typedef std::string xsd__anyURI;
#endif

/* onvif.h:187 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (63)
typedef std::string xsd__nonNegativeInteger;
#endif

/* onvif.h:190 */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (64)
typedef std::string xsd__token;
#endif

/* onvif.h:193 */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (65)
typedef std::string _xml__lang;
#endif

/* onvif.h:246 */
#ifndef SOAP_TYPE__tev__ChangedOnly
#define SOAP_TYPE__tev__ChangedOnly (80)
typedef _XML _tev__ChangedOnly;
#endif

/* onvif.h:465 */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (137)
typedef std::string wsnt__AbsoluteOrRelativeTimeType;
#endif

/* onvif.h:505 */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (138)
typedef std::string wstop__FullTopicExpression;
#endif

/* onvif.h:514 */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (139)
typedef std::string wstop__ConcreteTopicExpression;
#endif

/* onvif.h:522 */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (140)
typedef xsd__QName wstop__SimpleTopicExpression;
#endif

/* onvif.h:4312 */
#ifndef SOAP_TYPE__tev__Capabilities
#define SOAP_TYPE__tev__Capabilities (180)
typedef tev__Capabilities _tev__Capabilities;
#endif

/* onvif.h:4363 */
#ifndef SOAP_TYPE__wsrfr__ResourceUnknownFault
#define SOAP_TYPE__wsrfr__ResourceUnknownFault (181)
typedef wsrfr__ResourceUnknownFaultType _wsrfr__ResourceUnknownFault;
#endif

/* onvif.h:4366 */
#ifndef SOAP_TYPE__wsrfr__ResourceUnavailableFault
#define SOAP_TYPE__wsrfr__ResourceUnavailableFault (182)
typedef wsrfr__ResourceUnavailableFaultType _wsrfr__ResourceUnavailableFault;
#endif

/* onvif.h:4385 */
#ifndef SOAP_TYPE__wsrfbf__BaseFault
#define SOAP_TYPE__wsrfbf__BaseFault (183)
typedef wsrfbf__BaseFaultType _wsrfbf__BaseFault;
#endif

/* onvif.h:4404 */
#ifndef SOAP_TYPE__wsnt__TopicExpression
#define SOAP_TYPE__wsnt__TopicExpression (184)
typedef wsnt__TopicExpressionType _wsnt__TopicExpression;
#endif

/* onvif.h:4407 */
#ifndef SOAP_TYPE__wsnt__FixedTopicSet
#define SOAP_TYPE__wsnt__FixedTopicSet (185)
typedef bool _wsnt__FixedTopicSet;
#endif

/* onvif.h:4410 */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect
#define SOAP_TYPE__wsnt__TopicExpressionDialect (186)
typedef xsd__anyURI _wsnt__TopicExpressionDialect;
#endif

/* onvif.h:4413 */
#ifndef SOAP_TYPE__wsnt__ConsumerReference
#define SOAP_TYPE__wsnt__ConsumerReference (187)
typedef struct wsa5__EndpointReferenceType _wsnt__ConsumerReference;
#endif

/* onvif.h:4416 */
#ifndef SOAP_TYPE__wsnt__Filter
#define SOAP_TYPE__wsnt__Filter (188)
typedef wsnt__FilterType _wsnt__Filter;
#endif

/* onvif.h:4419 */
#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy
#define SOAP_TYPE__wsnt__SubscriptionPolicy (189)
typedef wsnt__SubscriptionPolicyType _wsnt__SubscriptionPolicy;
#endif

/* onvif.h:4422 */
#ifndef SOAP_TYPE__wsnt__CreationTime
#define SOAP_TYPE__wsnt__CreationTime (190)
typedef time_t _wsnt__CreationTime;
#endif

/* onvif.h:4425 */
#ifndef SOAP_TYPE__wsnt__SubscriptionReference
#define SOAP_TYPE__wsnt__SubscriptionReference (191)
typedef struct wsa5__EndpointReferenceType _wsnt__SubscriptionReference;
#endif

/* onvif.h:4428 */
#ifndef SOAP_TYPE__wsnt__Topic
#define SOAP_TYPE__wsnt__Topic (192)
typedef wsnt__TopicExpressionType _wsnt__Topic;
#endif

/* onvif.h:4431 */
#ifndef SOAP_TYPE__wsnt__ProducerReference
#define SOAP_TYPE__wsnt__ProducerReference (193)
typedef struct wsa5__EndpointReferenceType _wsnt__ProducerReference;
#endif

/* onvif.h:4434 */
#ifndef SOAP_TYPE__wsnt__NotificationMessage
#define SOAP_TYPE__wsnt__NotificationMessage (194)
typedef wsnt__NotificationMessageHolderType _wsnt__NotificationMessage;
#endif

/* onvif.h:4437 */
#ifndef SOAP_TYPE__wsnt__CurrentTime
#define SOAP_TYPE__wsnt__CurrentTime (195)
typedef time_t _wsnt__CurrentTime;
#endif

/* onvif.h:4440 */
#ifndef SOAP_TYPE__wsnt__TerminationTime
#define SOAP_TYPE__wsnt__TerminationTime (196)
typedef time_t _wsnt__TerminationTime;
#endif

/* onvif.h:4443 */
#ifndef SOAP_TYPE__wsnt__ProducerProperties
#define SOAP_TYPE__wsnt__ProducerProperties (197)
typedef wsnt__QueryExpressionType _wsnt__ProducerProperties;
#endif

/* onvif.h:4446 */
#ifndef SOAP_TYPE__wsnt__MessageContent
#define SOAP_TYPE__wsnt__MessageContent (198)
typedef wsnt__QueryExpressionType _wsnt__MessageContent;
#endif

/* onvif.h:4449 */
#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault (199)
typedef wsnt__SubscribeCreationFailedFaultType _wsnt__SubscribeCreationFailedFault;
#endif

/* onvif.h:4452 */
#ifndef SOAP_TYPE__wsnt__InvalidFilterFault
#define SOAP_TYPE__wsnt__InvalidFilterFault (200)
typedef wsnt__InvalidFilterFaultType _wsnt__InvalidFilterFault;
#endif

/* onvif.h:4455 */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault (201)
typedef wsnt__TopicExpressionDialectUnknownFaultType _wsnt__TopicExpressionDialectUnknownFault;
#endif

/* onvif.h:4458 */
#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault (202)
typedef wsnt__InvalidTopicExpressionFaultType _wsnt__InvalidTopicExpressionFault;
#endif

/* onvif.h:4461 */
#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault
#define SOAP_TYPE__wsnt__TopicNotSupportedFault (203)
typedef wsnt__TopicNotSupportedFaultType _wsnt__TopicNotSupportedFault;
#endif

/* onvif.h:4464 */
#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault (204)
typedef wsnt__MultipleTopicsSpecifiedFaultType _wsnt__MultipleTopicsSpecifiedFault;
#endif

/* onvif.h:4467 */
#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault (205)
typedef wsnt__InvalidProducerPropertiesExpressionFaultType _wsnt__InvalidProducerPropertiesExpressionFault;
#endif

/* onvif.h:4470 */
#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault (206)
typedef wsnt__InvalidMessageContentExpressionFaultType _wsnt__InvalidMessageContentExpressionFault;
#endif

/* onvif.h:4473 */
#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault (207)
typedef wsnt__UnrecognizedPolicyRequestFaultType _wsnt__UnrecognizedPolicyRequestFault;
#endif

/* onvif.h:4476 */
#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault (208)
typedef wsnt__UnsupportedPolicyRequestFaultType _wsnt__UnsupportedPolicyRequestFault;
#endif

/* onvif.h:4479 */
#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault (209)
typedef wsnt__NotifyMessageNotSupportedFaultType _wsnt__NotifyMessageNotSupportedFault;
#endif

/* onvif.h:4482 */
#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault (210)
typedef wsnt__UnacceptableInitialTerminationTimeFaultType _wsnt__UnacceptableInitialTerminationTimeFault;
#endif

/* onvif.h:4485 */
#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault (211)
typedef wsnt__NoCurrentMessageOnTopicFaultType _wsnt__NoCurrentMessageOnTopicFault;
#endif

/* onvif.h:4488 */
#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault (212)
typedef wsnt__UnableToGetMessagesFaultType _wsnt__UnableToGetMessagesFault;
#endif

/* onvif.h:4491 */
#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault (213)
typedef wsnt__UnableToDestroyPullPointFaultType _wsnt__UnableToDestroyPullPointFault;
#endif

/* onvif.h:4494 */
#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault (214)
typedef wsnt__UnableToCreatePullPointFaultType _wsnt__UnableToCreatePullPointFault;
#endif

/* onvif.h:4497 */
#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault (215)
typedef wsnt__UnacceptableTerminationTimeFaultType _wsnt__UnacceptableTerminationTimeFault;
#endif

/* onvif.h:4500 */
#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault (216)
typedef wsnt__UnableToDestroySubscriptionFaultType _wsnt__UnableToDestroySubscriptionFault;
#endif

/* onvif.h:4503 */
#ifndef SOAP_TYPE__wsnt__PauseFailedFault
#define SOAP_TYPE__wsnt__PauseFailedFault (217)
typedef wsnt__PauseFailedFaultType _wsnt__PauseFailedFault;
#endif

/* onvif.h:4506 */
#ifndef SOAP_TYPE__wsnt__ResumeFailedFault
#define SOAP_TYPE__wsnt__ResumeFailedFault (218)
typedef wsnt__ResumeFailedFaultType _wsnt__ResumeFailedFault;
#endif

/* onvif.h:4525 */
#ifndef SOAP_TYPE__wstop__TopicNamespace
#define SOAP_TYPE__wstop__TopicNamespace (219)
typedef wstop__TopicNamespaceType _wstop__TopicNamespace;
#endif

/* onvif.h:4528 */
#ifndef SOAP_TYPE__wstop__TopicSet
#define SOAP_TYPE__wstop__TopicSet (220)
typedef wstop__TopicSetType _wstop__TopicSet;
#endif

/* onvif.h:4539 */
#ifndef SOAP_TYPE__wstop__topicNamespaceLocation
#define SOAP_TYPE__wstop__topicNamespaceLocation (221)
typedef xsd__anyURI _wstop__topicNamespaceLocation;
#endif

/* onvif.h:4542 */
#ifndef SOAP_TYPE__wstop__topic
#define SOAP_TYPE__wstop__topic (222)
typedef bool _wstop__topic;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* xsd__duration has binding name 'xsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (60)
#endif

/* _wsa5__RetryAfter has binding name '_wsa5__RetryAfter' for type '' */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (32)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (31)
#endif

/* _wsnt__TerminationTime has binding name '_wsnt__TerminationTime' for type '' */
#ifndef SOAP_TYPE__wsnt__TerminationTime
#define SOAP_TYPE__wsnt__TerminationTime (196)
#endif

/* _wsnt__CurrentTime has binding name '_wsnt__CurrentTime' for type '' */
#ifndef SOAP_TYPE__wsnt__CurrentTime
#define SOAP_TYPE__wsnt__CurrentTime (195)
#endif

/* _wsnt__CreationTime has binding name '_wsnt__CreationTime' for type '' */
#ifndef SOAP_TYPE__wsnt__CreationTime
#define SOAP_TYPE__wsnt__CreationTime (190)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (149)
#endif

/* _wstop__topic has binding name '_wstop__topic' for type '' */
#ifndef SOAP_TYPE__wstop__topic
#define SOAP_TYPE__wstop__topic (222)
#endif

/* _wsnt__FixedTopicSet has binding name '_wsnt__FixedTopicSet' for type '' */
#ifndef SOAP_TYPE__wsnt__FixedTopicSet
#define SOAP_TYPE__wsnt__FixedTopicSet (185)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (142)
#endif

/* enum _wsa5__IsReferenceParameter has binding name '_wsa5__IsReferenceParameter' for type 'wsa5:IsReferenceParameter' */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (36)
#endif

/* enum wsa5__FaultCodesType has binding name 'wsa5__FaultCodesType' for type 'wsa5:FaultCodesType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (16)
#endif

/* enum wsa5__RelationshipType has binding name 'wsa5__RelationshipType' for type 'wsa5:RelationshipType' */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (15)
#endif

/* _wstop__topicNamespaceLocation has binding name '_wstop__topicNamespaceLocation' for type '' */
#ifndef SOAP_TYPE__wstop__topicNamespaceLocation
#define SOAP_TYPE__wstop__topicNamespaceLocation (221)
#endif

/* _wstop__TopicSet has binding name '_wstop__TopicSet' for type '' */
#ifndef SOAP_TYPE__wstop__TopicSet
#define SOAP_TYPE__wstop__TopicSet (220)
#endif

/* _wstop__TopicNamespace has binding name '_wstop__TopicNamespace' for type '' */
#ifndef SOAP_TYPE__wstop__TopicNamespace
#define SOAP_TYPE__wstop__TopicNamespace (219)
#endif

/* _wsnt__ResumeFailedFault has binding name '_wsnt__ResumeFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeFailedFault
#define SOAP_TYPE__wsnt__ResumeFailedFault (218)
#endif

/* _wsnt__PauseFailedFault has binding name '_wsnt__PauseFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseFailedFault
#define SOAP_TYPE__wsnt__PauseFailedFault (217)
#endif

/* _wsnt__UnableToDestroySubscriptionFault has binding name '_wsnt__UnableToDestroySubscriptionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault (216)
#endif

/* _wsnt__UnacceptableTerminationTimeFault has binding name '_wsnt__UnacceptableTerminationTimeFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault (215)
#endif

/* _wsnt__UnableToCreatePullPointFault has binding name '_wsnt__UnableToCreatePullPointFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault (214)
#endif

/* _wsnt__UnableToDestroyPullPointFault has binding name '_wsnt__UnableToDestroyPullPointFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault (213)
#endif

/* _wsnt__UnableToGetMessagesFault has binding name '_wsnt__UnableToGetMessagesFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault (212)
#endif

/* _wsnt__NoCurrentMessageOnTopicFault has binding name '_wsnt__NoCurrentMessageOnTopicFault' for type '' */
#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault (211)
#endif

/* _wsnt__UnacceptableInitialTerminationTimeFault has binding name '_wsnt__UnacceptableInitialTerminationTimeFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault (210)
#endif

/* _wsnt__NotifyMessageNotSupportedFault has binding name '_wsnt__NotifyMessageNotSupportedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault (209)
#endif

/* _wsnt__UnsupportedPolicyRequestFault has binding name '_wsnt__UnsupportedPolicyRequestFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault (208)
#endif

/* _wsnt__UnrecognizedPolicyRequestFault has binding name '_wsnt__UnrecognizedPolicyRequestFault' for type '' */
#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault (207)
#endif

/* _wsnt__InvalidMessageContentExpressionFault has binding name '_wsnt__InvalidMessageContentExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault (206)
#endif

/* _wsnt__InvalidProducerPropertiesExpressionFault has binding name '_wsnt__InvalidProducerPropertiesExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault (205)
#endif

/* _wsnt__MultipleTopicsSpecifiedFault has binding name '_wsnt__MultipleTopicsSpecifiedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault (204)
#endif

/* _wsnt__TopicNotSupportedFault has binding name '_wsnt__TopicNotSupportedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault
#define SOAP_TYPE__wsnt__TopicNotSupportedFault (203)
#endif

/* _wsnt__InvalidTopicExpressionFault has binding name '_wsnt__InvalidTopicExpressionFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault (202)
#endif

/* _wsnt__TopicExpressionDialectUnknownFault has binding name '_wsnt__TopicExpressionDialectUnknownFault' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault (201)
#endif

/* _wsnt__InvalidFilterFault has binding name '_wsnt__InvalidFilterFault' for type '' */
#ifndef SOAP_TYPE__wsnt__InvalidFilterFault
#define SOAP_TYPE__wsnt__InvalidFilterFault (200)
#endif

/* _wsnt__SubscribeCreationFailedFault has binding name '_wsnt__SubscribeCreationFailedFault' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault (199)
#endif

/* _wsnt__MessageContent has binding name '_wsnt__MessageContent' for type '' */
#ifndef SOAP_TYPE__wsnt__MessageContent
#define SOAP_TYPE__wsnt__MessageContent (198)
#endif

/* _wsnt__ProducerProperties has binding name '_wsnt__ProducerProperties' for type '' */
#ifndef SOAP_TYPE__wsnt__ProducerProperties
#define SOAP_TYPE__wsnt__ProducerProperties (197)
#endif

/* _wsnt__NotificationMessage has binding name '_wsnt__NotificationMessage' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationMessage
#define SOAP_TYPE__wsnt__NotificationMessage (194)
#endif

/* _wsnt__Topic has binding name '_wsnt__Topic' for type '' */
#ifndef SOAP_TYPE__wsnt__Topic
#define SOAP_TYPE__wsnt__Topic (192)
#endif

/* _wsnt__SubscriptionPolicy has binding name '_wsnt__SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy
#define SOAP_TYPE__wsnt__SubscriptionPolicy (189)
#endif

/* _wsnt__Filter has binding name '_wsnt__Filter' for type '' */
#ifndef SOAP_TYPE__wsnt__Filter
#define SOAP_TYPE__wsnt__Filter (188)
#endif

/* _wsnt__TopicExpressionDialect has binding name '_wsnt__TopicExpressionDialect' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect
#define SOAP_TYPE__wsnt__TopicExpressionDialect (186)
#endif

/* _wsnt__TopicExpression has binding name '_wsnt__TopicExpression' for type '' */
#ifndef SOAP_TYPE__wsnt__TopicExpression
#define SOAP_TYPE__wsnt__TopicExpression (184)
#endif

/* _wsrfbf__BaseFault has binding name '_wsrfbf__BaseFault' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFault
#define SOAP_TYPE__wsrfbf__BaseFault (183)
#endif

/* _wsrfr__ResourceUnavailableFault has binding name '_wsrfr__ResourceUnavailableFault' for type '' */
#ifndef SOAP_TYPE__wsrfr__ResourceUnavailableFault
#define SOAP_TYPE__wsrfr__ResourceUnavailableFault (182)
#endif

/* _wsrfr__ResourceUnknownFault has binding name '_wsrfr__ResourceUnknownFault' for type '' */
#ifndef SOAP_TYPE__wsrfr__ResourceUnknownFault
#define SOAP_TYPE__wsrfr__ResourceUnknownFault (181)
#endif

/* _tev__Capabilities has binding name '_tev__Capabilities' for type '' */
#ifndef SOAP_TYPE__tev__Capabilities
#define SOAP_TYPE__tev__Capabilities (180)
#endif

/* _wstop__TopicNamespaceType_Topic has binding name '_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (172)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy has binding name '_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (167)
#endif

/* _wsnt__NotificationMessageHolderType_Message has binding name '_wsnt__NotificationMessageHolderType_Message' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (163)
#endif

/* _wsrfbf__BaseFaultType_FaultCause has binding name '_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (160)
#endif

/* _wsrfbf__BaseFaultType_Description has binding name '_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (157)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode has binding name '_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (155)
#endif

/* _tev__CreatePullPointSubscription_SubscriptionPolicy has binding name '_tev__CreatePullPointSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (147)
#endif

/* wstop__SimpleTopicExpression has binding name 'wstop__SimpleTopicExpression' for type 'xsd:QName' */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (140)
#endif

/* wstop__ConcreteTopicExpression has binding name 'wstop__ConcreteTopicExpression' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (139)
#endif

/* wstop__FullTopicExpression has binding name 'wstop__FullTopicExpression' for type 'wstop:FullTopicExpression' */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (138)
#endif

/* wsnt__AbsoluteOrRelativeTimeType has binding name 'wsnt__AbsoluteOrRelativeTimeType' for type 'wsnt:AbsoluteOrRelativeTimeType' */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (137)
#endif

/* wstop__TopicSetType has binding name 'wstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (136)
#endif

/* wstop__TopicType has binding name 'wstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (135)
#endif

/* wstop__TopicNamespaceType has binding name 'wstop__TopicNamespaceType' for type 'wstop:TopicNamespaceType' */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (134)
#endif

/* wstop__QueryExpressionType has binding name 'wstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (133)
#endif

/* wstop__ExtensibleDocumented has binding name 'wstop__ExtensibleDocumented' for type 'wstop:ExtensibleDocumented' */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (132)
#endif

/* wstop__Documentation has binding name 'wstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (131)
#endif

/* _wsnt__ResumeSubscriptionResponse has binding name '_wsnt__ResumeSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (130)
#endif

/* _wsnt__ResumeSubscription has binding name '_wsnt__ResumeSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (129)
#endif

/* _wsnt__PauseSubscriptionResponse has binding name '_wsnt__PauseSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (128)
#endif

/* _wsnt__PauseSubscription has binding name '_wsnt__PauseSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (127)
#endif

/* _wsnt__UnsubscribeResponse has binding name '_wsnt__UnsubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (126)
#endif

/* _wsnt__Unsubscribe has binding name '_wsnt__Unsubscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (125)
#endif

/* _wsnt__RenewResponse has binding name '_wsnt__RenewResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (124)
#endif

/* _wsnt__Renew has binding name '_wsnt__Renew' for type '' */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (123)
#endif

/* _wsnt__CreatePullPointResponse has binding name '_wsnt__CreatePullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (122)
#endif

/* _wsnt__CreatePullPoint has binding name '_wsnt__CreatePullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (121)
#endif

/* _wsnt__DestroyPullPointResponse has binding name '_wsnt__DestroyPullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (120)
#endif

/* _wsnt__DestroyPullPoint has binding name '_wsnt__DestroyPullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (119)
#endif

/* _wsnt__GetMessagesResponse has binding name '_wsnt__GetMessagesResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (118)
#endif

/* _wsnt__GetMessages has binding name '_wsnt__GetMessages' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (117)
#endif

/* _wsnt__GetCurrentMessageResponse has binding name '_wsnt__GetCurrentMessageResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (116)
#endif

/* _wsnt__GetCurrentMessage has binding name '_wsnt__GetCurrentMessage' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (115)
#endif

/* _wsnt__SubscribeResponse has binding name '_wsnt__SubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (114)
#endif

/* _wsnt__Subscribe has binding name '_wsnt__Subscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (113)
#endif

/* _wsnt__UseRaw has binding name '_wsnt__UseRaw' for type '' */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (112)
#endif

/* _wsnt__Notify has binding name '_wsnt__Notify' for type '' */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (111)
#endif

/* _wsnt__SubscriptionManagerRP has binding name '_wsnt__SubscriptionManagerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (110)
#endif

/* _wsnt__NotificationProducerRP has binding name '_wsnt__NotificationProducerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (109)
#endif

/* wsnt__ResumeFailedFaultType has binding name 'wsnt__ResumeFailedFaultType' for type 'wsnt:ResumeFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (108)
#endif

/* wsnt__PauseFailedFaultType has binding name 'wsnt__PauseFailedFaultType' for type 'wsnt:PauseFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (107)
#endif

/* wsnt__UnableToDestroySubscriptionFaultType has binding name 'wsnt__UnableToDestroySubscriptionFaultType' for type 'wsnt:UnableToDestroySubscriptionFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (106)
#endif

/* wsnt__UnacceptableTerminationTimeFaultType has binding name 'wsnt__UnacceptableTerminationTimeFaultType' for type 'wsnt:UnacceptableTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (105)
#endif

/* wsnt__UnableToCreatePullPointFaultType has binding name 'wsnt__UnableToCreatePullPointFaultType' for type 'wsnt:UnableToCreatePullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (104)
#endif

/* wsnt__UnableToDestroyPullPointFaultType has binding name 'wsnt__UnableToDestroyPullPointFaultType' for type 'wsnt:UnableToDestroyPullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (103)
#endif

/* wsnt__UnableToGetMessagesFaultType has binding name 'wsnt__UnableToGetMessagesFaultType' for type 'wsnt:UnableToGetMessagesFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (102)
#endif

/* wsnt__NoCurrentMessageOnTopicFaultType has binding name 'wsnt__NoCurrentMessageOnTopicFaultType' for type 'wsnt:NoCurrentMessageOnTopicFaultType' */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (101)
#endif

/* wsnt__UnacceptableInitialTerminationTimeFaultType has binding name 'wsnt__UnacceptableInitialTerminationTimeFaultType' for type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (100)
#endif

/* wsnt__NotifyMessageNotSupportedFaultType has binding name 'wsnt__NotifyMessageNotSupportedFaultType' for type 'wsnt:NotifyMessageNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (99)
#endif

/* wsnt__UnsupportedPolicyRequestFaultType has binding name 'wsnt__UnsupportedPolicyRequestFaultType' for type 'wsnt:UnsupportedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (98)
#endif

/* wsnt__UnrecognizedPolicyRequestFaultType has binding name 'wsnt__UnrecognizedPolicyRequestFaultType' for type 'wsnt:UnrecognizedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (97)
#endif

/* wsnt__InvalidMessageContentExpressionFaultType has binding name 'wsnt__InvalidMessageContentExpressionFaultType' for type 'wsnt:InvalidMessageContentExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (96)
#endif

/* wsnt__InvalidProducerPropertiesExpressionFaultType has binding name 'wsnt__InvalidProducerPropertiesExpressionFaultType' for type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (95)
#endif

/* wsnt__MultipleTopicsSpecifiedFaultType has binding name 'wsnt__MultipleTopicsSpecifiedFaultType' for type 'wsnt:MultipleTopicsSpecifiedFaultType' */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (94)
#endif

/* wsnt__TopicNotSupportedFaultType has binding name 'wsnt__TopicNotSupportedFaultType' for type 'wsnt:TopicNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (93)
#endif

/* wsnt__InvalidTopicExpressionFaultType has binding name 'wsnt__InvalidTopicExpressionFaultType' for type 'wsnt:InvalidTopicExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (92)
#endif

/* wsnt__TopicExpressionDialectUnknownFaultType has binding name 'wsnt__TopicExpressionDialectUnknownFaultType' for type 'wsnt:TopicExpressionDialectUnknownFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (91)
#endif

/* wsnt__InvalidFilterFaultType has binding name 'wsnt__InvalidFilterFaultType' for type 'wsnt:InvalidFilterFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (90)
#endif

/* wsnt__SubscribeCreationFailedFaultType has binding name 'wsnt__SubscribeCreationFailedFaultType' for type 'wsnt:SubscribeCreationFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (89)
#endif

/* wsnt__NotificationMessageHolderType has binding name 'wsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (88)
#endif

/* wsnt__SubscriptionPolicyType has binding name 'wsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (87)
#endif

/* wsnt__FilterType has binding name 'wsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (86)
#endif

/* wsnt__TopicExpressionType has binding name 'wsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (85)
#endif

/* wsnt__QueryExpressionType has binding name 'wsnt__QueryExpressionType' for type 'wsnt:QueryExpressionType' */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (84)
#endif

/* wsrfbf__BaseFaultType has binding name 'wsrfbf__BaseFaultType' for type 'wsrfbf:BaseFaultType' */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (83)
#endif

/* wsrfr__ResourceUnavailableFaultType has binding name 'wsrfr__ResourceUnavailableFaultType' for type 'wsrfr:ResourceUnavailableFaultType' */
#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (82)
#endif

/* wsrfr__ResourceUnknownFaultType has binding name 'wsrfr__ResourceUnknownFaultType' for type 'wsrfr:ResourceUnknownFaultType' */
#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (81)
#endif

/* _tev__GetEventPropertiesResponse has binding name '_tev__GetEventPropertiesResponse' for type '' */
#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (79)
#endif

/* _tev__GetEventProperties has binding name '_tev__GetEventProperties' for type '' */
#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (78)
#endif

/* _tev__SetSynchronizationPointResponse has binding name '_tev__SetSynchronizationPointResponse' for type '' */
#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (77)
#endif

/* _tev__SetSynchronizationPoint has binding name '_tev__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (76)
#endif

/* _tev__SeekResponse has binding name '_tev__SeekResponse' for type '' */
#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (75)
#endif

/* _tev__Seek has binding name '_tev__Seek' for type '' */
#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (74)
#endif

/* _tev__PullMessagesFaultResponse has binding name '_tev__PullMessagesFaultResponse' for type '' */
#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (73)
#endif

/* _tev__PullMessagesResponse has binding name '_tev__PullMessagesResponse' for type '' */
#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (72)
#endif

/* _tev__PullMessages has binding name '_tev__PullMessages' for type '' */
#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (71)
#endif

/* _tev__CreatePullPointSubscriptionResponse has binding name '_tev__CreatePullPointSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (70)
#endif

/* _tev__CreatePullPointSubscription has binding name '_tev__CreatePullPointSubscription' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (69)
#endif

/* _tev__GetServiceCapabilitiesResponse has binding name '_tev__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (68)
#endif

/* _tev__GetServiceCapabilities has binding name '_tev__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (67)
#endif

/* tev__Capabilities has binding name 'tev__Capabilities' for type 'tev:Capabilities' */
#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (66)
#endif

/* _xml__lang has binding name '_xml__lang' for type '' */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (65)
#endif

/* xsd__token has binding name 'xsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (64)
#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (63)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (62)
#endif

/* xsd__NCName has binding name 'xsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (61)
#endif

/* xsd__QName has binding name 'xsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (56)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (55)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (53)
#endif

/* _wsnt__ProducerReference has binding name '_wsnt__ProducerReference' for type '' */
#ifndef SOAP_TYPE__wsnt__ProducerReference
#define SOAP_TYPE__wsnt__ProducerReference (193)
#endif

/* _wsnt__SubscriptionReference has binding name '_wsnt__SubscriptionReference' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionReference
#define SOAP_TYPE__wsnt__SubscriptionReference (191)
#endif

/* _wsnt__ConsumerReference has binding name '_wsnt__ConsumerReference' for type '' */
#ifndef SOAP_TYPE__wsnt__ConsumerReference
#define SOAP_TYPE__wsnt__ConsumerReference (187)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (48)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (46)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (44)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (38)
#endif

/* struct chan__ChannelInstanceType has binding name 'chan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (37)
#endif

/* _wsa5__ProblemAction has binding name '_wsa5__ProblemAction' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (35)
#endif

/* _wsa5__FaultTo has binding name '_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (28)
#endif

/* _wsa5__From has binding name '_wsa5__From' for type '' */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (27)
#endif

/* _wsa5__ReplyTo has binding name '_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (26)
#endif

/* _wsa5__RelatesTo has binding name '_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (25)
#endif

/* _wsa5__Metadata has binding name '_wsa5__Metadata' for type '' */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (23)
#endif

/* _wsa5__ReferenceParameters has binding name '_wsa5__ReferenceParameters' for type '' */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (22)
#endif

/* _wsa5__EndpointReference has binding name '_wsa5__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (21)
#endif

/* struct wsa5__ProblemActionType has binding name 'wsa5__ProblemActionType' for type 'wsa5:ProblemActionType' */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (12)
#endif

/* struct wsa5__RelatesToType has binding name 'wsa5__RelatesToType' for type 'wsa5:RelatesToType' */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (11)
#endif

/* struct wsa5__MetadataType has binding name 'wsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (10)
#endif

/* struct wsa5__ReferenceParametersType has binding name 'wsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (9)
#endif

/* struct wsa5__EndpointReferenceType has binding name 'wsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (8)
#endif

/* _wsnt__ResumeSubscription * has binding name 'PointerTo_wsnt__ResumeSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__ResumeSubscription
#define SOAP_TYPE_PointerTo_wsnt__ResumeSubscription (313)
#endif

/* _wsnt__PauseSubscription * has binding name 'PointerTo_wsnt__PauseSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__PauseSubscription
#define SOAP_TYPE_PointerTo_wsnt__PauseSubscription (309)
#endif

/* _wsnt__CreatePullPoint * has binding name 'PointerTo_wsnt__CreatePullPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__CreatePullPoint
#define SOAP_TYPE_PointerTo_wsnt__CreatePullPoint (301)
#endif

/* _wsnt__DestroyPullPoint * has binding name 'PointerTo_wsnt__DestroyPullPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint
#define SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint (295)
#endif

/* _wsnt__GetMessages * has binding name 'PointerTo_wsnt__GetMessages' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__GetMessages
#define SOAP_TYPE_PointerTo_wsnt__GetMessages (291)
#endif

/* _wsnt__Notify * has binding name 'PointerTo_wsnt__Notify' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Notify
#define SOAP_TYPE_PointerTo_wsnt__Notify (288)
#endif

/* _wsnt__GetCurrentMessage * has binding name 'PointerTo_wsnt__GetCurrentMessage' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage
#define SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage (284)
#endif

/* _wsnt__Subscribe * has binding name 'PointerTo_wsnt__Subscribe' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe
#define SOAP_TYPE_PointerTo_wsnt__Subscribe (280)
#endif

/* _wsnt__Renew * has binding name 'PointerTo_wsnt__Renew' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Renew
#define SOAP_TYPE_PointerTo_wsnt__Renew (274)
#endif

/* _tev__GetEventProperties * has binding name 'PointerTo_tev__GetEventProperties' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__GetEventProperties
#define SOAP_TYPE_PointerTo_tev__GetEventProperties (270)
#endif

/* _tev__CreatePullPointSubscription * has binding name 'PointerTo_tev__CreatePullPointSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription (266)
#endif

/* _tev__GetServiceCapabilities * has binding name 'PointerTo_tev__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tev__GetServiceCapabilities (262)
#endif

/* _wsnt__Unsubscribe * has binding name 'PointerTo_wsnt__Unsubscribe' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Unsubscribe
#define SOAP_TYPE_PointerTo_wsnt__Unsubscribe (258)
#endif

/* _tev__SetSynchronizationPoint * has binding name 'PointerTo_tev__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint (254)
#endif

/* _tev__Seek * has binding name 'PointerTo_tev__Seek' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__Seek
#define SOAP_TYPE_PointerTo_tev__Seek (250)
#endif

/* _tev__PullMessages * has binding name 'PointerTo_tev__PullMessages' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__PullMessages
#define SOAP_TYPE_PointerTo_tev__PullMessages (246)
#endif

/* wsnt__UnsupportedPolicyRequestFaultType * has binding name 'PointerTowsnt__UnsupportedPolicyRequestFaultType' for type 'wsnt:UnsupportedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType (244)
#endif

/* wsnt__UnrecognizedPolicyRequestFaultType * has binding name 'PointerTowsnt__UnrecognizedPolicyRequestFaultType' for type 'wsnt:UnrecognizedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType (243)
#endif

/* wsnt__UnacceptableTerminationTimeFaultType * has binding name 'PointerTowsnt__UnacceptableTerminationTimeFaultType' for type 'wsnt:UnacceptableTerminationTimeFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType (242)
#endif

/* wsnt__UnacceptableInitialTerminationTimeFaultType * has binding name 'PointerTowsnt__UnacceptableInitialTerminationTimeFaultType' for type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType (241)
#endif

/* wsnt__UnableToGetMessagesFaultType * has binding name 'PointerTowsnt__UnableToGetMessagesFaultType' for type 'wsnt:UnableToGetMessagesFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType (240)
#endif

/* wsnt__UnableToDestroySubscriptionFaultType * has binding name 'PointerTowsnt__UnableToDestroySubscriptionFaultType' for type 'wsnt:UnableToDestroySubscriptionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType (239)
#endif

/* wsnt__UnableToDestroyPullPointFaultType * has binding name 'PointerTowsnt__UnableToDestroyPullPointFaultType' for type 'wsnt:UnableToDestroyPullPointFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType (238)
#endif

/* wsnt__UnableToCreatePullPointFaultType * has binding name 'PointerTowsnt__UnableToCreatePullPointFaultType' for type 'wsnt:UnableToCreatePullPointFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType (237)
#endif

/* wsnt__TopicNotSupportedFaultType * has binding name 'PointerTowsnt__TopicNotSupportedFaultType' for type 'wsnt:TopicNotSupportedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType (236)
#endif

/* wsnt__TopicExpressionDialectUnknownFaultType * has binding name 'PointerTowsnt__TopicExpressionDialectUnknownFaultType' for type 'wsnt:TopicExpressionDialectUnknownFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType (235)
#endif

/* wsnt__SubscribeCreationFailedFaultType * has binding name 'PointerTowsnt__SubscribeCreationFailedFaultType' for type 'wsnt:SubscribeCreationFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType (234)
#endif

/* wsnt__ResumeFailedFaultType * has binding name 'PointerTowsnt__ResumeFailedFaultType' for type 'wsnt:ResumeFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType
#define SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType (233)
#endif

/* wsrfr__ResourceUnknownFaultType * has binding name 'PointerTowsrfr__ResourceUnknownFaultType' for type 'wsrfr:ResourceUnknownFaultType' */
#ifndef SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType (232)
#endif

/* _tev__PullMessagesFaultResponse * has binding name 'PointerTo_tev__PullMessagesFaultResponse' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse
#define SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse (231)
#endif

/* wsnt__PauseFailedFaultType * has binding name 'PointerTowsnt__PauseFailedFaultType' for type 'wsnt:PauseFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__PauseFailedFaultType
#define SOAP_TYPE_PointerTowsnt__PauseFailedFaultType (230)
#endif

/* wsnt__NotifyMessageNotSupportedFaultType * has binding name 'PointerTowsnt__NotifyMessageNotSupportedFaultType' for type 'wsnt:NotifyMessageNotSupportedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType (229)
#endif

/* wsnt__NoCurrentMessageOnTopicFaultType * has binding name 'PointerTowsnt__NoCurrentMessageOnTopicFaultType' for type 'wsnt:NoCurrentMessageOnTopicFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType (228)
#endif

/* wsnt__MultipleTopicsSpecifiedFaultType * has binding name 'PointerTowsnt__MultipleTopicsSpecifiedFaultType' for type 'wsnt:MultipleTopicsSpecifiedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType (227)
#endif

/* wsnt__InvalidTopicExpressionFaultType * has binding name 'PointerTowsnt__InvalidTopicExpressionFaultType' for type 'wsnt:InvalidTopicExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType (226)
#endif

/* wsnt__InvalidProducerPropertiesExpressionFaultType * has binding name 'PointerTowsnt__InvalidProducerPropertiesExpressionFaultType' for type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType (225)
#endif

/* wsnt__InvalidMessageContentExpressionFaultType * has binding name 'PointerTowsnt__InvalidMessageContentExpressionFaultType' for type 'wsnt:InvalidMessageContentExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType (224)
#endif

/* wsnt__InvalidFilterFaultType * has binding name 'PointerTowsnt__InvalidFilterFaultType' for type 'wsnt:InvalidFilterFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType (223)
#endif

/* std::string * has binding name 'PointerToxsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_PointerToxsd__NCName
#define SOAP_TYPE_PointerToxsd__NCName (179)
#endif

/* std::string * has binding name 'PointerTowstop__ConcreteTopicExpression' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression (177)
#endif

/* std::string * has binding name 'PointerToxsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (176)
#endif

/* wstop__TopicType * has binding name 'PointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicType
#define SOAP_TYPE_PointerTowstop__TopicType (174)
#endif

/* wstop__QueryExpressionType * has binding name 'PointerTowstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType
#define SOAP_TYPE_PointerTowstop__QueryExpressionType (173)
#endif

/* wstop__Documentation * has binding name 'PointerTowstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_PointerTowstop__Documentation
#define SOAP_TYPE_PointerTowstop__Documentation (170)
#endif

/* std::string * has binding name 'PointerToxsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (169)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy * has binding name 'PointerTo_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy (168)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (166)
#endif

/* wsnt__SubscriptionPolicyType * has binding name 'PointerTowsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType (165)
#endif

/* wsnt__TopicExpressionType * has binding name 'PointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType (162)
#endif

/* _wsrfbf__BaseFaultType_FaultCause * has binding name 'PointerTo_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause (161)
#endif

/* std::string * has binding name 'PointerTo_xml__lang' for type '' */
#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (158)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode * has binding name 'PointerTo_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode (156)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTowsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType (154)
#endif

/* wstop__TopicSetType * has binding name 'PointerTowstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicSetType
#define SOAP_TYPE_PointerTowstop__TopicSetType (153)
#endif

/* wsnt__NotificationMessageHolderType * has binding name 'PointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType (150)
#endif

/* _tev__CreatePullPointSubscription_SubscriptionPolicy * has binding name 'PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy (148)
#endif

/* std::string * has binding name 'PointerTowsnt__AbsoluteOrRelativeTimeType' for type 'wsnt:AbsoluteOrRelativeTimeType' */
#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType (146)
#endif

/* wsnt__FilterType * has binding name 'PointerTowsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_PointerTowsnt__FilterType
#define SOAP_TYPE_PointerTowsnt__FilterType (145)
#endif

/* tev__Capabilities * has binding name 'PointerTotev__Capabilities' for type 'tev:Capabilities' */
#ifndef SOAP_TYPE_PointerTotev__Capabilities
#define SOAP_TYPE_PointerTotev__Capabilities (144)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (143)
#endif

/* _tev__ChangedOnly has binding name '_tev__ChangedOnly' for type '' */
#ifndef SOAP_TYPE__tev__ChangedOnly
#define SOAP_TYPE__tev__ChangedOnly (80)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (49)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (47)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (45)
#endif

/* struct chan__ChannelInstanceType * has binding name 'PointerTochan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (43)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (42)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (41)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (40)
#endif

/* struct wsa5__RelatesToType * has binding name 'PointerTo_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (39)
#endif

/* _wsa5__ProblemIRI has binding name '_wsa5__ProblemIRI' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (34)
#endif

/* _wsa5__ProblemHeaderQName has binding name '_wsa5__ProblemHeaderQName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (33)
#endif

/* _wsa5__Action has binding name '_wsa5__Action' for type '' */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (30)
#endif

/* _wsa5__To has binding name '_wsa5__To' for type '' */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (29)
#endif

/* _wsa5__MessageID has binding name '_wsa5__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (24)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (20)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (19)
#endif

/* struct wsa5__MetadataType * has binding name 'PointerTowsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (18)
#endif

/* struct wsa5__ReferenceParametersType * has binding name 'PointerTowsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (17)
#endif

/* wsa5__FaultCodesOpenEnumType has binding name 'wsa5__FaultCodesOpenEnumType' for type 'wsa5:FaultCodesOpenEnumType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (14)
#endif

/* wsa5__RelationshipTypeOpenEnum has binding name 'wsa5__RelationshipTypeOpenEnum' for type 'wsa5:RelationshipTypeOpenEnum' */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (13)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<_wstop__TopicNamespaceType_Topic>  has binding name 'std__vectorTemplateOf_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic (178)
#endif

/* std::vector<wstop__TopicType *>  has binding name 'std__vectorTemplateOfPointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType (175)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName (171)
#endif

/* std::vector<wsnt__TopicExpressionType *>  has binding name 'std__vectorTemplateOfPointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType (164)
#endif

/* std::vector<_wsrfbf__BaseFaultType_Description>  has binding name 'std__vectorTemplateOf_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description (159)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (152)
#endif

/* std::vector<wsnt__NotificationMessageHolderType *>  has binding name 'std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType (151)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (141)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
