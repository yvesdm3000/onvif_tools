/* soapH.h
   Generated by gSOAP 2.8.60 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_xsd__duration(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64


#define soap_put__wsa5__RetryAfter soap_put_ULONG64


#define soap_write__wsa5__RetryAfter soap_write_ULONG64


#define soap_PUT__wsa5__RetryAfter soap_PUT_ULONG64


#define soap_POST_send__wsa5__RetryAfter soap_POST_send_ULONG64


#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wsnt__TerminationTime is a typedef synonym of dateTime */

#ifndef SOAP_TYPE__wsnt__TerminationTime_DEFINED
#define SOAP_TYPE__wsnt__TerminationTime_DEFINED

#define soap_default__wsnt__TerminationTime soap_default_dateTime


#define soap__wsnt__TerminationTime2s soap_dateTime2s


#define soap_out__wsnt__TerminationTime soap_out_dateTime


#define soap_s2_wsnt__TerminationTime soap_s2dateTime


#define soap_in__wsnt__TerminationTime soap_in_dateTime


#define soap_instantiate__wsnt__TerminationTime soap_instantiate_dateTime


#define soap_new__wsnt__TerminationTime soap_new_dateTime


#define soap_put__wsnt__TerminationTime soap_put_dateTime


#define soap_write__wsnt__TerminationTime soap_write_dateTime


#define soap_PUT__wsnt__TerminationTime soap_PUT_dateTime


#define soap_POST_send__wsnt__TerminationTime soap_POST_send_dateTime


#define soap_get__wsnt__TerminationTime soap_get_dateTime


#define soap_read__wsnt__TerminationTime soap_read_dateTime


#define soap_GET__wsnt__TerminationTime soap_GET_dateTime


#define soap_POST_recv__wsnt__TerminationTime soap_POST_recv_dateTime

#endif
/* _wsnt__CurrentTime is a typedef synonym of dateTime */

#ifndef SOAP_TYPE__wsnt__CurrentTime_DEFINED
#define SOAP_TYPE__wsnt__CurrentTime_DEFINED

#define soap_default__wsnt__CurrentTime soap_default_dateTime


#define soap__wsnt__CurrentTime2s soap_dateTime2s


#define soap_out__wsnt__CurrentTime soap_out_dateTime


#define soap_s2_wsnt__CurrentTime soap_s2dateTime


#define soap_in__wsnt__CurrentTime soap_in_dateTime


#define soap_instantiate__wsnt__CurrentTime soap_instantiate_dateTime


#define soap_new__wsnt__CurrentTime soap_new_dateTime


#define soap_put__wsnt__CurrentTime soap_put_dateTime


#define soap_write__wsnt__CurrentTime soap_write_dateTime


#define soap_PUT__wsnt__CurrentTime soap_PUT_dateTime


#define soap_POST_send__wsnt__CurrentTime soap_POST_send_dateTime


#define soap_get__wsnt__CurrentTime soap_get_dateTime


#define soap_read__wsnt__CurrentTime soap_read_dateTime


#define soap_GET__wsnt__CurrentTime soap_GET_dateTime


#define soap_POST_recv__wsnt__CurrentTime soap_POST_recv_dateTime

#endif
/* _wsnt__CreationTime is a typedef synonym of dateTime */

#ifndef SOAP_TYPE__wsnt__CreationTime_DEFINED
#define SOAP_TYPE__wsnt__CreationTime_DEFINED

#define soap_default__wsnt__CreationTime soap_default_dateTime


#define soap__wsnt__CreationTime2s soap_dateTime2s


#define soap_out__wsnt__CreationTime soap_out_dateTime


#define soap_s2_wsnt__CreationTime soap_s2dateTime


#define soap_in__wsnt__CreationTime soap_in_dateTime


#define soap_instantiate__wsnt__CreationTime soap_instantiate_dateTime


#define soap_new__wsnt__CreationTime soap_new_dateTime


#define soap_put__wsnt__CreationTime soap_put_dateTime


#define soap_write__wsnt__CreationTime soap_write_dateTime


#define soap_PUT__wsnt__CreationTime soap_PUT_dateTime


#define soap_POST_send__wsnt__CreationTime soap_POST_send_dateTime


#define soap_get__wsnt__CreationTime soap_get_dateTime


#define soap_read__wsnt__CreationTime soap_read_dateTime


#define soap_GET__wsnt__CreationTime soap_GET_dateTime


#define soap_POST_recv__wsnt__CreationTime soap_POST_recv_dateTime

#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wstop__topic is a typedef synonym of bool */

#ifndef SOAP_TYPE__wstop__topic_DEFINED
#define SOAP_TYPE__wstop__topic_DEFINED

#define soap_default__wstop__topic soap_default_bool


#define soap__wstop__topic2s soap_bool2s


#define soap_out__wstop__topic soap_out_bool


#define soap_s2_wstop__topic soap_s2bool


#define soap_in__wstop__topic soap_in_bool


#define soap_instantiate__wstop__topic soap_instantiate_bool


#define soap_new__wstop__topic soap_new_bool


#define soap_put__wstop__topic soap_put_bool


#define soap_write__wstop__topic soap_write_bool


#define soap_PUT__wstop__topic soap_PUT_bool


#define soap_POST_send__wstop__topic soap_POST_send_bool


#define soap_get__wstop__topic soap_get_bool


#define soap_read__wstop__topic soap_read_bool


#define soap_GET__wstop__topic soap_GET_bool


#define soap_POST_recv__wstop__topic soap_POST_recv_bool

#endif
/* _wsnt__FixedTopicSet is a typedef synonym of bool */

#ifndef SOAP_TYPE__wsnt__FixedTopicSet_DEFINED
#define SOAP_TYPE__wsnt__FixedTopicSet_DEFINED

#define soap_default__wsnt__FixedTopicSet soap_default_bool


#define soap__wsnt__FixedTopicSet2s soap_bool2s


#define soap_out__wsnt__FixedTopicSet soap_out_bool


#define soap_s2_wsnt__FixedTopicSet soap_s2bool


#define soap_in__wsnt__FixedTopicSet soap_in_bool


#define soap_instantiate__wsnt__FixedTopicSet soap_instantiate_bool


#define soap_new__wsnt__FixedTopicSet soap_new_bool


#define soap_put__wsnt__FixedTopicSet soap_put_bool


#define soap_write__wsnt__FixedTopicSet soap_write_bool


#define soap_PUT__wsnt__FixedTopicSet soap_PUT_bool


#define soap_POST_send__wsnt__FixedTopicSet soap_POST_send_bool


#define soap_get__wsnt__FixedTopicSet soap_get_bool


#define soap_read__wsnt__FixedTopicSet soap_read_bool


#define soap_GET__wsnt__FixedTopicSet soap_GET_bool


#define soap_POST_recv__wsnt__FixedTopicSet soap_POST_recv_bool

#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wstop__topicNamespaceLocation is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__wstop__topicNamespaceLocation_DEFINED
#define SOAP_TYPE__wstop__topicNamespaceLocation_DEFINED

#define soap_default__wstop__topicNamespaceLocation soap_default_xsd__anyURI


#define soap_serialize__wstop__topicNamespaceLocation soap_serialize_xsd__anyURI


#define soap__wstop__topicNamespaceLocation2s(soap, a) ((a).c_str())

#define soap_out__wstop__topicNamespaceLocation soap_out_xsd__anyURI


#define soap_s2_wstop__topicNamespaceLocation(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)

#define soap_in__wstop__topicNamespaceLocation soap_in_xsd__anyURI


#define soap_instantiate__wstop__topicNamespaceLocation soap_instantiate_xsd__anyURI


#define soap_new__wstop__topicNamespaceLocation soap_new_xsd__anyURI


#define soap_put__wstop__topicNamespaceLocation soap_put_xsd__anyURI


#define soap_write__wstop__topicNamespaceLocation soap_write_xsd__anyURI


#define soap_PUT__wstop__topicNamespaceLocation soap_PUT_xsd__anyURI


#define soap_POST_send__wstop__topicNamespaceLocation soap_POST_send_xsd__anyURI


#define soap_get__wstop__topicNamespaceLocation soap_get_xsd__anyURI


#define soap_read__wstop__topicNamespaceLocation soap_read_xsd__anyURI


#define soap_GET__wstop__topicNamespaceLocation soap_GET_xsd__anyURI


#define soap_POST_recv__wstop__topicNamespaceLocation soap_POST_recv_xsd__anyURI

#endif
/* _wstop__TopicSet is a typedef synonym of wstop__TopicSetType */

#ifndef SOAP_TYPE__wstop__TopicSet_DEFINED
#define SOAP_TYPE__wstop__TopicSet_DEFINED

#define soap_default__wstop__TopicSet(soap, a) (a)->wstop__TopicSetType::soap_default(soap)


#define soap_serialize__wstop__TopicSet(soap, a) (a)->soap_serialize(soap)


#define soap__wstop__TopicSet2s soap_wstop__TopicSetType2s


#define soap_out__wstop__TopicSet soap_out_wstop__TopicSetType


#define soap_s2_wstop__TopicSet soap_s2wstop__TopicSetType


#define soap_in__wstop__TopicSet soap_in_wstop__TopicSetType


#define soap_instantiate__wstop__TopicSet soap_instantiate_wstop__TopicSetType


#define soap_new__wstop__TopicSet soap_new_wstop__TopicSetType


#define soap_new_req__wstop__TopicSet soap_new_req_wstop__TopicSetType


#define soap_new_set__wstop__TopicSet soap_new_set_wstop__TopicSetType


#define soap_put__wstop__TopicSet soap_put_wstop__TopicSetType


#define soap_write__wstop__TopicSet soap_write_wstop__TopicSetType


#define soap_PUT__wstop__TopicSet soap_PUT_wstop__TopicSetType


#define soap_POST_send__wstop__TopicSet soap_POST_send_wstop__TopicSetType


#define soap_get__wstop__TopicSet soap_get_wstop__TopicSetType


#define soap_read__wstop__TopicSet soap_read_wstop__TopicSetType


#define soap_GET__wstop__TopicSet soap_GET_wstop__TopicSetType


#define soap_POST_recv__wstop__TopicSet soap_POST_recv_wstop__TopicSetType

#endif
/* _wstop__TopicNamespace is a typedef synonym of wstop__TopicNamespaceType */

#ifndef SOAP_TYPE__wstop__TopicNamespace_DEFINED
#define SOAP_TYPE__wstop__TopicNamespace_DEFINED

#define soap_default__wstop__TopicNamespace(soap, a) (a)->wstop__TopicNamespaceType::soap_default(soap)


#define soap_serialize__wstop__TopicNamespace(soap, a) (a)->soap_serialize(soap)


#define soap__wstop__TopicNamespace2s soap_wstop__TopicNamespaceType2s


#define soap_out__wstop__TopicNamespace soap_out_wstop__TopicNamespaceType


#define soap_s2_wstop__TopicNamespace soap_s2wstop__TopicNamespaceType


#define soap_in__wstop__TopicNamespace soap_in_wstop__TopicNamespaceType


#define soap_instantiate__wstop__TopicNamespace soap_instantiate_wstop__TopicNamespaceType


#define soap_new__wstop__TopicNamespace soap_new_wstop__TopicNamespaceType


#define soap_new_req__wstop__TopicNamespace soap_new_req_wstop__TopicNamespaceType


#define soap_new_set__wstop__TopicNamespace soap_new_set_wstop__TopicNamespaceType


#define soap_put__wstop__TopicNamespace soap_put_wstop__TopicNamespaceType


#define soap_write__wstop__TopicNamespace soap_write_wstop__TopicNamespaceType


#define soap_PUT__wstop__TopicNamespace soap_PUT_wstop__TopicNamespaceType


#define soap_POST_send__wstop__TopicNamespace soap_POST_send_wstop__TopicNamespaceType


#define soap_get__wstop__TopicNamespace soap_get_wstop__TopicNamespaceType


#define soap_read__wstop__TopicNamespace soap_read_wstop__TopicNamespaceType


#define soap_GET__wstop__TopicNamespace soap_GET_wstop__TopicNamespaceType


#define soap_POST_recv__wstop__TopicNamespace soap_POST_recv_wstop__TopicNamespaceType

#endif
/* _wsnt__ResumeFailedFault is a typedef synonym of wsnt__ResumeFailedFaultType */

#ifndef SOAP_TYPE__wsnt__ResumeFailedFault_DEFINED
#define SOAP_TYPE__wsnt__ResumeFailedFault_DEFINED

#define soap_default__wsnt__ResumeFailedFault(soap, a) (a)->wsnt__ResumeFailedFaultType::soap_default(soap)


#define soap_serialize__wsnt__ResumeFailedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__ResumeFailedFault2s soap_wsnt__ResumeFailedFaultType2s


#define soap_out__wsnt__ResumeFailedFault soap_out_wsnt__ResumeFailedFaultType


#define soap_s2_wsnt__ResumeFailedFault soap_s2wsnt__ResumeFailedFaultType


#define soap_in__wsnt__ResumeFailedFault soap_in_wsnt__ResumeFailedFaultType


#define soap_instantiate__wsnt__ResumeFailedFault soap_instantiate_wsnt__ResumeFailedFaultType


#define soap_new__wsnt__ResumeFailedFault soap_new_wsnt__ResumeFailedFaultType


#define soap_new_req__wsnt__ResumeFailedFault soap_new_req_wsnt__ResumeFailedFaultType


#define soap_new_set__wsnt__ResumeFailedFault soap_new_set_wsnt__ResumeFailedFaultType


#define soap_put__wsnt__ResumeFailedFault soap_put_wsnt__ResumeFailedFaultType


#define soap_write__wsnt__ResumeFailedFault soap_write_wsnt__ResumeFailedFaultType


#define soap_PUT__wsnt__ResumeFailedFault soap_PUT_wsnt__ResumeFailedFaultType


#define soap_POST_send__wsnt__ResumeFailedFault soap_POST_send_wsnt__ResumeFailedFaultType


#define soap_get__wsnt__ResumeFailedFault soap_get_wsnt__ResumeFailedFaultType


#define soap_read__wsnt__ResumeFailedFault soap_read_wsnt__ResumeFailedFaultType


#define soap_GET__wsnt__ResumeFailedFault soap_GET_wsnt__ResumeFailedFaultType


#define soap_POST_recv__wsnt__ResumeFailedFault soap_POST_recv_wsnt__ResumeFailedFaultType

#endif
/* _wsnt__PauseFailedFault is a typedef synonym of wsnt__PauseFailedFaultType */

#ifndef SOAP_TYPE__wsnt__PauseFailedFault_DEFINED
#define SOAP_TYPE__wsnt__PauseFailedFault_DEFINED

#define soap_default__wsnt__PauseFailedFault(soap, a) (a)->wsnt__PauseFailedFaultType::soap_default(soap)


#define soap_serialize__wsnt__PauseFailedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__PauseFailedFault2s soap_wsnt__PauseFailedFaultType2s


#define soap_out__wsnt__PauseFailedFault soap_out_wsnt__PauseFailedFaultType


#define soap_s2_wsnt__PauseFailedFault soap_s2wsnt__PauseFailedFaultType


#define soap_in__wsnt__PauseFailedFault soap_in_wsnt__PauseFailedFaultType


#define soap_instantiate__wsnt__PauseFailedFault soap_instantiate_wsnt__PauseFailedFaultType


#define soap_new__wsnt__PauseFailedFault soap_new_wsnt__PauseFailedFaultType


#define soap_new_req__wsnt__PauseFailedFault soap_new_req_wsnt__PauseFailedFaultType


#define soap_new_set__wsnt__PauseFailedFault soap_new_set_wsnt__PauseFailedFaultType


#define soap_put__wsnt__PauseFailedFault soap_put_wsnt__PauseFailedFaultType


#define soap_write__wsnt__PauseFailedFault soap_write_wsnt__PauseFailedFaultType


#define soap_PUT__wsnt__PauseFailedFault soap_PUT_wsnt__PauseFailedFaultType


#define soap_POST_send__wsnt__PauseFailedFault soap_POST_send_wsnt__PauseFailedFaultType


#define soap_get__wsnt__PauseFailedFault soap_get_wsnt__PauseFailedFaultType


#define soap_read__wsnt__PauseFailedFault soap_read_wsnt__PauseFailedFaultType


#define soap_GET__wsnt__PauseFailedFault soap_GET_wsnt__PauseFailedFaultType


#define soap_POST_recv__wsnt__PauseFailedFault soap_POST_recv_wsnt__PauseFailedFaultType

#endif
/* _wsnt__UnableToDestroySubscriptionFault is a typedef synonym of wsnt__UnableToDestroySubscriptionFaultType */

#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault_DEFINED
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault_DEFINED

#define soap_default__wsnt__UnableToDestroySubscriptionFault(soap, a) (a)->wsnt__UnableToDestroySubscriptionFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnableToDestroySubscriptionFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnableToDestroySubscriptionFault2s soap_wsnt__UnableToDestroySubscriptionFaultType2s


#define soap_out__wsnt__UnableToDestroySubscriptionFault soap_out_wsnt__UnableToDestroySubscriptionFaultType


#define soap_s2_wsnt__UnableToDestroySubscriptionFault soap_s2wsnt__UnableToDestroySubscriptionFaultType


#define soap_in__wsnt__UnableToDestroySubscriptionFault soap_in_wsnt__UnableToDestroySubscriptionFaultType


#define soap_instantiate__wsnt__UnableToDestroySubscriptionFault soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType


#define soap_new__wsnt__UnableToDestroySubscriptionFault soap_new_wsnt__UnableToDestroySubscriptionFaultType


#define soap_new_req__wsnt__UnableToDestroySubscriptionFault soap_new_req_wsnt__UnableToDestroySubscriptionFaultType


#define soap_new_set__wsnt__UnableToDestroySubscriptionFault soap_new_set_wsnt__UnableToDestroySubscriptionFaultType


#define soap_put__wsnt__UnableToDestroySubscriptionFault soap_put_wsnt__UnableToDestroySubscriptionFaultType


#define soap_write__wsnt__UnableToDestroySubscriptionFault soap_write_wsnt__UnableToDestroySubscriptionFaultType


#define soap_PUT__wsnt__UnableToDestroySubscriptionFault soap_PUT_wsnt__UnableToDestroySubscriptionFaultType


#define soap_POST_send__wsnt__UnableToDestroySubscriptionFault soap_POST_send_wsnt__UnableToDestroySubscriptionFaultType


#define soap_get__wsnt__UnableToDestroySubscriptionFault soap_get_wsnt__UnableToDestroySubscriptionFaultType


#define soap_read__wsnt__UnableToDestroySubscriptionFault soap_read_wsnt__UnableToDestroySubscriptionFaultType


#define soap_GET__wsnt__UnableToDestroySubscriptionFault soap_GET_wsnt__UnableToDestroySubscriptionFaultType


#define soap_POST_recv__wsnt__UnableToDestroySubscriptionFault soap_POST_recv_wsnt__UnableToDestroySubscriptionFaultType

#endif
/* _wsnt__UnacceptableTerminationTimeFault is a typedef synonym of wsnt__UnacceptableTerminationTimeFaultType */

#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault_DEFINED
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault_DEFINED

#define soap_default__wsnt__UnacceptableTerminationTimeFault(soap, a) (a)->wsnt__UnacceptableTerminationTimeFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnacceptableTerminationTimeFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnacceptableTerminationTimeFault2s soap_wsnt__UnacceptableTerminationTimeFaultType2s


#define soap_out__wsnt__UnacceptableTerminationTimeFault soap_out_wsnt__UnacceptableTerminationTimeFaultType


#define soap_s2_wsnt__UnacceptableTerminationTimeFault soap_s2wsnt__UnacceptableTerminationTimeFaultType


#define soap_in__wsnt__UnacceptableTerminationTimeFault soap_in_wsnt__UnacceptableTerminationTimeFaultType


#define soap_instantiate__wsnt__UnacceptableTerminationTimeFault soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType


#define soap_new__wsnt__UnacceptableTerminationTimeFault soap_new_wsnt__UnacceptableTerminationTimeFaultType


#define soap_new_req__wsnt__UnacceptableTerminationTimeFault soap_new_req_wsnt__UnacceptableTerminationTimeFaultType


#define soap_new_set__wsnt__UnacceptableTerminationTimeFault soap_new_set_wsnt__UnacceptableTerminationTimeFaultType


#define soap_put__wsnt__UnacceptableTerminationTimeFault soap_put_wsnt__UnacceptableTerminationTimeFaultType


#define soap_write__wsnt__UnacceptableTerminationTimeFault soap_write_wsnt__UnacceptableTerminationTimeFaultType


#define soap_PUT__wsnt__UnacceptableTerminationTimeFault soap_PUT_wsnt__UnacceptableTerminationTimeFaultType


#define soap_POST_send__wsnt__UnacceptableTerminationTimeFault soap_POST_send_wsnt__UnacceptableTerminationTimeFaultType


#define soap_get__wsnt__UnacceptableTerminationTimeFault soap_get_wsnt__UnacceptableTerminationTimeFaultType


#define soap_read__wsnt__UnacceptableTerminationTimeFault soap_read_wsnt__UnacceptableTerminationTimeFaultType


#define soap_GET__wsnt__UnacceptableTerminationTimeFault soap_GET_wsnt__UnacceptableTerminationTimeFaultType


#define soap_POST_recv__wsnt__UnacceptableTerminationTimeFault soap_POST_recv_wsnt__UnacceptableTerminationTimeFaultType

#endif
/* _wsnt__UnableToCreatePullPointFault is a typedef synonym of wsnt__UnableToCreatePullPointFaultType */

#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault_DEFINED
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault_DEFINED

#define soap_default__wsnt__UnableToCreatePullPointFault(soap, a) (a)->wsnt__UnableToCreatePullPointFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnableToCreatePullPointFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnableToCreatePullPointFault2s soap_wsnt__UnableToCreatePullPointFaultType2s


#define soap_out__wsnt__UnableToCreatePullPointFault soap_out_wsnt__UnableToCreatePullPointFaultType


#define soap_s2_wsnt__UnableToCreatePullPointFault soap_s2wsnt__UnableToCreatePullPointFaultType


#define soap_in__wsnt__UnableToCreatePullPointFault soap_in_wsnt__UnableToCreatePullPointFaultType


#define soap_instantiate__wsnt__UnableToCreatePullPointFault soap_instantiate_wsnt__UnableToCreatePullPointFaultType


#define soap_new__wsnt__UnableToCreatePullPointFault soap_new_wsnt__UnableToCreatePullPointFaultType


#define soap_new_req__wsnt__UnableToCreatePullPointFault soap_new_req_wsnt__UnableToCreatePullPointFaultType


#define soap_new_set__wsnt__UnableToCreatePullPointFault soap_new_set_wsnt__UnableToCreatePullPointFaultType


#define soap_put__wsnt__UnableToCreatePullPointFault soap_put_wsnt__UnableToCreatePullPointFaultType


#define soap_write__wsnt__UnableToCreatePullPointFault soap_write_wsnt__UnableToCreatePullPointFaultType


#define soap_PUT__wsnt__UnableToCreatePullPointFault soap_PUT_wsnt__UnableToCreatePullPointFaultType


#define soap_POST_send__wsnt__UnableToCreatePullPointFault soap_POST_send_wsnt__UnableToCreatePullPointFaultType


#define soap_get__wsnt__UnableToCreatePullPointFault soap_get_wsnt__UnableToCreatePullPointFaultType


#define soap_read__wsnt__UnableToCreatePullPointFault soap_read_wsnt__UnableToCreatePullPointFaultType


#define soap_GET__wsnt__UnableToCreatePullPointFault soap_GET_wsnt__UnableToCreatePullPointFaultType


#define soap_POST_recv__wsnt__UnableToCreatePullPointFault soap_POST_recv_wsnt__UnableToCreatePullPointFaultType

#endif
/* _wsnt__UnableToDestroyPullPointFault is a typedef synonym of wsnt__UnableToDestroyPullPointFaultType */

#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault_DEFINED
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault_DEFINED

#define soap_default__wsnt__UnableToDestroyPullPointFault(soap, a) (a)->wsnt__UnableToDestroyPullPointFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnableToDestroyPullPointFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnableToDestroyPullPointFault2s soap_wsnt__UnableToDestroyPullPointFaultType2s


#define soap_out__wsnt__UnableToDestroyPullPointFault soap_out_wsnt__UnableToDestroyPullPointFaultType


#define soap_s2_wsnt__UnableToDestroyPullPointFault soap_s2wsnt__UnableToDestroyPullPointFaultType


#define soap_in__wsnt__UnableToDestroyPullPointFault soap_in_wsnt__UnableToDestroyPullPointFaultType


#define soap_instantiate__wsnt__UnableToDestroyPullPointFault soap_instantiate_wsnt__UnableToDestroyPullPointFaultType


#define soap_new__wsnt__UnableToDestroyPullPointFault soap_new_wsnt__UnableToDestroyPullPointFaultType


#define soap_new_req__wsnt__UnableToDestroyPullPointFault soap_new_req_wsnt__UnableToDestroyPullPointFaultType


#define soap_new_set__wsnt__UnableToDestroyPullPointFault soap_new_set_wsnt__UnableToDestroyPullPointFaultType


#define soap_put__wsnt__UnableToDestroyPullPointFault soap_put_wsnt__UnableToDestroyPullPointFaultType


#define soap_write__wsnt__UnableToDestroyPullPointFault soap_write_wsnt__UnableToDestroyPullPointFaultType


#define soap_PUT__wsnt__UnableToDestroyPullPointFault soap_PUT_wsnt__UnableToDestroyPullPointFaultType


#define soap_POST_send__wsnt__UnableToDestroyPullPointFault soap_POST_send_wsnt__UnableToDestroyPullPointFaultType


#define soap_get__wsnt__UnableToDestroyPullPointFault soap_get_wsnt__UnableToDestroyPullPointFaultType


#define soap_read__wsnt__UnableToDestroyPullPointFault soap_read_wsnt__UnableToDestroyPullPointFaultType


#define soap_GET__wsnt__UnableToDestroyPullPointFault soap_GET_wsnt__UnableToDestroyPullPointFaultType


#define soap_POST_recv__wsnt__UnableToDestroyPullPointFault soap_POST_recv_wsnt__UnableToDestroyPullPointFaultType

#endif
/* _wsnt__UnableToGetMessagesFault is a typedef synonym of wsnt__UnableToGetMessagesFaultType */

#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault_DEFINED
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault_DEFINED

#define soap_default__wsnt__UnableToGetMessagesFault(soap, a) (a)->wsnt__UnableToGetMessagesFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnableToGetMessagesFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnableToGetMessagesFault2s soap_wsnt__UnableToGetMessagesFaultType2s


#define soap_out__wsnt__UnableToGetMessagesFault soap_out_wsnt__UnableToGetMessagesFaultType


#define soap_s2_wsnt__UnableToGetMessagesFault soap_s2wsnt__UnableToGetMessagesFaultType


#define soap_in__wsnt__UnableToGetMessagesFault soap_in_wsnt__UnableToGetMessagesFaultType


#define soap_instantiate__wsnt__UnableToGetMessagesFault soap_instantiate_wsnt__UnableToGetMessagesFaultType


#define soap_new__wsnt__UnableToGetMessagesFault soap_new_wsnt__UnableToGetMessagesFaultType


#define soap_new_req__wsnt__UnableToGetMessagesFault soap_new_req_wsnt__UnableToGetMessagesFaultType


#define soap_new_set__wsnt__UnableToGetMessagesFault soap_new_set_wsnt__UnableToGetMessagesFaultType


#define soap_put__wsnt__UnableToGetMessagesFault soap_put_wsnt__UnableToGetMessagesFaultType


#define soap_write__wsnt__UnableToGetMessagesFault soap_write_wsnt__UnableToGetMessagesFaultType


#define soap_PUT__wsnt__UnableToGetMessagesFault soap_PUT_wsnt__UnableToGetMessagesFaultType


#define soap_POST_send__wsnt__UnableToGetMessagesFault soap_POST_send_wsnt__UnableToGetMessagesFaultType


#define soap_get__wsnt__UnableToGetMessagesFault soap_get_wsnt__UnableToGetMessagesFaultType


#define soap_read__wsnt__UnableToGetMessagesFault soap_read_wsnt__UnableToGetMessagesFaultType


#define soap_GET__wsnt__UnableToGetMessagesFault soap_GET_wsnt__UnableToGetMessagesFaultType


#define soap_POST_recv__wsnt__UnableToGetMessagesFault soap_POST_recv_wsnt__UnableToGetMessagesFaultType

#endif
/* _wsnt__NoCurrentMessageOnTopicFault is a typedef synonym of wsnt__NoCurrentMessageOnTopicFaultType */

#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault_DEFINED
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault_DEFINED

#define soap_default__wsnt__NoCurrentMessageOnTopicFault(soap, a) (a)->wsnt__NoCurrentMessageOnTopicFaultType::soap_default(soap)


#define soap_serialize__wsnt__NoCurrentMessageOnTopicFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__NoCurrentMessageOnTopicFault2s soap_wsnt__NoCurrentMessageOnTopicFaultType2s


#define soap_out__wsnt__NoCurrentMessageOnTopicFault soap_out_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_s2_wsnt__NoCurrentMessageOnTopicFault soap_s2wsnt__NoCurrentMessageOnTopicFaultType


#define soap_in__wsnt__NoCurrentMessageOnTopicFault soap_in_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_instantiate__wsnt__NoCurrentMessageOnTopicFault soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_new__wsnt__NoCurrentMessageOnTopicFault soap_new_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_new_req__wsnt__NoCurrentMessageOnTopicFault soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_new_set__wsnt__NoCurrentMessageOnTopicFault soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_put__wsnt__NoCurrentMessageOnTopicFault soap_put_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_write__wsnt__NoCurrentMessageOnTopicFault soap_write_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_PUT__wsnt__NoCurrentMessageOnTopicFault soap_PUT_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_POST_send__wsnt__NoCurrentMessageOnTopicFault soap_POST_send_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_get__wsnt__NoCurrentMessageOnTopicFault soap_get_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_read__wsnt__NoCurrentMessageOnTopicFault soap_read_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_GET__wsnt__NoCurrentMessageOnTopicFault soap_GET_wsnt__NoCurrentMessageOnTopicFaultType


#define soap_POST_recv__wsnt__NoCurrentMessageOnTopicFault soap_POST_recv_wsnt__NoCurrentMessageOnTopicFaultType

#endif
/* _wsnt__UnacceptableInitialTerminationTimeFault is a typedef synonym of wsnt__UnacceptableInitialTerminationTimeFaultType */

#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault_DEFINED
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault_DEFINED

#define soap_default__wsnt__UnacceptableInitialTerminationTimeFault(soap, a) (a)->wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnacceptableInitialTerminationTimeFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnacceptableInitialTerminationTimeFault2s soap_wsnt__UnacceptableInitialTerminationTimeFaultType2s


#define soap_out__wsnt__UnacceptableInitialTerminationTimeFault soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_s2_wsnt__UnacceptableInitialTerminationTimeFault soap_s2wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_in__wsnt__UnacceptableInitialTerminationTimeFault soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_instantiate__wsnt__UnacceptableInitialTerminationTimeFault soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_new__wsnt__UnacceptableInitialTerminationTimeFault soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_new_req__wsnt__UnacceptableInitialTerminationTimeFault soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_new_set__wsnt__UnacceptableInitialTerminationTimeFault soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_put__wsnt__UnacceptableInitialTerminationTimeFault soap_put_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_write__wsnt__UnacceptableInitialTerminationTimeFault soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_PUT__wsnt__UnacceptableInitialTerminationTimeFault soap_PUT_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_POST_send__wsnt__UnacceptableInitialTerminationTimeFault soap_POST_send_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_get__wsnt__UnacceptableInitialTerminationTimeFault soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_read__wsnt__UnacceptableInitialTerminationTimeFault soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_GET__wsnt__UnacceptableInitialTerminationTimeFault soap_GET_wsnt__UnacceptableInitialTerminationTimeFaultType


#define soap_POST_recv__wsnt__UnacceptableInitialTerminationTimeFault soap_POST_recv_wsnt__UnacceptableInitialTerminationTimeFaultType

#endif
/* _wsnt__NotifyMessageNotSupportedFault is a typedef synonym of wsnt__NotifyMessageNotSupportedFaultType */

#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault_DEFINED
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault_DEFINED

#define soap_default__wsnt__NotifyMessageNotSupportedFault(soap, a) (a)->wsnt__NotifyMessageNotSupportedFaultType::soap_default(soap)


#define soap_serialize__wsnt__NotifyMessageNotSupportedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__NotifyMessageNotSupportedFault2s soap_wsnt__NotifyMessageNotSupportedFaultType2s


#define soap_out__wsnt__NotifyMessageNotSupportedFault soap_out_wsnt__NotifyMessageNotSupportedFaultType


#define soap_s2_wsnt__NotifyMessageNotSupportedFault soap_s2wsnt__NotifyMessageNotSupportedFaultType


#define soap_in__wsnt__NotifyMessageNotSupportedFault soap_in_wsnt__NotifyMessageNotSupportedFaultType


#define soap_instantiate__wsnt__NotifyMessageNotSupportedFault soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType


#define soap_new__wsnt__NotifyMessageNotSupportedFault soap_new_wsnt__NotifyMessageNotSupportedFaultType


#define soap_new_req__wsnt__NotifyMessageNotSupportedFault soap_new_req_wsnt__NotifyMessageNotSupportedFaultType


#define soap_new_set__wsnt__NotifyMessageNotSupportedFault soap_new_set_wsnt__NotifyMessageNotSupportedFaultType


#define soap_put__wsnt__NotifyMessageNotSupportedFault soap_put_wsnt__NotifyMessageNotSupportedFaultType


#define soap_write__wsnt__NotifyMessageNotSupportedFault soap_write_wsnt__NotifyMessageNotSupportedFaultType


#define soap_PUT__wsnt__NotifyMessageNotSupportedFault soap_PUT_wsnt__NotifyMessageNotSupportedFaultType


#define soap_POST_send__wsnt__NotifyMessageNotSupportedFault soap_POST_send_wsnt__NotifyMessageNotSupportedFaultType


#define soap_get__wsnt__NotifyMessageNotSupportedFault soap_get_wsnt__NotifyMessageNotSupportedFaultType


#define soap_read__wsnt__NotifyMessageNotSupportedFault soap_read_wsnt__NotifyMessageNotSupportedFaultType


#define soap_GET__wsnt__NotifyMessageNotSupportedFault soap_GET_wsnt__NotifyMessageNotSupportedFaultType


#define soap_POST_recv__wsnt__NotifyMessageNotSupportedFault soap_POST_recv_wsnt__NotifyMessageNotSupportedFaultType

#endif
/* _wsnt__UnsupportedPolicyRequestFault is a typedef synonym of wsnt__UnsupportedPolicyRequestFaultType */

#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault_DEFINED
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault_DEFINED

#define soap_default__wsnt__UnsupportedPolicyRequestFault(soap, a) (a)->wsnt__UnsupportedPolicyRequestFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnsupportedPolicyRequestFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnsupportedPolicyRequestFault2s soap_wsnt__UnsupportedPolicyRequestFaultType2s


#define soap_out__wsnt__UnsupportedPolicyRequestFault soap_out_wsnt__UnsupportedPolicyRequestFaultType


#define soap_s2_wsnt__UnsupportedPolicyRequestFault soap_s2wsnt__UnsupportedPolicyRequestFaultType


#define soap_in__wsnt__UnsupportedPolicyRequestFault soap_in_wsnt__UnsupportedPolicyRequestFaultType


#define soap_instantiate__wsnt__UnsupportedPolicyRequestFault soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType


#define soap_new__wsnt__UnsupportedPolicyRequestFault soap_new_wsnt__UnsupportedPolicyRequestFaultType


#define soap_new_req__wsnt__UnsupportedPolicyRequestFault soap_new_req_wsnt__UnsupportedPolicyRequestFaultType


#define soap_new_set__wsnt__UnsupportedPolicyRequestFault soap_new_set_wsnt__UnsupportedPolicyRequestFaultType


#define soap_put__wsnt__UnsupportedPolicyRequestFault soap_put_wsnt__UnsupportedPolicyRequestFaultType


#define soap_write__wsnt__UnsupportedPolicyRequestFault soap_write_wsnt__UnsupportedPolicyRequestFaultType


#define soap_PUT__wsnt__UnsupportedPolicyRequestFault soap_PUT_wsnt__UnsupportedPolicyRequestFaultType


#define soap_POST_send__wsnt__UnsupportedPolicyRequestFault soap_POST_send_wsnt__UnsupportedPolicyRequestFaultType


#define soap_get__wsnt__UnsupportedPolicyRequestFault soap_get_wsnt__UnsupportedPolicyRequestFaultType


#define soap_read__wsnt__UnsupportedPolicyRequestFault soap_read_wsnt__UnsupportedPolicyRequestFaultType


#define soap_GET__wsnt__UnsupportedPolicyRequestFault soap_GET_wsnt__UnsupportedPolicyRequestFaultType


#define soap_POST_recv__wsnt__UnsupportedPolicyRequestFault soap_POST_recv_wsnt__UnsupportedPolicyRequestFaultType

#endif
/* _wsnt__UnrecognizedPolicyRequestFault is a typedef synonym of wsnt__UnrecognizedPolicyRequestFaultType */

#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault_DEFINED
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault_DEFINED

#define soap_default__wsnt__UnrecognizedPolicyRequestFault(soap, a) (a)->wsnt__UnrecognizedPolicyRequestFaultType::soap_default(soap)


#define soap_serialize__wsnt__UnrecognizedPolicyRequestFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__UnrecognizedPolicyRequestFault2s soap_wsnt__UnrecognizedPolicyRequestFaultType2s


#define soap_out__wsnt__UnrecognizedPolicyRequestFault soap_out_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_s2_wsnt__UnrecognizedPolicyRequestFault soap_s2wsnt__UnrecognizedPolicyRequestFaultType


#define soap_in__wsnt__UnrecognizedPolicyRequestFault soap_in_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_instantiate__wsnt__UnrecognizedPolicyRequestFault soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_new__wsnt__UnrecognizedPolicyRequestFault soap_new_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_new_req__wsnt__UnrecognizedPolicyRequestFault soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_new_set__wsnt__UnrecognizedPolicyRequestFault soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_put__wsnt__UnrecognizedPolicyRequestFault soap_put_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_write__wsnt__UnrecognizedPolicyRequestFault soap_write_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_PUT__wsnt__UnrecognizedPolicyRequestFault soap_PUT_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_POST_send__wsnt__UnrecognizedPolicyRequestFault soap_POST_send_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_get__wsnt__UnrecognizedPolicyRequestFault soap_get_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_read__wsnt__UnrecognizedPolicyRequestFault soap_read_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_GET__wsnt__UnrecognizedPolicyRequestFault soap_GET_wsnt__UnrecognizedPolicyRequestFaultType


#define soap_POST_recv__wsnt__UnrecognizedPolicyRequestFault soap_POST_recv_wsnt__UnrecognizedPolicyRequestFaultType

#endif
/* _wsnt__InvalidMessageContentExpressionFault is a typedef synonym of wsnt__InvalidMessageContentExpressionFaultType */

#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault_DEFINED
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault_DEFINED

#define soap_default__wsnt__InvalidMessageContentExpressionFault(soap, a) (a)->wsnt__InvalidMessageContentExpressionFaultType::soap_default(soap)


#define soap_serialize__wsnt__InvalidMessageContentExpressionFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__InvalidMessageContentExpressionFault2s soap_wsnt__InvalidMessageContentExpressionFaultType2s


#define soap_out__wsnt__InvalidMessageContentExpressionFault soap_out_wsnt__InvalidMessageContentExpressionFaultType


#define soap_s2_wsnt__InvalidMessageContentExpressionFault soap_s2wsnt__InvalidMessageContentExpressionFaultType


#define soap_in__wsnt__InvalidMessageContentExpressionFault soap_in_wsnt__InvalidMessageContentExpressionFaultType


#define soap_instantiate__wsnt__InvalidMessageContentExpressionFault soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType


#define soap_new__wsnt__InvalidMessageContentExpressionFault soap_new_wsnt__InvalidMessageContentExpressionFaultType


#define soap_new_req__wsnt__InvalidMessageContentExpressionFault soap_new_req_wsnt__InvalidMessageContentExpressionFaultType


#define soap_new_set__wsnt__InvalidMessageContentExpressionFault soap_new_set_wsnt__InvalidMessageContentExpressionFaultType


#define soap_put__wsnt__InvalidMessageContentExpressionFault soap_put_wsnt__InvalidMessageContentExpressionFaultType


#define soap_write__wsnt__InvalidMessageContentExpressionFault soap_write_wsnt__InvalidMessageContentExpressionFaultType


#define soap_PUT__wsnt__InvalidMessageContentExpressionFault soap_PUT_wsnt__InvalidMessageContentExpressionFaultType


#define soap_POST_send__wsnt__InvalidMessageContentExpressionFault soap_POST_send_wsnt__InvalidMessageContentExpressionFaultType


#define soap_get__wsnt__InvalidMessageContentExpressionFault soap_get_wsnt__InvalidMessageContentExpressionFaultType


#define soap_read__wsnt__InvalidMessageContentExpressionFault soap_read_wsnt__InvalidMessageContentExpressionFaultType


#define soap_GET__wsnt__InvalidMessageContentExpressionFault soap_GET_wsnt__InvalidMessageContentExpressionFaultType


#define soap_POST_recv__wsnt__InvalidMessageContentExpressionFault soap_POST_recv_wsnt__InvalidMessageContentExpressionFaultType

#endif
/* _wsnt__InvalidProducerPropertiesExpressionFault is a typedef synonym of wsnt__InvalidProducerPropertiesExpressionFaultType */

#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault_DEFINED
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault_DEFINED

#define soap_default__wsnt__InvalidProducerPropertiesExpressionFault(soap, a) (a)->wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(soap)


#define soap_serialize__wsnt__InvalidProducerPropertiesExpressionFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__InvalidProducerPropertiesExpressionFault2s soap_wsnt__InvalidProducerPropertiesExpressionFaultType2s


#define soap_out__wsnt__InvalidProducerPropertiesExpressionFault soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_s2_wsnt__InvalidProducerPropertiesExpressionFault soap_s2wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_in__wsnt__InvalidProducerPropertiesExpressionFault soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_instantiate__wsnt__InvalidProducerPropertiesExpressionFault soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_new__wsnt__InvalidProducerPropertiesExpressionFault soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_new_req__wsnt__InvalidProducerPropertiesExpressionFault soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_new_set__wsnt__InvalidProducerPropertiesExpressionFault soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_put__wsnt__InvalidProducerPropertiesExpressionFault soap_put_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_write__wsnt__InvalidProducerPropertiesExpressionFault soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_PUT__wsnt__InvalidProducerPropertiesExpressionFault soap_PUT_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_POST_send__wsnt__InvalidProducerPropertiesExpressionFault soap_POST_send_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_get__wsnt__InvalidProducerPropertiesExpressionFault soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_read__wsnt__InvalidProducerPropertiesExpressionFault soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_GET__wsnt__InvalidProducerPropertiesExpressionFault soap_GET_wsnt__InvalidProducerPropertiesExpressionFaultType


#define soap_POST_recv__wsnt__InvalidProducerPropertiesExpressionFault soap_POST_recv_wsnt__InvalidProducerPropertiesExpressionFaultType

#endif
/* _wsnt__MultipleTopicsSpecifiedFault is a typedef synonym of wsnt__MultipleTopicsSpecifiedFaultType */

#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault_DEFINED
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault_DEFINED

#define soap_default__wsnt__MultipleTopicsSpecifiedFault(soap, a) (a)->wsnt__MultipleTopicsSpecifiedFaultType::soap_default(soap)


#define soap_serialize__wsnt__MultipleTopicsSpecifiedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__MultipleTopicsSpecifiedFault2s soap_wsnt__MultipleTopicsSpecifiedFaultType2s


#define soap_out__wsnt__MultipleTopicsSpecifiedFault soap_out_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_s2_wsnt__MultipleTopicsSpecifiedFault soap_s2wsnt__MultipleTopicsSpecifiedFaultType


#define soap_in__wsnt__MultipleTopicsSpecifiedFault soap_in_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_instantiate__wsnt__MultipleTopicsSpecifiedFault soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_new__wsnt__MultipleTopicsSpecifiedFault soap_new_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_new_req__wsnt__MultipleTopicsSpecifiedFault soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_new_set__wsnt__MultipleTopicsSpecifiedFault soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_put__wsnt__MultipleTopicsSpecifiedFault soap_put_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_write__wsnt__MultipleTopicsSpecifiedFault soap_write_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_PUT__wsnt__MultipleTopicsSpecifiedFault soap_PUT_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_POST_send__wsnt__MultipleTopicsSpecifiedFault soap_POST_send_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_get__wsnt__MultipleTopicsSpecifiedFault soap_get_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_read__wsnt__MultipleTopicsSpecifiedFault soap_read_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_GET__wsnt__MultipleTopicsSpecifiedFault soap_GET_wsnt__MultipleTopicsSpecifiedFaultType


#define soap_POST_recv__wsnt__MultipleTopicsSpecifiedFault soap_POST_recv_wsnt__MultipleTopicsSpecifiedFaultType

#endif
/* _wsnt__TopicNotSupportedFault is a typedef synonym of wsnt__TopicNotSupportedFaultType */

#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault_DEFINED
#define SOAP_TYPE__wsnt__TopicNotSupportedFault_DEFINED

#define soap_default__wsnt__TopicNotSupportedFault(soap, a) (a)->wsnt__TopicNotSupportedFaultType::soap_default(soap)


#define soap_serialize__wsnt__TopicNotSupportedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__TopicNotSupportedFault2s soap_wsnt__TopicNotSupportedFaultType2s


#define soap_out__wsnt__TopicNotSupportedFault soap_out_wsnt__TopicNotSupportedFaultType


#define soap_s2_wsnt__TopicNotSupportedFault soap_s2wsnt__TopicNotSupportedFaultType


#define soap_in__wsnt__TopicNotSupportedFault soap_in_wsnt__TopicNotSupportedFaultType


#define soap_instantiate__wsnt__TopicNotSupportedFault soap_instantiate_wsnt__TopicNotSupportedFaultType


#define soap_new__wsnt__TopicNotSupportedFault soap_new_wsnt__TopicNotSupportedFaultType


#define soap_new_req__wsnt__TopicNotSupportedFault soap_new_req_wsnt__TopicNotSupportedFaultType


#define soap_new_set__wsnt__TopicNotSupportedFault soap_new_set_wsnt__TopicNotSupportedFaultType


#define soap_put__wsnt__TopicNotSupportedFault soap_put_wsnt__TopicNotSupportedFaultType


#define soap_write__wsnt__TopicNotSupportedFault soap_write_wsnt__TopicNotSupportedFaultType


#define soap_PUT__wsnt__TopicNotSupportedFault soap_PUT_wsnt__TopicNotSupportedFaultType


#define soap_POST_send__wsnt__TopicNotSupportedFault soap_POST_send_wsnt__TopicNotSupportedFaultType


#define soap_get__wsnt__TopicNotSupportedFault soap_get_wsnt__TopicNotSupportedFaultType


#define soap_read__wsnt__TopicNotSupportedFault soap_read_wsnt__TopicNotSupportedFaultType


#define soap_GET__wsnt__TopicNotSupportedFault soap_GET_wsnt__TopicNotSupportedFaultType


#define soap_POST_recv__wsnt__TopicNotSupportedFault soap_POST_recv_wsnt__TopicNotSupportedFaultType

#endif
/* _wsnt__InvalidTopicExpressionFault is a typedef synonym of wsnt__InvalidTopicExpressionFaultType */

#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault_DEFINED
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault_DEFINED

#define soap_default__wsnt__InvalidTopicExpressionFault(soap, a) (a)->wsnt__InvalidTopicExpressionFaultType::soap_default(soap)


#define soap_serialize__wsnt__InvalidTopicExpressionFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__InvalidTopicExpressionFault2s soap_wsnt__InvalidTopicExpressionFaultType2s


#define soap_out__wsnt__InvalidTopicExpressionFault soap_out_wsnt__InvalidTopicExpressionFaultType


#define soap_s2_wsnt__InvalidTopicExpressionFault soap_s2wsnt__InvalidTopicExpressionFaultType


#define soap_in__wsnt__InvalidTopicExpressionFault soap_in_wsnt__InvalidTopicExpressionFaultType


#define soap_instantiate__wsnt__InvalidTopicExpressionFault soap_instantiate_wsnt__InvalidTopicExpressionFaultType


#define soap_new__wsnt__InvalidTopicExpressionFault soap_new_wsnt__InvalidTopicExpressionFaultType


#define soap_new_req__wsnt__InvalidTopicExpressionFault soap_new_req_wsnt__InvalidTopicExpressionFaultType


#define soap_new_set__wsnt__InvalidTopicExpressionFault soap_new_set_wsnt__InvalidTopicExpressionFaultType


#define soap_put__wsnt__InvalidTopicExpressionFault soap_put_wsnt__InvalidTopicExpressionFaultType


#define soap_write__wsnt__InvalidTopicExpressionFault soap_write_wsnt__InvalidTopicExpressionFaultType


#define soap_PUT__wsnt__InvalidTopicExpressionFault soap_PUT_wsnt__InvalidTopicExpressionFaultType


#define soap_POST_send__wsnt__InvalidTopicExpressionFault soap_POST_send_wsnt__InvalidTopicExpressionFaultType


#define soap_get__wsnt__InvalidTopicExpressionFault soap_get_wsnt__InvalidTopicExpressionFaultType


#define soap_read__wsnt__InvalidTopicExpressionFault soap_read_wsnt__InvalidTopicExpressionFaultType


#define soap_GET__wsnt__InvalidTopicExpressionFault soap_GET_wsnt__InvalidTopicExpressionFaultType


#define soap_POST_recv__wsnt__InvalidTopicExpressionFault soap_POST_recv_wsnt__InvalidTopicExpressionFaultType

#endif
/* _wsnt__TopicExpressionDialectUnknownFault is a typedef synonym of wsnt__TopicExpressionDialectUnknownFaultType */

#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault_DEFINED
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault_DEFINED

#define soap_default__wsnt__TopicExpressionDialectUnknownFault(soap, a) (a)->wsnt__TopicExpressionDialectUnknownFaultType::soap_default(soap)


#define soap_serialize__wsnt__TopicExpressionDialectUnknownFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__TopicExpressionDialectUnknownFault2s soap_wsnt__TopicExpressionDialectUnknownFaultType2s


#define soap_out__wsnt__TopicExpressionDialectUnknownFault soap_out_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_s2_wsnt__TopicExpressionDialectUnknownFault soap_s2wsnt__TopicExpressionDialectUnknownFaultType


#define soap_in__wsnt__TopicExpressionDialectUnknownFault soap_in_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_instantiate__wsnt__TopicExpressionDialectUnknownFault soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_new__wsnt__TopicExpressionDialectUnknownFault soap_new_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_new_req__wsnt__TopicExpressionDialectUnknownFault soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_new_set__wsnt__TopicExpressionDialectUnknownFault soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_put__wsnt__TopicExpressionDialectUnknownFault soap_put_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_write__wsnt__TopicExpressionDialectUnknownFault soap_write_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_PUT__wsnt__TopicExpressionDialectUnknownFault soap_PUT_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_POST_send__wsnt__TopicExpressionDialectUnknownFault soap_POST_send_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_get__wsnt__TopicExpressionDialectUnknownFault soap_get_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_read__wsnt__TopicExpressionDialectUnknownFault soap_read_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_GET__wsnt__TopicExpressionDialectUnknownFault soap_GET_wsnt__TopicExpressionDialectUnknownFaultType


#define soap_POST_recv__wsnt__TopicExpressionDialectUnknownFault soap_POST_recv_wsnt__TopicExpressionDialectUnknownFaultType

#endif
/* _wsnt__InvalidFilterFault is a typedef synonym of wsnt__InvalidFilterFaultType */

#ifndef SOAP_TYPE__wsnt__InvalidFilterFault_DEFINED
#define SOAP_TYPE__wsnt__InvalidFilterFault_DEFINED

#define soap_default__wsnt__InvalidFilterFault(soap, a) (a)->wsnt__InvalidFilterFaultType::soap_default(soap)


#define soap_serialize__wsnt__InvalidFilterFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__InvalidFilterFault2s soap_wsnt__InvalidFilterFaultType2s


#define soap_out__wsnt__InvalidFilterFault soap_out_wsnt__InvalidFilterFaultType


#define soap_s2_wsnt__InvalidFilterFault soap_s2wsnt__InvalidFilterFaultType


#define soap_in__wsnt__InvalidFilterFault soap_in_wsnt__InvalidFilterFaultType


#define soap_instantiate__wsnt__InvalidFilterFault soap_instantiate_wsnt__InvalidFilterFaultType


#define soap_new__wsnt__InvalidFilterFault soap_new_wsnt__InvalidFilterFaultType


#define soap_new_req__wsnt__InvalidFilterFault soap_new_req_wsnt__InvalidFilterFaultType


#define soap_new_set__wsnt__InvalidFilterFault soap_new_set_wsnt__InvalidFilterFaultType


#define soap_put__wsnt__InvalidFilterFault soap_put_wsnt__InvalidFilterFaultType


#define soap_write__wsnt__InvalidFilterFault soap_write_wsnt__InvalidFilterFaultType


#define soap_PUT__wsnt__InvalidFilterFault soap_PUT_wsnt__InvalidFilterFaultType


#define soap_POST_send__wsnt__InvalidFilterFault soap_POST_send_wsnt__InvalidFilterFaultType


#define soap_get__wsnt__InvalidFilterFault soap_get_wsnt__InvalidFilterFaultType


#define soap_read__wsnt__InvalidFilterFault soap_read_wsnt__InvalidFilterFaultType


#define soap_GET__wsnt__InvalidFilterFault soap_GET_wsnt__InvalidFilterFaultType


#define soap_POST_recv__wsnt__InvalidFilterFault soap_POST_recv_wsnt__InvalidFilterFaultType

#endif
/* _wsnt__SubscribeCreationFailedFault is a typedef synonym of wsnt__SubscribeCreationFailedFaultType */

#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault_DEFINED
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault_DEFINED

#define soap_default__wsnt__SubscribeCreationFailedFault(soap, a) (a)->wsnt__SubscribeCreationFailedFaultType::soap_default(soap)


#define soap_serialize__wsnt__SubscribeCreationFailedFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__SubscribeCreationFailedFault2s soap_wsnt__SubscribeCreationFailedFaultType2s


#define soap_out__wsnt__SubscribeCreationFailedFault soap_out_wsnt__SubscribeCreationFailedFaultType


#define soap_s2_wsnt__SubscribeCreationFailedFault soap_s2wsnt__SubscribeCreationFailedFaultType


#define soap_in__wsnt__SubscribeCreationFailedFault soap_in_wsnt__SubscribeCreationFailedFaultType


#define soap_instantiate__wsnt__SubscribeCreationFailedFault soap_instantiate_wsnt__SubscribeCreationFailedFaultType


#define soap_new__wsnt__SubscribeCreationFailedFault soap_new_wsnt__SubscribeCreationFailedFaultType


#define soap_new_req__wsnt__SubscribeCreationFailedFault soap_new_req_wsnt__SubscribeCreationFailedFaultType


#define soap_new_set__wsnt__SubscribeCreationFailedFault soap_new_set_wsnt__SubscribeCreationFailedFaultType


#define soap_put__wsnt__SubscribeCreationFailedFault soap_put_wsnt__SubscribeCreationFailedFaultType


#define soap_write__wsnt__SubscribeCreationFailedFault soap_write_wsnt__SubscribeCreationFailedFaultType


#define soap_PUT__wsnt__SubscribeCreationFailedFault soap_PUT_wsnt__SubscribeCreationFailedFaultType


#define soap_POST_send__wsnt__SubscribeCreationFailedFault soap_POST_send_wsnt__SubscribeCreationFailedFaultType


#define soap_get__wsnt__SubscribeCreationFailedFault soap_get_wsnt__SubscribeCreationFailedFaultType


#define soap_read__wsnt__SubscribeCreationFailedFault soap_read_wsnt__SubscribeCreationFailedFaultType


#define soap_GET__wsnt__SubscribeCreationFailedFault soap_GET_wsnt__SubscribeCreationFailedFaultType


#define soap_POST_recv__wsnt__SubscribeCreationFailedFault soap_POST_recv_wsnt__SubscribeCreationFailedFaultType

#endif
/* _wsnt__MessageContent is a typedef synonym of wsnt__QueryExpressionType */

#ifndef SOAP_TYPE__wsnt__MessageContent_DEFINED
#define SOAP_TYPE__wsnt__MessageContent_DEFINED

#define soap_default__wsnt__MessageContent(soap, a) (a)->wsnt__QueryExpressionType::soap_default(soap)


#define soap_serialize__wsnt__MessageContent(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__MessageContent2s soap_wsnt__QueryExpressionType2s


#define soap_out__wsnt__MessageContent soap_out_wsnt__QueryExpressionType


#define soap_s2_wsnt__MessageContent soap_s2wsnt__QueryExpressionType


#define soap_in__wsnt__MessageContent soap_in_wsnt__QueryExpressionType


#define soap_instantiate__wsnt__MessageContent soap_instantiate_wsnt__QueryExpressionType


#define soap_new__wsnt__MessageContent soap_new_wsnt__QueryExpressionType


#define soap_new_req__wsnt__MessageContent soap_new_req_wsnt__QueryExpressionType


#define soap_new_set__wsnt__MessageContent soap_new_set_wsnt__QueryExpressionType


#define soap_put__wsnt__MessageContent soap_put_wsnt__QueryExpressionType


#define soap_write__wsnt__MessageContent soap_write_wsnt__QueryExpressionType


#define soap_PUT__wsnt__MessageContent soap_PUT_wsnt__QueryExpressionType


#define soap_POST_send__wsnt__MessageContent soap_POST_send_wsnt__QueryExpressionType


#define soap_get__wsnt__MessageContent soap_get_wsnt__QueryExpressionType


#define soap_read__wsnt__MessageContent soap_read_wsnt__QueryExpressionType


#define soap_GET__wsnt__MessageContent soap_GET_wsnt__QueryExpressionType


#define soap_POST_recv__wsnt__MessageContent soap_POST_recv_wsnt__QueryExpressionType

#endif
/* _wsnt__ProducerProperties is a typedef synonym of wsnt__QueryExpressionType */

#ifndef SOAP_TYPE__wsnt__ProducerProperties_DEFINED
#define SOAP_TYPE__wsnt__ProducerProperties_DEFINED

#define soap_default__wsnt__ProducerProperties(soap, a) (a)->wsnt__QueryExpressionType::soap_default(soap)


#define soap_serialize__wsnt__ProducerProperties(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__ProducerProperties2s soap_wsnt__QueryExpressionType2s


#define soap_out__wsnt__ProducerProperties soap_out_wsnt__QueryExpressionType


#define soap_s2_wsnt__ProducerProperties soap_s2wsnt__QueryExpressionType


#define soap_in__wsnt__ProducerProperties soap_in_wsnt__QueryExpressionType


#define soap_instantiate__wsnt__ProducerProperties soap_instantiate_wsnt__QueryExpressionType


#define soap_new__wsnt__ProducerProperties soap_new_wsnt__QueryExpressionType


#define soap_new_req__wsnt__ProducerProperties soap_new_req_wsnt__QueryExpressionType


#define soap_new_set__wsnt__ProducerProperties soap_new_set_wsnt__QueryExpressionType


#define soap_put__wsnt__ProducerProperties soap_put_wsnt__QueryExpressionType


#define soap_write__wsnt__ProducerProperties soap_write_wsnt__QueryExpressionType


#define soap_PUT__wsnt__ProducerProperties soap_PUT_wsnt__QueryExpressionType


#define soap_POST_send__wsnt__ProducerProperties soap_POST_send_wsnt__QueryExpressionType


#define soap_get__wsnt__ProducerProperties soap_get_wsnt__QueryExpressionType


#define soap_read__wsnt__ProducerProperties soap_read_wsnt__QueryExpressionType


#define soap_GET__wsnt__ProducerProperties soap_GET_wsnt__QueryExpressionType


#define soap_POST_recv__wsnt__ProducerProperties soap_POST_recv_wsnt__QueryExpressionType

#endif
/* _wsnt__NotificationMessage is a typedef synonym of wsnt__NotificationMessageHolderType */

#ifndef SOAP_TYPE__wsnt__NotificationMessage_DEFINED
#define SOAP_TYPE__wsnt__NotificationMessage_DEFINED

#define soap_default__wsnt__NotificationMessage(soap, a) (a)->wsnt__NotificationMessageHolderType::soap_default(soap)


#define soap_serialize__wsnt__NotificationMessage(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__NotificationMessage2s soap_wsnt__NotificationMessageHolderType2s


#define soap_out__wsnt__NotificationMessage soap_out_wsnt__NotificationMessageHolderType


#define soap_s2_wsnt__NotificationMessage soap_s2wsnt__NotificationMessageHolderType


#define soap_in__wsnt__NotificationMessage soap_in_wsnt__NotificationMessageHolderType


#define soap_instantiate__wsnt__NotificationMessage soap_instantiate_wsnt__NotificationMessageHolderType


#define soap_new__wsnt__NotificationMessage soap_new_wsnt__NotificationMessageHolderType


#define soap_new_req__wsnt__NotificationMessage soap_new_req_wsnt__NotificationMessageHolderType


#define soap_new_set__wsnt__NotificationMessage soap_new_set_wsnt__NotificationMessageHolderType


#define soap_put__wsnt__NotificationMessage soap_put_wsnt__NotificationMessageHolderType


#define soap_write__wsnt__NotificationMessage soap_write_wsnt__NotificationMessageHolderType


#define soap_PUT__wsnt__NotificationMessage soap_PUT_wsnt__NotificationMessageHolderType


#define soap_POST_send__wsnt__NotificationMessage soap_POST_send_wsnt__NotificationMessageHolderType


#define soap_get__wsnt__NotificationMessage soap_get_wsnt__NotificationMessageHolderType


#define soap_read__wsnt__NotificationMessage soap_read_wsnt__NotificationMessageHolderType


#define soap_GET__wsnt__NotificationMessage soap_GET_wsnt__NotificationMessageHolderType


#define soap_POST_recv__wsnt__NotificationMessage soap_POST_recv_wsnt__NotificationMessageHolderType

#endif
/* _wsnt__Topic is a typedef synonym of wsnt__TopicExpressionType */

#ifndef SOAP_TYPE__wsnt__Topic_DEFINED
#define SOAP_TYPE__wsnt__Topic_DEFINED

#define soap_default__wsnt__Topic(soap, a) (a)->wsnt__TopicExpressionType::soap_default(soap)


#define soap_serialize__wsnt__Topic(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__Topic2s soap_wsnt__TopicExpressionType2s


#define soap_out__wsnt__Topic soap_out_wsnt__TopicExpressionType


#define soap_s2_wsnt__Topic soap_s2wsnt__TopicExpressionType


#define soap_in__wsnt__Topic soap_in_wsnt__TopicExpressionType


#define soap_instantiate__wsnt__Topic soap_instantiate_wsnt__TopicExpressionType


#define soap_new__wsnt__Topic soap_new_wsnt__TopicExpressionType


#define soap_new_req__wsnt__Topic soap_new_req_wsnt__TopicExpressionType


#define soap_new_set__wsnt__Topic soap_new_set_wsnt__TopicExpressionType


#define soap_put__wsnt__Topic soap_put_wsnt__TopicExpressionType


#define soap_write__wsnt__Topic soap_write_wsnt__TopicExpressionType


#define soap_PUT__wsnt__Topic soap_PUT_wsnt__TopicExpressionType


#define soap_POST_send__wsnt__Topic soap_POST_send_wsnt__TopicExpressionType


#define soap_get__wsnt__Topic soap_get_wsnt__TopicExpressionType


#define soap_read__wsnt__Topic soap_read_wsnt__TopicExpressionType


#define soap_GET__wsnt__Topic soap_GET_wsnt__TopicExpressionType


#define soap_POST_recv__wsnt__Topic soap_POST_recv_wsnt__TopicExpressionType

#endif
/* _wsnt__SubscriptionPolicy is a typedef synonym of wsnt__SubscriptionPolicyType */

#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy_DEFINED
#define SOAP_TYPE__wsnt__SubscriptionPolicy_DEFINED

#define soap_default__wsnt__SubscriptionPolicy(soap, a) (a)->wsnt__SubscriptionPolicyType::soap_default(soap)


#define soap_serialize__wsnt__SubscriptionPolicy(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__SubscriptionPolicy2s soap_wsnt__SubscriptionPolicyType2s


#define soap_out__wsnt__SubscriptionPolicy soap_out_wsnt__SubscriptionPolicyType


#define soap_s2_wsnt__SubscriptionPolicy soap_s2wsnt__SubscriptionPolicyType


#define soap_in__wsnt__SubscriptionPolicy soap_in_wsnt__SubscriptionPolicyType


#define soap_instantiate__wsnt__SubscriptionPolicy soap_instantiate_wsnt__SubscriptionPolicyType


#define soap_new__wsnt__SubscriptionPolicy soap_new_wsnt__SubscriptionPolicyType


#define soap_new_req__wsnt__SubscriptionPolicy soap_new_req_wsnt__SubscriptionPolicyType


#define soap_new_set__wsnt__SubscriptionPolicy soap_new_set_wsnt__SubscriptionPolicyType


#define soap_put__wsnt__SubscriptionPolicy soap_put_wsnt__SubscriptionPolicyType


#define soap_write__wsnt__SubscriptionPolicy soap_write_wsnt__SubscriptionPolicyType


#define soap_PUT__wsnt__SubscriptionPolicy soap_PUT_wsnt__SubscriptionPolicyType


#define soap_POST_send__wsnt__SubscriptionPolicy soap_POST_send_wsnt__SubscriptionPolicyType


#define soap_get__wsnt__SubscriptionPolicy soap_get_wsnt__SubscriptionPolicyType


#define soap_read__wsnt__SubscriptionPolicy soap_read_wsnt__SubscriptionPolicyType


#define soap_GET__wsnt__SubscriptionPolicy soap_GET_wsnt__SubscriptionPolicyType


#define soap_POST_recv__wsnt__SubscriptionPolicy soap_POST_recv_wsnt__SubscriptionPolicyType

#endif
/* _wsnt__Filter is a typedef synonym of wsnt__FilterType */

#ifndef SOAP_TYPE__wsnt__Filter_DEFINED
#define SOAP_TYPE__wsnt__Filter_DEFINED

#define soap_default__wsnt__Filter(soap, a) (a)->wsnt__FilterType::soap_default(soap)


#define soap_serialize__wsnt__Filter(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__Filter2s soap_wsnt__FilterType2s


#define soap_out__wsnt__Filter soap_out_wsnt__FilterType


#define soap_s2_wsnt__Filter soap_s2wsnt__FilterType


#define soap_in__wsnt__Filter soap_in_wsnt__FilterType


#define soap_instantiate__wsnt__Filter soap_instantiate_wsnt__FilterType


#define soap_new__wsnt__Filter soap_new_wsnt__FilterType


#define soap_new_req__wsnt__Filter soap_new_req_wsnt__FilterType


#define soap_new_set__wsnt__Filter soap_new_set_wsnt__FilterType


#define soap_put__wsnt__Filter soap_put_wsnt__FilterType


#define soap_write__wsnt__Filter soap_write_wsnt__FilterType


#define soap_PUT__wsnt__Filter soap_PUT_wsnt__FilterType


#define soap_POST_send__wsnt__Filter soap_POST_send_wsnt__FilterType


#define soap_get__wsnt__Filter soap_get_wsnt__FilterType


#define soap_read__wsnt__Filter soap_read_wsnt__FilterType


#define soap_GET__wsnt__Filter soap_GET_wsnt__FilterType


#define soap_POST_recv__wsnt__Filter soap_POST_recv_wsnt__FilterType

#endif
/* _wsnt__TopicExpressionDialect is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect_DEFINED
#define SOAP_TYPE__wsnt__TopicExpressionDialect_DEFINED

#define soap_default__wsnt__TopicExpressionDialect soap_default_xsd__anyURI


#define soap_serialize__wsnt__TopicExpressionDialect soap_serialize_xsd__anyURI


#define soap__wsnt__TopicExpressionDialect2s(soap, a) ((a).c_str())

#define soap_out__wsnt__TopicExpressionDialect soap_out_xsd__anyURI


#define soap_s2_wsnt__TopicExpressionDialect(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)

#define soap_in__wsnt__TopicExpressionDialect soap_in_xsd__anyURI


#define soap_instantiate__wsnt__TopicExpressionDialect soap_instantiate_xsd__anyURI


#define soap_new__wsnt__TopicExpressionDialect soap_new_xsd__anyURI


#define soap_put__wsnt__TopicExpressionDialect soap_put_xsd__anyURI


#define soap_write__wsnt__TopicExpressionDialect soap_write_xsd__anyURI


#define soap_PUT__wsnt__TopicExpressionDialect soap_PUT_xsd__anyURI


#define soap_POST_send__wsnt__TopicExpressionDialect soap_POST_send_xsd__anyURI


#define soap_get__wsnt__TopicExpressionDialect soap_get_xsd__anyURI


#define soap_read__wsnt__TopicExpressionDialect soap_read_xsd__anyURI


#define soap_GET__wsnt__TopicExpressionDialect soap_GET_xsd__anyURI


#define soap_POST_recv__wsnt__TopicExpressionDialect soap_POST_recv_xsd__anyURI

#endif
/* _wsnt__TopicExpression is a typedef synonym of wsnt__TopicExpressionType */

#ifndef SOAP_TYPE__wsnt__TopicExpression_DEFINED
#define SOAP_TYPE__wsnt__TopicExpression_DEFINED

#define soap_default__wsnt__TopicExpression(soap, a) (a)->wsnt__TopicExpressionType::soap_default(soap)


#define soap_serialize__wsnt__TopicExpression(soap, a) (a)->soap_serialize(soap)


#define soap__wsnt__TopicExpression2s soap_wsnt__TopicExpressionType2s


#define soap_out__wsnt__TopicExpression soap_out_wsnt__TopicExpressionType


#define soap_s2_wsnt__TopicExpression soap_s2wsnt__TopicExpressionType


#define soap_in__wsnt__TopicExpression soap_in_wsnt__TopicExpressionType


#define soap_instantiate__wsnt__TopicExpression soap_instantiate_wsnt__TopicExpressionType


#define soap_new__wsnt__TopicExpression soap_new_wsnt__TopicExpressionType


#define soap_new_req__wsnt__TopicExpression soap_new_req_wsnt__TopicExpressionType


#define soap_new_set__wsnt__TopicExpression soap_new_set_wsnt__TopicExpressionType


#define soap_put__wsnt__TopicExpression soap_put_wsnt__TopicExpressionType


#define soap_write__wsnt__TopicExpression soap_write_wsnt__TopicExpressionType


#define soap_PUT__wsnt__TopicExpression soap_PUT_wsnt__TopicExpressionType


#define soap_POST_send__wsnt__TopicExpression soap_POST_send_wsnt__TopicExpressionType


#define soap_get__wsnt__TopicExpression soap_get_wsnt__TopicExpressionType


#define soap_read__wsnt__TopicExpression soap_read_wsnt__TopicExpressionType


#define soap_GET__wsnt__TopicExpression soap_GET_wsnt__TopicExpressionType


#define soap_POST_recv__wsnt__TopicExpression soap_POST_recv_wsnt__TopicExpressionType

#endif
/* _wsrfbf__BaseFault is a typedef synonym of wsrfbf__BaseFaultType */

#ifndef SOAP_TYPE__wsrfbf__BaseFault_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFault_DEFINED

#define soap_default__wsrfbf__BaseFault(soap, a) (a)->wsrfbf__BaseFaultType::soap_default(soap)


#define soap_serialize__wsrfbf__BaseFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsrfbf__BaseFault2s soap_wsrfbf__BaseFaultType2s


#define soap_out__wsrfbf__BaseFault soap_out_wsrfbf__BaseFaultType


#define soap_s2_wsrfbf__BaseFault soap_s2wsrfbf__BaseFaultType


#define soap_in__wsrfbf__BaseFault soap_in_wsrfbf__BaseFaultType


#define soap_instantiate__wsrfbf__BaseFault soap_instantiate_wsrfbf__BaseFaultType


#define soap_new__wsrfbf__BaseFault soap_new_wsrfbf__BaseFaultType


#define soap_new_req__wsrfbf__BaseFault soap_new_req_wsrfbf__BaseFaultType


#define soap_new_set__wsrfbf__BaseFault soap_new_set_wsrfbf__BaseFaultType


#define soap_put__wsrfbf__BaseFault soap_put_wsrfbf__BaseFaultType


#define soap_write__wsrfbf__BaseFault soap_write_wsrfbf__BaseFaultType


#define soap_PUT__wsrfbf__BaseFault soap_PUT_wsrfbf__BaseFaultType


#define soap_POST_send__wsrfbf__BaseFault soap_POST_send_wsrfbf__BaseFaultType


#define soap_get__wsrfbf__BaseFault soap_get_wsrfbf__BaseFaultType


#define soap_read__wsrfbf__BaseFault soap_read_wsrfbf__BaseFaultType


#define soap_GET__wsrfbf__BaseFault soap_GET_wsrfbf__BaseFaultType


#define soap_POST_recv__wsrfbf__BaseFault soap_POST_recv_wsrfbf__BaseFaultType

#endif
/* _wsrfr__ResourceUnavailableFault is a typedef synonym of wsrfr__ResourceUnavailableFaultType */

#ifndef SOAP_TYPE__wsrfr__ResourceUnavailableFault_DEFINED
#define SOAP_TYPE__wsrfr__ResourceUnavailableFault_DEFINED

#define soap_default__wsrfr__ResourceUnavailableFault(soap, a) (a)->wsrfr__ResourceUnavailableFaultType::soap_default(soap)


#define soap_serialize__wsrfr__ResourceUnavailableFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsrfr__ResourceUnavailableFault2s soap_wsrfr__ResourceUnavailableFaultType2s


#define soap_out__wsrfr__ResourceUnavailableFault soap_out_wsrfr__ResourceUnavailableFaultType


#define soap_s2_wsrfr__ResourceUnavailableFault soap_s2wsrfr__ResourceUnavailableFaultType


#define soap_in__wsrfr__ResourceUnavailableFault soap_in_wsrfr__ResourceUnavailableFaultType


#define soap_instantiate__wsrfr__ResourceUnavailableFault soap_instantiate_wsrfr__ResourceUnavailableFaultType


#define soap_new__wsrfr__ResourceUnavailableFault soap_new_wsrfr__ResourceUnavailableFaultType


#define soap_new_req__wsrfr__ResourceUnavailableFault soap_new_req_wsrfr__ResourceUnavailableFaultType


#define soap_new_set__wsrfr__ResourceUnavailableFault soap_new_set_wsrfr__ResourceUnavailableFaultType


#define soap_put__wsrfr__ResourceUnavailableFault soap_put_wsrfr__ResourceUnavailableFaultType


#define soap_write__wsrfr__ResourceUnavailableFault soap_write_wsrfr__ResourceUnavailableFaultType


#define soap_PUT__wsrfr__ResourceUnavailableFault soap_PUT_wsrfr__ResourceUnavailableFaultType


#define soap_POST_send__wsrfr__ResourceUnavailableFault soap_POST_send_wsrfr__ResourceUnavailableFaultType


#define soap_get__wsrfr__ResourceUnavailableFault soap_get_wsrfr__ResourceUnavailableFaultType


#define soap_read__wsrfr__ResourceUnavailableFault soap_read_wsrfr__ResourceUnavailableFaultType


#define soap_GET__wsrfr__ResourceUnavailableFault soap_GET_wsrfr__ResourceUnavailableFaultType


#define soap_POST_recv__wsrfr__ResourceUnavailableFault soap_POST_recv_wsrfr__ResourceUnavailableFaultType

#endif
/* _wsrfr__ResourceUnknownFault is a typedef synonym of wsrfr__ResourceUnknownFaultType */

#ifndef SOAP_TYPE__wsrfr__ResourceUnknownFault_DEFINED
#define SOAP_TYPE__wsrfr__ResourceUnknownFault_DEFINED

#define soap_default__wsrfr__ResourceUnknownFault(soap, a) (a)->wsrfr__ResourceUnknownFaultType::soap_default(soap)


#define soap_serialize__wsrfr__ResourceUnknownFault(soap, a) (a)->soap_serialize(soap)


#define soap__wsrfr__ResourceUnknownFault2s soap_wsrfr__ResourceUnknownFaultType2s


#define soap_out__wsrfr__ResourceUnknownFault soap_out_wsrfr__ResourceUnknownFaultType


#define soap_s2_wsrfr__ResourceUnknownFault soap_s2wsrfr__ResourceUnknownFaultType


#define soap_in__wsrfr__ResourceUnknownFault soap_in_wsrfr__ResourceUnknownFaultType


#define soap_instantiate__wsrfr__ResourceUnknownFault soap_instantiate_wsrfr__ResourceUnknownFaultType


#define soap_new__wsrfr__ResourceUnknownFault soap_new_wsrfr__ResourceUnknownFaultType


#define soap_new_req__wsrfr__ResourceUnknownFault soap_new_req_wsrfr__ResourceUnknownFaultType


#define soap_new_set__wsrfr__ResourceUnknownFault soap_new_set_wsrfr__ResourceUnknownFaultType


#define soap_put__wsrfr__ResourceUnknownFault soap_put_wsrfr__ResourceUnknownFaultType


#define soap_write__wsrfr__ResourceUnknownFault soap_write_wsrfr__ResourceUnknownFaultType


#define soap_PUT__wsrfr__ResourceUnknownFault soap_PUT_wsrfr__ResourceUnknownFaultType


#define soap_POST_send__wsrfr__ResourceUnknownFault soap_POST_send_wsrfr__ResourceUnknownFaultType


#define soap_get__wsrfr__ResourceUnknownFault soap_get_wsrfr__ResourceUnknownFaultType


#define soap_read__wsrfr__ResourceUnknownFault soap_read_wsrfr__ResourceUnknownFaultType


#define soap_GET__wsrfr__ResourceUnknownFault soap_GET_wsrfr__ResourceUnknownFaultType


#define soap_POST_recv__wsrfr__ResourceUnknownFault soap_POST_recv_wsrfr__ResourceUnknownFaultType

#endif
/* _tev__Capabilities is a typedef synonym of tev__Capabilities */

#ifndef SOAP_TYPE__tev__Capabilities_DEFINED
#define SOAP_TYPE__tev__Capabilities_DEFINED

#define soap_default__tev__Capabilities(soap, a) (a)->tev__Capabilities::soap_default(soap)


#define soap_serialize__tev__Capabilities(soap, a) (a)->soap_serialize(soap)


#define soap__tev__Capabilities2s soap_tev__Capabilities2s


#define soap_out__tev__Capabilities soap_out_tev__Capabilities


#define soap_s2_tev__Capabilities soap_s2tev__Capabilities


#define soap_in__tev__Capabilities soap_in_tev__Capabilities


#define soap_instantiate__tev__Capabilities soap_instantiate_tev__Capabilities


#define soap_new__tev__Capabilities soap_new_tev__Capabilities


#define soap_new_req__tev__Capabilities soap_new_req_tev__Capabilities


#define soap_new_set__tev__Capabilities soap_new_set_tev__Capabilities


#define soap_put__tev__Capabilities soap_put_tev__Capabilities


#define soap_write__tev__Capabilities soap_write_tev__Capabilities


#define soap_PUT__tev__Capabilities soap_PUT_tev__Capabilities


#define soap_POST_send__tev__Capabilities soap_POST_send_tev__Capabilities


#define soap_get__tev__Capabilities soap_get_tev__Capabilities


#define soap_read__tev__Capabilities soap_read_tev__Capabilities


#define soap_GET__tev__Capabilities soap_GET_tev__Capabilities


#define soap_POST_recv__tev__Capabilities soap_POST_recv_tev__Capabilities

#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap*, const char*, _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _wstop__TopicNamespaceType_Topic * soap_new__wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate__wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}

inline _wstop__TopicNamespaceType_Topic * soap_new_req__wstop__TopicNamespaceType_Topic(
	struct soap *soap,
	const std::string& name)
{
	_wstop__TopicNamespaceType_Topic *_p = ::soap_new__wstop__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wstop__TopicNamespaceType_Topic::name = name;
	}
	return _p;
}

inline _wstop__TopicNamespaceType_Topic * soap_new_set__wstop__TopicNamespaceType_Topic(
	struct soap *soap,
	wstop__Documentation *documentation,
	char *__anyAttribute,
	wstop__QueryExpressionType *MessagePattern,
	const std::vector<wstop__TopicType *> & Topic,
	const std::vector<char *> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	std::string *parent)
{
	_wstop__TopicNamespaceType_Topic *_p = ::soap_new__wstop__TopicNamespaceType_Topic(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wstop__TopicNamespaceType_Topic::documentation = documentation;
		_p->_wstop__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute;
		_p->_wstop__TopicNamespaceType_Topic::MessagePattern = MessagePattern;
		_p->_wstop__TopicNamespaceType_Topic::Topic = Topic;
		_p->_wstop__TopicNamespaceType_Topic::__any = __any;
		_p->_wstop__TopicNamespaceType_Topic::name = name;
		_p->_wstop__TopicNamespaceType_Topic::messageTypes = messageTypes;
		_p->_wstop__TopicNamespaceType_Topic::final_ = final_;
		_p->_wstop__TopicNamespaceType_Topic::parent = parent;
	}
	return _p;
}

inline int soap_write__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__wstop__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _wstop__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__wstop__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _wstop__TopicNamespaceType_Topic const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType-Topic", p->soap_type() == SOAP_TYPE__wstop__TopicNamespaceType_Topic ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap*, _wstop__TopicNamespaceType_Topic *, const char*, const char*);

inline int soap_read__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wstop__TopicNamespaceType_Topic(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wstop__TopicNamespaceType_Topic(struct soap *soap, const char *URL, _wstop__TopicNamespaceType_Topic *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wstop__TopicNamespaceType_Topic(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p)
{
	if (::soap_read__wstop__TopicNamespaceType_Topic(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_req__wsnt__Subscribe_SubscriptionPolicy(
	struct soap *soap)
{
	_wsnt__Subscribe_SubscriptionPolicy *_p = ::soap_new__wsnt__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_set__wsnt__Subscribe_SubscriptionPolicy(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__Subscribe_SubscriptionPolicy *_p = ::soap_new__wsnt__Subscribe_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe_SubscriptionPolicy::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _wsnt__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _wsnt__Subscribe_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, const char *URL, _wsnt__Subscribe_SubscriptionPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__Subscribe_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p)
{
	if (::soap_read__wsnt__Subscribe_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message_DEFINED
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationMessageHolderType_Message * soap_new__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL);
}

inline _wsnt__NotificationMessageHolderType_Message * soap_new_req__wsnt__NotificationMessageHolderType_Message(
	struct soap *soap)
{
	_wsnt__NotificationMessageHolderType_Message *_p = ::soap_new__wsnt__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__NotificationMessageHolderType_Message * soap_new_set__wsnt__NotificationMessageHolderType_Message(
	struct soap *soap,
	char *__any)
{
	_wsnt__NotificationMessageHolderType_Message *_p = ::soap_new__wsnt__NotificationMessageHolderType_Message(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__NotificationMessageHolderType_Message::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__wsnt__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _wsnt__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__wsnt__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _wsnt__NotificationMessageHolderType_Message const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", p->soap_type() == SOAP_TYPE__wsnt__NotificationMessageHolderType_Message ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap*, _wsnt__NotificationMessageHolderType_Message *, const char*, const char*);

inline int soap_read__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__NotificationMessageHolderType_Message(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__NotificationMessageHolderType_Message(struct soap *soap, const char *URL, _wsnt__NotificationMessageHolderType_Message *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__NotificationMessageHolderType_Message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p)
{
	if (::soap_read__wsnt__NotificationMessageHolderType_Message(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_FaultCause * soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_req__wsrfbf__BaseFaultType_FaultCause(
	struct soap *soap)
{
	_wsrfbf__BaseFaultType_FaultCause *_p = ::soap_new__wsrfbf__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_set__wsrfbf__BaseFaultType_FaultCause(
	struct soap *soap,
	char *__any)
{
	_wsrfbf__BaseFaultType_FaultCause *_p = ::soap_new__wsrfbf__BaseFaultType_FaultCause(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_FaultCause::__any = __any;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_FaultCause const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsrfbf__BaseFaultType_FaultCause(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_FaultCause *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrfbf__BaseFaultType_FaultCause(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p)
{
	if (::soap_read__wsrfbf__BaseFaultType_FaultCause(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap*, const char*, _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_Description * soap_new__wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_Description * soap_new_req__wsrfbf__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item)
{
	_wsrfbf__BaseFaultType_Description *_p = ::soap_new__wsrfbf__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_Description::__item = __item;
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_Description * soap_new_set__wsrfbf__BaseFaultType_Description(
	struct soap *soap,
	const std::string& __item,
	std::string *xml__lang)
{
	_wsrfbf__BaseFaultType_Description *_p = ::soap_new__wsrfbf__BaseFaultType_Description(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_Description::__item = __item;
		_p->_wsrfbf__BaseFaultType_Description::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_Description const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-Description", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_Description ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap*, _wsrfbf__BaseFaultType_Description *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsrfbf__BaseFaultType_Description(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrfbf__BaseFaultType_Description(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_Description *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrfbf__BaseFaultType_Description(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p)
{
	if (::soap_read__wsrfbf__BaseFaultType_Description(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL);
}

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_req__wsrfbf__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect)
{
	_wsrfbf__BaseFaultType_ErrorCode *_p = ::soap_new__wsrfbf__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect;
	}
	return _p;
}

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_set__wsrfbf__BaseFaultType_ErrorCode(
	struct soap *soap,
	const std::string& dialect,
	char *__mixed)
{
	_wsrfbf__BaseFaultType_ErrorCode *_p = ::soap_new__wsrfbf__BaseFaultType_ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect;
		_p->_wsrfbf__BaseFaultType_ErrorCode::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", p->soap_type() == SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *, const char*, const char*);

inline int soap_read__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, const char *URL, _wsrfbf__BaseFaultType_ErrorCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrfbf__BaseFaultType_ErrorCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p)
{
	if (::soap_read__wsrfbf__BaseFaultType_ErrorCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _tev__CreatePullPointSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, _tev__CreatePullPointSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC1 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tev__CreatePullPointSubscription_SubscriptionPolicy * soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL);
}

inline _tev__CreatePullPointSubscription_SubscriptionPolicy * soap_new_req__tev__CreatePullPointSubscription_SubscriptionPolicy(
	struct soap *soap)
{
	_tev__CreatePullPointSubscription_SubscriptionPolicy *_p = ::soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__CreatePullPointSubscription_SubscriptionPolicy * soap_new_set__tev__CreatePullPointSubscription_SubscriptionPolicy(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_tev__CreatePullPointSubscription_SubscriptionPolicy *_p = ::soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__CreatePullPointSubscription_SubscriptionPolicy::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _tev__CreatePullPointSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription_SubscriptionPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription-SubscriptionPolicy", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy *, const char*, const char*);

inline int soap_read__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _tev__CreatePullPointSubscription_SubscriptionPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription_SubscriptionPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap *soap, _tev__CreatePullPointSubscription_SubscriptionPolicy *p)
{
	if (::soap_read__tev__CreatePullPointSubscription_SubscriptionPolicy(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* wstop__SimpleTopicExpression is a typedef synonym of xsd__QName */

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression_DEFINED
#define SOAP_TYPE_wstop__SimpleTopicExpression_DEFINED

#define soap_default_wstop__SimpleTopicExpression soap_default_xsd__QName


#define soap_serialize_wstop__SimpleTopicExpression soap_serialize_xsd__QName


#define soap_wstop__SimpleTopicExpression2s(soap, a) soap_QName2s((soap), (a).c_str())

#define soap_out_wstop__SimpleTopicExpression soap_out_xsd__QName


#define soap_s2wstop__SimpleTopicExpression(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)

#define soap_in_wstop__SimpleTopicExpression soap_in_xsd__QName


#define soap_instantiate_wstop__SimpleTopicExpression soap_instantiate_xsd__QName


#define soap_new_wstop__SimpleTopicExpression soap_new_xsd__QName


#define soap_put_wstop__SimpleTopicExpression soap_put_xsd__QName


#define soap_write_wstop__SimpleTopicExpression soap_write_xsd__QName


#define soap_PUT_wstop__SimpleTopicExpression soap_PUT_xsd__QName


#define soap_POST_send_wstop__SimpleTopicExpression soap_POST_send_xsd__QName


#define soap_get_wstop__SimpleTopicExpression soap_get_xsd__QName


#define soap_read_wstop__SimpleTopicExpression soap_read_xsd__QName


#define soap_GET_wstop__SimpleTopicExpression soap_GET_xsd__QName


#define soap_POST_recv_wstop__SimpleTopicExpression soap_POST_recv_xsd__QName

#endif
/* wstop__ConcreteTopicExpression is a typedef restriction of xsd__token */

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_wstop__ConcreteTopicExpression_DEFINED

#define soap_default_wstop__ConcreteTopicExpression soap_default_xsd__token


#define soap_serialize_wstop__ConcreteTopicExpression soap_serialize_xsd__token


#define soap_wstop__ConcreteTopicExpression2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wstop__ConcreteTopicExpression(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wstop__ConcreteTopicExpression soap_instantiate_xsd__token


#define soap_new_wstop__ConcreteTopicExpression soap_new_xsd__token

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wstop__ConcreteTopicExpression(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wstop__ConcreteTopicExpression(soap, p, "wstop:ConcreteTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wstop__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstop__ConcreteTopicExpression(soap, p, "wstop:ConcreteTopicExpression", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstop__ConcreteTopicExpression(soap, p, "wstop:ConcreteTopicExpression", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wstop__ConcreteTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wstop__ConcreteTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__ConcreteTopicExpression(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__ConcreteTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__ConcreteTopicExpression(struct soap *soap, std::string *p)
{
	if (::soap_read_wstop__ConcreteTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* wstop__FullTopicExpression is a typedef restriction of xsd__token */

#ifndef SOAP_TYPE_wstop__FullTopicExpression_DEFINED
#define SOAP_TYPE_wstop__FullTopicExpression_DEFINED

#define soap_default_wstop__FullTopicExpression soap_default_xsd__token


#define soap_serialize_wstop__FullTopicExpression soap_serialize_xsd__token


#define soap_wstop__FullTopicExpression2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wstop__FullTopicExpression(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wstop__FullTopicExpression soap_instantiate_xsd__token


#define soap_new_wstop__FullTopicExpression soap_new_xsd__token

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wstop__FullTopicExpression(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wstop__FullTopicExpression(soap, p, "wstop:FullTopicExpression", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wstop__FullTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstop__FullTopicExpression(soap, p, "wstop:FullTopicExpression", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__FullTopicExpression(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstop__FullTopicExpression(soap, p, "wstop:FullTopicExpression", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wstop__FullTopicExpression(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wstop__FullTopicExpression(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__FullTopicExpression(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__FullTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__FullTopicExpression(struct soap *soap, std::string *p)
{
	if (::soap_read_wstop__FullTopicExpression(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType_DEFINED

inline void soap_default_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);

#define soap_wsnt__AbsoluteOrRelativeTimeType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wsnt__AbsoluteOrRelativeTimeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wsnt__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_new_wsnt__AbsoluteOrRelativeTimeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, p, "wsnt:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, p, "wsnt:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, p, "wsnt:AbsoluteOrRelativeTimeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsnt__AbsoluteOrRelativeTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__AbsoluteOrRelativeTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__AbsoluteOrRelativeTimeType(struct soap *soap, std::string *p)
{
	if (::soap_read_wsnt__AbsoluteOrRelativeTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType_DEFINED
#define SOAP_TYPE_wstop__TopicSetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicSetType(struct soap*, const char*, int, const wstop__TopicSetType *, const char*);
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_in_wstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType *, const char*);
SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicSetType * soap_new_wstop__TopicSetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicSetType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicSetType * soap_new_req_wstop__TopicSetType(
	struct soap *soap)
{
	wstop__TopicSetType *_p = ::soap_new_wstop__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__TopicSetType * soap_new_set_wstop__TopicSetType(
	struct soap *soap,
	const std::vector<char *> & __any,
	wstop__Documentation *documentation__1,
	char *__anyAttribute__1)
{
	wstop__TopicSetType *_p = ::soap_new_wstop__TopicSetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicSetType::__any = __any;
		_p->wstop__ExtensibleDocumented::documentation = documentation__1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicSetType", p->soap_type() == SOAP_TYPE_wstop__TopicSetType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__TopicSetType(struct soap *soap, const char *URL, wstop__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicSetType", p->soap_type() == SOAP_TYPE_wstop__TopicSetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__TopicSetType(struct soap *soap, const char *URL, wstop__TopicSetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicSetType", p->soap_type() == SOAP_TYPE_wstop__TopicSetType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_get_wstop__TopicSetType(struct soap*, wstop__TopicSetType *, const char*, const char*);

inline int soap_read_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__TopicSetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__TopicSetType(struct soap *soap, const char *URL, wstop__TopicSetType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__TopicSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p)
{
	if (::soap_read_wstop__TopicSetType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicType_DEFINED
#define SOAP_TYPE_wstop__TopicType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicType(struct soap*, const char*, int, const wstop__TopicType *, const char*);
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_in_wstop__TopicType(struct soap*, const char*, wstop__TopicType *, const char*);
SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicType * soap_new_wstop__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicType * soap_new_req_wstop__TopicType(
	struct soap *soap,
	const std::string& name)
{
	wstop__TopicType *_p = ::soap_new_wstop__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicType::name = name;
	}
	return _p;
}

inline wstop__TopicType * soap_new_set_wstop__TopicType(
	struct soap *soap,
	wstop__QueryExpressionType *MessagePattern,
	const std::vector<wstop__TopicType *> & Topic,
	const std::vector<char *> & __any,
	const std::string& name,
	std::string *messageTypes,
	bool final_,
	wstop__Documentation *documentation__1,
	char *__anyAttribute__1)
{
	wstop__TopicType *_p = ::soap_new_wstop__TopicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicType::MessagePattern = MessagePattern;
		_p->wstop__TopicType::Topic = Topic;
		_p->wstop__TopicType::__any = __any;
		_p->wstop__TopicType::name = name;
		_p->wstop__TopicType::messageTypes = messageTypes;
		_p->wstop__TopicType::final_ = final_;
		_p->wstop__ExtensibleDocumented::documentation = documentation__1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wstop__TopicType(struct soap *soap, wstop__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicType", p->soap_type() == SOAP_TYPE_wstop__TopicType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__TopicType(struct soap *soap, const char *URL, wstop__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicType", p->soap_type() == SOAP_TYPE_wstop__TopicType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__TopicType(struct soap *soap, const char *URL, wstop__TopicType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicType", p->soap_type() == SOAP_TYPE_wstop__TopicType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_get_wstop__TopicType(struct soap*, wstop__TopicType *, const char*, const char*);

inline int soap_read_wstop__TopicType(struct soap *soap, wstop__TopicType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__TopicType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__TopicType(struct soap *soap, const char *URL, wstop__TopicType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__TopicType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__TopicType(struct soap *soap, wstop__TopicType *p)
{
	if (::soap_read_wstop__TopicType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType_DEFINED
#define SOAP_TYPE_wstop__TopicNamespaceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicNamespaceType(struct soap*, const char*, int, const wstop__TopicNamespaceType *, const char*);
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_in_wstop__TopicNamespaceType(struct soap*, const char*, wstop__TopicNamespaceType *, const char*);
SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicNamespaceType * soap_new_wstop__TopicNamespaceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__TopicNamespaceType(soap, n, NULL, NULL, NULL);
}

inline wstop__TopicNamespaceType * soap_new_req_wstop__TopicNamespaceType(
	struct soap *soap,
	const std::string& targetNamespace)
{
	wstop__TopicNamespaceType *_p = ::soap_new_wstop__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicNamespaceType::targetNamespace = targetNamespace;
	}
	return _p;
}

inline wstop__TopicNamespaceType * soap_new_set_wstop__TopicNamespaceType(
	struct soap *soap,
	const std::vector<_wstop__TopicNamespaceType_Topic> & Topic,
	const std::vector<char *> & __any,
	std::string *name,
	const std::string& targetNamespace,
	bool final_,
	wstop__Documentation *documentation__1,
	char *__anyAttribute__1)
{
	wstop__TopicNamespaceType *_p = ::soap_new_wstop__TopicNamespaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__TopicNamespaceType::Topic = Topic;
		_p->wstop__TopicNamespaceType::__any = __any;
		_p->wstop__TopicNamespaceType::name = name;
		_p->wstop__TopicNamespaceType::targetNamespace = targetNamespace;
		_p->wstop__TopicNamespaceType::final_ = final_;
		_p->wstop__ExtensibleDocumented::documentation = documentation__1;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType", p->soap_type() == SOAP_TYPE_wstop__TopicNamespaceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__TopicNamespaceType(struct soap *soap, const char *URL, wstop__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType", p->soap_type() == SOAP_TYPE_wstop__TopicNamespaceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__TopicNamespaceType(struct soap *soap, const char *URL, wstop__TopicNamespaceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:TopicNamespaceType", p->soap_type() == SOAP_TYPE_wstop__TopicNamespaceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_get_wstop__TopicNamespaceType(struct soap*, wstop__TopicNamespaceType *, const char*, const char*);

inline int soap_read_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__TopicNamespaceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__TopicNamespaceType(struct soap *soap, const char *URL, wstop__TopicNamespaceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__TopicNamespaceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p)
{
	if (::soap_read_wstop__TopicNamespaceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType_DEFINED
#define SOAP_TYPE_wstop__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__QueryExpressionType(struct soap*, const char*, int, const wstop__QueryExpressionType *, const char*);
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_in_wstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType *, const char*);
SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__QueryExpressionType * soap_new_wstop__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline wstop__QueryExpressionType * soap_new_req_wstop__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wstop__QueryExpressionType *_p = ::soap_new_wstop__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wstop__QueryExpressionType * soap_new_set_wstop__QueryExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__mixed)
{
	wstop__QueryExpressionType *_p = ::soap_new_wstop__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__QueryExpressionType::__any = __any;
		_p->wstop__QueryExpressionType::Dialect = Dialect;
		_p->wstop__QueryExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:QueryExpressionType", p->soap_type() == SOAP_TYPE_wstop__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__QueryExpressionType(struct soap *soap, const char *URL, wstop__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:QueryExpressionType", p->soap_type() == SOAP_TYPE_wstop__QueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__QueryExpressionType(struct soap *soap, const char *URL, wstop__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:QueryExpressionType", p->soap_type() == SOAP_TYPE_wstop__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_get_wstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *, const char*, const char*);

inline int soap_read_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__QueryExpressionType(struct soap *soap, const char *URL, wstop__QueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p)
{
	if (::soap_read_wstop__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented_DEFINED
#define SOAP_TYPE_wstop__ExtensibleDocumented_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ExtensibleDocumented(struct soap*, const char*, int, const wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_in_wstop__ExtensibleDocumented(struct soap*, const char*, wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ExtensibleDocumented * soap_new_wstop__ExtensibleDocumented(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__ExtensibleDocumented(soap, n, NULL, NULL, NULL);
}

inline wstop__ExtensibleDocumented * soap_new_req_wstop__ExtensibleDocumented(
	struct soap *soap)
{
	wstop__ExtensibleDocumented *_p = ::soap_new_wstop__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__ExtensibleDocumented * soap_new_set_wstop__ExtensibleDocumented(
	struct soap *soap,
	wstop__Documentation *documentation,
	char *__anyAttribute)
{
	wstop__ExtensibleDocumented *_p = ::soap_new_wstop__ExtensibleDocumented(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__ExtensibleDocumented::documentation = documentation;
		_p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_wstop__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__ExtensibleDocumented(struct soap *soap, const char *URL, wstop__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_wstop__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__ExtensibleDocumented(struct soap *soap, const char *URL, wstop__ExtensibleDocumented const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:ExtensibleDocumented", p->soap_type() == SOAP_TYPE_wstop__ExtensibleDocumented ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_get_wstop__ExtensibleDocumented(struct soap*, wstop__ExtensibleDocumented *, const char*, const char*);

inline int soap_read_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__ExtensibleDocumented(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__ExtensibleDocumented(struct soap *soap, const char *URL, wstop__ExtensibleDocumented *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__ExtensibleDocumented(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p)
{
	if (::soap_read_wstop__ExtensibleDocumented(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wstop__Documentation_DEFINED
#define SOAP_TYPE_wstop__Documentation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__Documentation(struct soap*, const char*, int, const wstop__Documentation *, const char*);
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_in_wstop__Documentation(struct soap*, const char*, wstop__Documentation *, const char*);
SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline wstop__Documentation * soap_new_wstop__Documentation(struct soap *soap, int n = -1)
{
	return soap_instantiate_wstop__Documentation(soap, n, NULL, NULL, NULL);
}

inline wstop__Documentation * soap_new_req_wstop__Documentation(
	struct soap *soap)
{
	wstop__Documentation *_p = ::soap_new_wstop__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wstop__Documentation * soap_new_set_wstop__Documentation(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__mixed)
{
	wstop__Documentation *_p = ::soap_new_wstop__Documentation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wstop__Documentation::__any = __any;
		_p->wstop__Documentation::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_wstop__Documentation(struct soap *soap, wstop__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:Documentation", p->soap_type() == SOAP_TYPE_wstop__Documentation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wstop__Documentation(struct soap *soap, const char *URL, wstop__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:Documentation", p->soap_type() == SOAP_TYPE_wstop__Documentation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstop__Documentation(struct soap *soap, const char *URL, wstop__Documentation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wstop:Documentation", p->soap_type() == SOAP_TYPE_wstop__Documentation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_get_wstop__Documentation(struct soap*, wstop__Documentation *, const char*, const char*);

inline int soap_read_wstop__Documentation(struct soap *soap, wstop__Documentation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wstop__Documentation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstop__Documentation(struct soap *soap, const char *URL, wstop__Documentation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstop__Documentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstop__Documentation(struct soap *soap, wstop__Documentation *p)
{
	if (::soap_read_wstop__Documentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse_DEFINED
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, int, const _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscriptionResponse * soap_new__wsnt__ResumeSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__ResumeSubscriptionResponse * soap_new_req__wsnt__ResumeSubscriptionResponse(
	struct soap *soap)
{
	_wsnt__ResumeSubscriptionResponse *_p = ::soap_new__wsnt__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__ResumeSubscriptionResponse * soap_new_set__wsnt__ResumeSubscriptionResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__ResumeSubscriptionResponse *_p = ::soap_new__wsnt__ResumeSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__ResumeSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__ResumeSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse *, const char*, const char*);

inline int soap_read__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__ResumeSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__ResumeSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__ResumeSubscriptionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__ResumeSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p)
{
	if (::soap_read__wsnt__ResumeSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription_DEFINED
#define SOAP_TYPE__wsnt__ResumeSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscription(struct soap*, const char*, int, const _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_in__wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscription * soap_new__wsnt__ResumeSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__ResumeSubscription(soap, n, NULL, NULL, NULL);
}

inline _wsnt__ResumeSubscription * soap_new_req__wsnt__ResumeSubscription(
	struct soap *soap)
{
	_wsnt__ResumeSubscription *_p = ::soap_new__wsnt__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__ResumeSubscription * soap_new_set__wsnt__ResumeSubscription(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__ResumeSubscription *_p = ::soap_new__wsnt__ResumeSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__ResumeSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscription", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__ResumeSubscription(struct soap *soap, const char *URL, _wsnt__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscription", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__ResumeSubscription(struct soap *soap, const char *URL, _wsnt__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeSubscription", p->soap_type() == SOAP_TYPE__wsnt__ResumeSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_get__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *, const char*, const char*);

inline int soap_read__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__ResumeSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__ResumeSubscription(struct soap *soap, const char *URL, _wsnt__ResumeSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p)
{
	if (::soap_read__wsnt__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse_DEFINED
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscriptionResponse(struct soap*, const char*, int, const _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__PauseSubscriptionResponse(struct soap*, const char*, _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscriptionResponse * soap_new__wsnt__PauseSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__PauseSubscriptionResponse * soap_new_req__wsnt__PauseSubscriptionResponse(
	struct soap *soap)
{
	_wsnt__PauseSubscriptionResponse *_p = ::soap_new__wsnt__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__PauseSubscriptionResponse * soap_new_set__wsnt__PauseSubscriptionResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__PauseSubscriptionResponse *_p = ::soap_new__wsnt__PauseSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__PauseSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__PauseSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__PauseSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__PauseSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscriptionResponse", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse *, const char*, const char*);

inline int soap_read__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__PauseSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__PauseSubscriptionResponse(struct soap *soap, const char *URL, _wsnt__PauseSubscriptionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__PauseSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p)
{
	if (::soap_read__wsnt__PauseSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription_DEFINED
#define SOAP_TYPE__wsnt__PauseSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscription(struct soap*, const char*, int, const _wsnt__PauseSubscription *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_in__wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription *, const char*);
SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscription * soap_new__wsnt__PauseSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__PauseSubscription(soap, n, NULL, NULL, NULL);
}

inline _wsnt__PauseSubscription * soap_new_req__wsnt__PauseSubscription(
	struct soap *soap)
{
	_wsnt__PauseSubscription *_p = ::soap_new__wsnt__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__PauseSubscription * soap_new_set__wsnt__PauseSubscription(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__PauseSubscription *_p = ::soap_new__wsnt__PauseSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__PauseSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscription", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__PauseSubscription(struct soap *soap, const char *URL, _wsnt__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscription", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__PauseSubscription(struct soap *soap, const char *URL, _wsnt__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseSubscription", p->soap_type() == SOAP_TYPE__wsnt__PauseSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_get__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *, const char*, const char*);

inline int soap_read__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__PauseSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__PauseSubscription(struct soap *soap, const char *URL, _wsnt__PauseSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p)
{
	if (::soap_read__wsnt__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse_DEFINED
#define SOAP_TYPE__wsnt__UnsubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UnsubscribeResponse(struct soap*, const char*, int, const _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_in__wsnt__UnsubscribeResponse(struct soap*, const char*, _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UnsubscribeResponse * soap_new__wsnt__UnsubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__UnsubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__UnsubscribeResponse * soap_new_req__wsnt__UnsubscribeResponse(
	struct soap *soap)
{
	_wsnt__UnsubscribeResponse *_p = ::soap_new__wsnt__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__UnsubscribeResponse * soap_new_set__wsnt__UnsubscribeResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__UnsubscribeResponse *_p = ::soap_new__wsnt__UnsubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__UnsubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__UnsubscribeResponse(struct soap *soap, const char *URL, _wsnt__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__UnsubscribeResponse(struct soap *soap, const char *URL, _wsnt__UnsubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__UnsubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_get__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse *, const char*, const char*);

inline int soap_read__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__UnsubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__UnsubscribeResponse(struct soap *soap, const char *URL, _wsnt__UnsubscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__UnsubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p)
{
	if (::soap_read__wsnt__UnsubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe_DEFINED
#define SOAP_TYPE__wsnt__Unsubscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Unsubscribe(struct soap*, const char*, int, const _wsnt__Unsubscribe *, const char*);
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_in__wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe *, const char*);
SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Unsubscribe * soap_new__wsnt__Unsubscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Unsubscribe(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Unsubscribe * soap_new_req__wsnt__Unsubscribe(
	struct soap *soap)
{
	_wsnt__Unsubscribe *_p = ::soap_new__wsnt__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__Unsubscribe * soap_new_set__wsnt__Unsubscribe(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__Unsubscribe *_p = ::soap_new__wsnt__Unsubscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Unsubscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Unsubscribe", p->soap_type() == SOAP_TYPE__wsnt__Unsubscribe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__Unsubscribe(struct soap *soap, const char *URL, _wsnt__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Unsubscribe", p->soap_type() == SOAP_TYPE__wsnt__Unsubscribe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__Unsubscribe(struct soap *soap, const char *URL, _wsnt__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Unsubscribe", p->soap_type() == SOAP_TYPE__wsnt__Unsubscribe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_get__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *, const char*, const char*);

inline int soap_read__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__Unsubscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__Unsubscribe(struct soap *soap, const char *URL, _wsnt__Unsubscribe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p)
{
	if (::soap_read__wsnt__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse_DEFINED
#define SOAP_TYPE__wsnt__RenewResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__RenewResponse(struct soap*, const char*, int, const _wsnt__RenewResponse *, const char*);
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_in__wsnt__RenewResponse(struct soap*, const char*, _wsnt__RenewResponse *, const char*);
SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__RenewResponse * soap_new__wsnt__RenewResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__RenewResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__RenewResponse * soap_new_req__wsnt__RenewResponse(
	struct soap *soap,
	time_t TerminationTime)
{
	_wsnt__RenewResponse *_p = ::soap_new__wsnt__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__RenewResponse::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _wsnt__RenewResponse * soap_new_set__wsnt__RenewResponse(
	struct soap *soap,
	time_t TerminationTime,
	time_t *CurrentTime,
	const std::vector<char *> & __any)
{
	_wsnt__RenewResponse *_p = ::soap_new__wsnt__RenewResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__RenewResponse::TerminationTime = TerminationTime;
		_p->_wsnt__RenewResponse::CurrentTime = CurrentTime;
		_p->_wsnt__RenewResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:RenewResponse", p->soap_type() == SOAP_TYPE__wsnt__RenewResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__RenewResponse(struct soap *soap, const char *URL, _wsnt__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:RenewResponse", p->soap_type() == SOAP_TYPE__wsnt__RenewResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__RenewResponse(struct soap *soap, const char *URL, _wsnt__RenewResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:RenewResponse", p->soap_type() == SOAP_TYPE__wsnt__RenewResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_get__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse *, const char*, const char*);

inline int soap_read__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__RenewResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__RenewResponse(struct soap *soap, const char *URL, _wsnt__RenewResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__RenewResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p)
{
	if (::soap_read__wsnt__RenewResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Renew_DEFINED
#define SOAP_TYPE__wsnt__Renew_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Renew(struct soap*, const char*, int, const _wsnt__Renew *, const char*);
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_in__wsnt__Renew(struct soap*, const char*, _wsnt__Renew *, const char*);
SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Renew * soap_new__wsnt__Renew(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Renew(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Renew * soap_new_req__wsnt__Renew(
	struct soap *soap,
	std::string *TerminationTime)
{
	_wsnt__Renew *_p = ::soap_new__wsnt__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Renew::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _wsnt__Renew * soap_new_set__wsnt__Renew(
	struct soap *soap,
	std::string *TerminationTime,
	const std::vector<char *> & __any)
{
	_wsnt__Renew *_p = ::soap_new__wsnt__Renew(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Renew::TerminationTime = TerminationTime;
		_p->_wsnt__Renew::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Renew(struct soap *soap, _wsnt__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Renew", p->soap_type() == SOAP_TYPE__wsnt__Renew ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__Renew(struct soap *soap, const char *URL, _wsnt__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Renew", p->soap_type() == SOAP_TYPE__wsnt__Renew ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__Renew(struct soap *soap, const char *URL, _wsnt__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Renew", p->soap_type() == SOAP_TYPE__wsnt__Renew ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_get__wsnt__Renew(struct soap*, _wsnt__Renew *, const char*, const char*);

inline int soap_read__wsnt__Renew(struct soap *soap, _wsnt__Renew *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__Renew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__Renew(struct soap *soap, const char *URL, _wsnt__Renew *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__Renew(struct soap *soap, _wsnt__Renew *p)
{
	if (::soap_read__wsnt__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse_DEFINED
#define SOAP_TYPE__wsnt__CreatePullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPointResponse(struct soap*, const char*, int, const _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_in__wsnt__CreatePullPointResponse(struct soap*, const char*, _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPointResponse * soap_new__wsnt__CreatePullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__CreatePullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__CreatePullPointResponse * soap_new_req__wsnt__CreatePullPointResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& PullPoint)
{
	_wsnt__CreatePullPointResponse *_p = ::soap_new__wsnt__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint;
	}
	return _p;
}

inline _wsnt__CreatePullPointResponse * soap_new_set__wsnt__CreatePullPointResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& PullPoint,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__CreatePullPointResponse *_p = ::soap_new__wsnt__CreatePullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint;
		_p->_wsnt__CreatePullPointResponse::__any = __any;
		_p->_wsnt__CreatePullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__CreatePullPointResponse(struct soap *soap, const char *URL, _wsnt__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__CreatePullPointResponse(struct soap *soap, const char *URL, _wsnt__CreatePullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_get__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse *, const char*, const char*);

inline int soap_read__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__CreatePullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__CreatePullPointResponse(struct soap *soap, const char *URL, _wsnt__CreatePullPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__CreatePullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p)
{
	if (::soap_read__wsnt__CreatePullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint_DEFINED
#define SOAP_TYPE__wsnt__CreatePullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPoint(struct soap*, const char*, int, const _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_in__wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPoint * soap_new__wsnt__CreatePullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__CreatePullPoint(soap, n, NULL, NULL, NULL);
}

inline _wsnt__CreatePullPoint * soap_new_req__wsnt__CreatePullPoint(
	struct soap *soap)
{
	_wsnt__CreatePullPoint *_p = ::soap_new__wsnt__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__CreatePullPoint * soap_new_set__wsnt__CreatePullPoint(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__CreatePullPoint *_p = ::soap_new__wsnt__CreatePullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__CreatePullPoint::__any = __any;
		_p->_wsnt__CreatePullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPoint", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__CreatePullPoint(struct soap *soap, const char *URL, _wsnt__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPoint", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__CreatePullPoint(struct soap *soap, const char *URL, _wsnt__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:CreatePullPoint", p->soap_type() == SOAP_TYPE__wsnt__CreatePullPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_get__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *, const char*, const char*);

inline int soap_read__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__CreatePullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__CreatePullPoint(struct soap *soap, const char *URL, _wsnt__CreatePullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p)
{
	if (::soap_read__wsnt__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse_DEFINED
#define SOAP_TYPE__wsnt__DestroyPullPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPointResponse(struct soap*, const char*, int, const _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_in__wsnt__DestroyPullPointResponse(struct soap*, const char*, _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPointResponse * soap_new__wsnt__DestroyPullPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__DestroyPullPointResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__DestroyPullPointResponse * soap_new_req__wsnt__DestroyPullPointResponse(
	struct soap *soap)
{
	_wsnt__DestroyPullPointResponse *_p = ::soap_new__wsnt__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__DestroyPullPointResponse * soap_new_set__wsnt__DestroyPullPointResponse(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__DestroyPullPointResponse *_p = ::soap_new__wsnt__DestroyPullPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__DestroyPullPointResponse::__any = __any;
		_p->_wsnt__DestroyPullPointResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__DestroyPullPointResponse(struct soap *soap, const char *URL, _wsnt__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__DestroyPullPointResponse(struct soap *soap, const char *URL, _wsnt__DestroyPullPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPointResponse", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_get__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse *, const char*, const char*);

inline int soap_read__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__DestroyPullPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__DestroyPullPointResponse(struct soap *soap, const char *URL, _wsnt__DestroyPullPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__DestroyPullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p)
{
	if (::soap_read__wsnt__DestroyPullPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint_DEFINED
#define SOAP_TYPE__wsnt__DestroyPullPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPoint(struct soap*, const char*, int, const _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_in__wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPoint * soap_new__wsnt__DestroyPullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__DestroyPullPoint(soap, n, NULL, NULL, NULL);
}

inline _wsnt__DestroyPullPoint * soap_new_req__wsnt__DestroyPullPoint(
	struct soap *soap)
{
	_wsnt__DestroyPullPoint *_p = ::soap_new__wsnt__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__DestroyPullPoint * soap_new_set__wsnt__DestroyPullPoint(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__DestroyPullPoint *_p = ::soap_new__wsnt__DestroyPullPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__DestroyPullPoint::__any = __any;
		_p->_wsnt__DestroyPullPoint::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPoint", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__DestroyPullPoint(struct soap *soap, const char *URL, _wsnt__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPoint", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__DestroyPullPoint(struct soap *soap, const char *URL, _wsnt__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:DestroyPullPoint", p->soap_type() == SOAP_TYPE__wsnt__DestroyPullPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_get__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *, const char*, const char*);

inline int soap_read__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__DestroyPullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__DestroyPullPoint(struct soap *soap, const char *URL, _wsnt__DestroyPullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p)
{
	if (::soap_read__wsnt__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse_DEFINED
#define SOAP_TYPE__wsnt__GetMessagesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessagesResponse(struct soap*, const char*, int, const _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_in__wsnt__GetMessagesResponse(struct soap*, const char*, _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessagesResponse * soap_new__wsnt__GetMessagesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetMessagesResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetMessagesResponse * soap_new_req__wsnt__GetMessagesResponse(
	struct soap *soap)
{
	_wsnt__GetMessagesResponse *_p = ::soap_new__wsnt__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetMessagesResponse * soap_new_set__wsnt__GetMessagesResponse(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__GetMessagesResponse *_p = ::soap_new__wsnt__GetMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetMessagesResponse::NotificationMessage = NotificationMessage;
		_p->_wsnt__GetMessagesResponse::__any = __any;
		_p->_wsnt__GetMessagesResponse::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessagesResponse", p->soap_type() == SOAP_TYPE__wsnt__GetMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__GetMessagesResponse(struct soap *soap, const char *URL, _wsnt__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessagesResponse", p->soap_type() == SOAP_TYPE__wsnt__GetMessagesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__GetMessagesResponse(struct soap *soap, const char *URL, _wsnt__GetMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessagesResponse", p->soap_type() == SOAP_TYPE__wsnt__GetMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_get__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse *, const char*, const char*);

inline int soap_read__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__GetMessagesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__GetMessagesResponse(struct soap *soap, const char *URL, _wsnt__GetMessagesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__GetMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p)
{
	if (::soap_read__wsnt__GetMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages_DEFINED
#define SOAP_TYPE__wsnt__GetMessages_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessages(struct soap*, const char*, int, const _wsnt__GetMessages *, const char*);
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_in__wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages *, const char*);
SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessages * soap_new__wsnt__GetMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetMessages(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetMessages * soap_new_req__wsnt__GetMessages(
	struct soap *soap)
{
	_wsnt__GetMessages *_p = ::soap_new__wsnt__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetMessages * soap_new_set__wsnt__GetMessages(
	struct soap *soap,
	std::string *MaximumNumber,
	const std::vector<char *> & __any,
	char *__anyAttribute)
{
	_wsnt__GetMessages *_p = ::soap_new__wsnt__GetMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetMessages::MaximumNumber = MaximumNumber;
		_p->_wsnt__GetMessages::__any = __any;
		_p->_wsnt__GetMessages::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessages", p->soap_type() == SOAP_TYPE__wsnt__GetMessages ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__GetMessages(struct soap *soap, const char *URL, _wsnt__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessages", p->soap_type() == SOAP_TYPE__wsnt__GetMessages ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__GetMessages(struct soap *soap, const char *URL, _wsnt__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetMessages", p->soap_type() == SOAP_TYPE__wsnt__GetMessages ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_get__wsnt__GetMessages(struct soap*, _wsnt__GetMessages *, const char*, const char*);

inline int soap_read__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__GetMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__GetMessages(struct soap *soap, const char *URL, _wsnt__GetMessages *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p)
{
	if (::soap_read__wsnt__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse_DEFINED
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessageResponse(struct soap*, const char*, int, const _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessageResponse(struct soap*, const char*, _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessageResponse * soap_new__wsnt__GetCurrentMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetCurrentMessageResponse * soap_new_req__wsnt__GetCurrentMessageResponse(
	struct soap *soap)
{
	_wsnt__GetCurrentMessageResponse *_p = ::soap_new__wsnt__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__GetCurrentMessageResponse * soap_new_set__wsnt__GetCurrentMessageResponse(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	_wsnt__GetCurrentMessageResponse *_p = ::soap_new__wsnt__GetCurrentMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessageResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__GetCurrentMessageResponse(struct soap *soap, const char *URL, _wsnt__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__GetCurrentMessageResponse(struct soap *soap, const char *URL, _wsnt__GetCurrentMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessageResponse", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse *, const char*, const char*);

inline int soap_read__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__GetCurrentMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__GetCurrentMessageResponse(struct soap *soap, const char *URL, _wsnt__GetCurrentMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__GetCurrentMessageResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p)
{
	if (::soap_read__wsnt__GetCurrentMessageResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage_DEFINED
#define SOAP_TYPE__wsnt__GetCurrentMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessage(struct soap*, const char*, int, const _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessage * soap_new__wsnt__GetCurrentMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__GetCurrentMessage(soap, n, NULL, NULL, NULL);
}

inline _wsnt__GetCurrentMessage * soap_new_req__wsnt__GetCurrentMessage(
	struct soap *soap,
	wsnt__TopicExpressionType *Topic)
{
	_wsnt__GetCurrentMessage *_p = ::soap_new__wsnt__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessage::Topic = Topic;
	}
	return _p;
}

inline _wsnt__GetCurrentMessage * soap_new_set__wsnt__GetCurrentMessage(
	struct soap *soap,
	wsnt__TopicExpressionType *Topic,
	const std::vector<char *> & __any)
{
	_wsnt__GetCurrentMessage *_p = ::soap_new__wsnt__GetCurrentMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__GetCurrentMessage::Topic = Topic;
		_p->_wsnt__GetCurrentMessage::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessage", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__GetCurrentMessage(struct soap *soap, const char *URL, _wsnt__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessage", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__GetCurrentMessage(struct soap *soap, const char *URL, _wsnt__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:GetCurrentMessage", p->soap_type() == SOAP_TYPE__wsnt__GetCurrentMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *, const char*, const char*);

inline int soap_read__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__GetCurrentMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__GetCurrentMessage(struct soap *soap, const char *URL, _wsnt__GetCurrentMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p)
{
	if (::soap_read__wsnt__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse_DEFINED
#define SOAP_TYPE__wsnt__SubscribeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscribeResponse(struct soap*, const char*, int, const _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_in__wsnt__SubscribeResponse(struct soap*, const char*, _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscribeResponse * soap_new__wsnt__SubscribeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__SubscribeResponse(soap, n, NULL, NULL, NULL);
}

inline _wsnt__SubscribeResponse * soap_new_req__wsnt__SubscribeResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference)
{
	_wsnt__SubscribeResponse *_p = ::soap_new__wsnt__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference;
	}
	return _p;
}

inline _wsnt__SubscribeResponse * soap_new_set__wsnt__SubscribeResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference,
	time_t *CurrentTime,
	time_t *TerminationTime,
	const std::vector<char *> & __any)
{
	_wsnt__SubscribeResponse *_p = ::soap_new__wsnt__SubscribeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference;
		_p->_wsnt__SubscribeResponse::CurrentTime = CurrentTime;
		_p->_wsnt__SubscribeResponse::TerminationTime = TerminationTime;
		_p->_wsnt__SubscribeResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__SubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__SubscribeResponse(struct soap *soap, const char *URL, _wsnt__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__SubscribeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__SubscribeResponse(struct soap *soap, const char *URL, _wsnt__SubscribeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeResponse", p->soap_type() == SOAP_TYPE__wsnt__SubscribeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_get__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse *, const char*, const char*);

inline int soap_read__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__SubscribeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__SubscribeResponse(struct soap *soap, const char *URL, _wsnt__SubscribeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__SubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p)
{
	if (::soap_read__wsnt__SubscribeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_DEFINED
#define SOAP_TYPE__wsnt__Subscribe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe(struct soap*, const char*, int, const _wsnt__Subscribe *, const char*);
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_in__wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe *, const char*);
SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe * soap_new__wsnt__Subscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Subscribe(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Subscribe * soap_new_req__wsnt__Subscribe(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference)
{
	_wsnt__Subscribe *_p = ::soap_new__wsnt__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _wsnt__Subscribe * soap_new_set__wsnt__Subscribe(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference,
	wsnt__FilterType *Filter,
	std::string *InitialTerminationTime,
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy,
	const std::vector<char *> & __any)
{
	_wsnt__Subscribe *_p = ::soap_new__wsnt__Subscribe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Subscribe::ConsumerReference = ConsumerReference;
		_p->_wsnt__Subscribe::Filter = Filter;
		_p->_wsnt__Subscribe::InitialTerminationTime = InitialTerminationTime;
		_p->_wsnt__Subscribe::SubscriptionPolicy = SubscriptionPolicy;
		_p->_wsnt__Subscribe::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe", p->soap_type() == SOAP_TYPE__wsnt__Subscribe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__Subscribe(struct soap *soap, const char *URL, _wsnt__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe", p->soap_type() == SOAP_TYPE__wsnt__Subscribe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__Subscribe(struct soap *soap, const char *URL, _wsnt__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Subscribe", p->soap_type() == SOAP_TYPE__wsnt__Subscribe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_get__wsnt__Subscribe(struct soap*, _wsnt__Subscribe *, const char*, const char*);

inline int soap_read__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__Subscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__Subscribe(struct soap *soap, const char *URL, _wsnt__Subscribe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p)
{
	if (::soap_read__wsnt__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw_DEFINED
#define SOAP_TYPE__wsnt__UseRaw_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UseRaw(struct soap*, const char*, int, const _wsnt__UseRaw *, const char*);
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_in__wsnt__UseRaw(struct soap*, const char*, _wsnt__UseRaw *, const char*);
SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UseRaw * soap_new__wsnt__UseRaw(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__UseRaw(soap, n, NULL, NULL, NULL);
}

inline _wsnt__UseRaw * soap_new_req__wsnt__UseRaw(
	struct soap *soap)
{
	_wsnt__UseRaw *_p = ::soap_new__wsnt__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__UseRaw * soap_new_set__wsnt__UseRaw(
	struct soap *soap)
{
	_wsnt__UseRaw *_p = ::soap_new__wsnt__UseRaw(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UseRaw", p->soap_type() == SOAP_TYPE__wsnt__UseRaw ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__UseRaw(struct soap *soap, const char *URL, _wsnt__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UseRaw", p->soap_type() == SOAP_TYPE__wsnt__UseRaw ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__UseRaw(struct soap *soap, const char *URL, _wsnt__UseRaw const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UseRaw", p->soap_type() == SOAP_TYPE__wsnt__UseRaw ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_get__wsnt__UseRaw(struct soap*, _wsnt__UseRaw *, const char*, const char*);

inline int soap_read__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__UseRaw(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__UseRaw(struct soap *soap, const char *URL, _wsnt__UseRaw *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__UseRaw(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p)
{
	if (::soap_read__wsnt__UseRaw(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__Notify_DEFINED
#define SOAP_TYPE__wsnt__Notify_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Notify(struct soap*, const char*, int, const _wsnt__Notify *, const char*);
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_in__wsnt__Notify(struct soap*, const char*, _wsnt__Notify *, const char*);
SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Notify * soap_new__wsnt__Notify(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__Notify(soap, n, NULL, NULL, NULL);
}

inline _wsnt__Notify * soap_new_req__wsnt__Notify(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage)
{
	_wsnt__Notify *_p = ::soap_new__wsnt__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Notify::NotificationMessage = NotificationMessage;
	}
	return _p;
}

inline _wsnt__Notify * soap_new_set__wsnt__Notify(
	struct soap *soap,
	const std::vector<wsnt__NotificationMessageHolderType *> & NotificationMessage,
	const std::vector<char *> & __any)
{
	_wsnt__Notify *_p = ::soap_new__wsnt__Notify(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__Notify::NotificationMessage = NotificationMessage;
		_p->_wsnt__Notify::__any = __any;
	}
	return _p;
}

inline int soap_write__wsnt__Notify(struct soap *soap, _wsnt__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Notify", p->soap_type() == SOAP_TYPE__wsnt__Notify ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__Notify(struct soap *soap, const char *URL, _wsnt__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Notify", p->soap_type() == SOAP_TYPE__wsnt__Notify ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__Notify(struct soap *soap, const char *URL, _wsnt__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:Notify", p->soap_type() == SOAP_TYPE__wsnt__Notify ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_get__wsnt__Notify(struct soap*, _wsnt__Notify *, const char*, const char*);

inline int soap_read__wsnt__Notify(struct soap *soap, _wsnt__Notify *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__Notify(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__Notify(struct soap *soap, const char *URL, _wsnt__Notify *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__Notify(struct soap *soap, _wsnt__Notify *p)
{
	if (::soap_read__wsnt__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP_DEFINED
#define SOAP_TYPE__wsnt__SubscriptionManagerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscriptionManagerRP(struct soap*, const char*, int, const _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_in__wsnt__SubscriptionManagerRP(struct soap*, const char*, _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscriptionManagerRP * soap_new__wsnt__SubscriptionManagerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__SubscriptionManagerRP(soap, n, NULL, NULL, NULL);
}

inline _wsnt__SubscriptionManagerRP * soap_new_req__wsnt__SubscriptionManagerRP(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference)
{
	_wsnt__SubscriptionManagerRP *_p = ::soap_new__wsnt__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
	}
	return _p;
}

inline _wsnt__SubscriptionManagerRP * soap_new_set__wsnt__SubscriptionManagerRP(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& ConsumerReference,
	wsnt__FilterType *Filter,
	wsnt__SubscriptionPolicyType *SubscriptionPolicy,
	time_t *CreationTime)
{
	_wsnt__SubscriptionManagerRP *_p = ::soap_new__wsnt__SubscriptionManagerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference;
		_p->_wsnt__SubscriptionManagerRP::Filter = Filter;
		_p->_wsnt__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy;
		_p->_wsnt__SubscriptionManagerRP::CreationTime = CreationTime;
	}
	return _p;
}

inline int soap_write__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__wsnt__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__SubscriptionManagerRP(struct soap *soap, const char *URL, _wsnt__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__wsnt__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__SubscriptionManagerRP(struct soap *soap, const char *URL, _wsnt__SubscriptionManagerRP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionManagerRP", p->soap_type() == SOAP_TYPE__wsnt__SubscriptionManagerRP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_get__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP *, const char*, const char*);

inline int soap_read__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__SubscriptionManagerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__SubscriptionManagerRP(struct soap *soap, const char *URL, _wsnt__SubscriptionManagerRP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__SubscriptionManagerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p)
{
	if (::soap_read__wsnt__SubscriptionManagerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP_DEFINED
#define SOAP_TYPE__wsnt__NotificationProducerRP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationProducerRP(struct soap*, const char*, int, const _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_in__wsnt__NotificationProducerRP(struct soap*, const char*, _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationProducerRP * soap_new__wsnt__NotificationProducerRP(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsnt__NotificationProducerRP(soap, n, NULL, NULL, NULL);
}

inline _wsnt__NotificationProducerRP * soap_new_req__wsnt__NotificationProducerRP(
	struct soap *soap)
{
	_wsnt__NotificationProducerRP *_p = ::soap_new__wsnt__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wsnt__NotificationProducerRP * soap_new_set__wsnt__NotificationProducerRP(
	struct soap *soap,
	const std::vector<wsnt__TopicExpressionType *> & TopicExpression,
	bool *FixedTopicSet,
	const std::vector<std::string> & TopicExpressionDialect,
	wstop__TopicSetType *wstop__TopicSet)
{
	_wsnt__NotificationProducerRP *_p = ::soap_new__wsnt__NotificationProducerRP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wsnt__NotificationProducerRP::TopicExpression = TopicExpression;
		_p->_wsnt__NotificationProducerRP::FixedTopicSet = FixedTopicSet;
		_p->_wsnt__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect;
		_p->_wsnt__NotificationProducerRP::wstop__TopicSet = wstop__TopicSet;
	}
	return _p;
}

inline int soap_write__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationProducerRP", p->soap_type() == SOAP_TYPE__wsnt__NotificationProducerRP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsnt__NotificationProducerRP(struct soap *soap, const char *URL, _wsnt__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationProducerRP", p->soap_type() == SOAP_TYPE__wsnt__NotificationProducerRP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsnt__NotificationProducerRP(struct soap *soap, const char *URL, _wsnt__NotificationProducerRP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationProducerRP", p->soap_type() == SOAP_TYPE__wsnt__NotificationProducerRP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_get__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP *, const char*, const char*);

inline int soap_read__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wsnt__NotificationProducerRP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsnt__NotificationProducerRP(struct soap *soap, const char *URL, _wsnt__NotificationProducerRP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsnt__NotificationProducerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p)
{
	if (::soap_read__wsnt__NotificationProducerRP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__ResumeFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__ResumeFailedFaultType(struct soap*, const char*, int, const wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_in_wsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__ResumeFailedFaultType * soap_new_wsnt__ResumeFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__ResumeFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__ResumeFailedFaultType * soap_new_req_wsnt__ResumeFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__ResumeFailedFaultType *_p = ::soap_new_wsnt__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__ResumeFailedFaultType * soap_new_set_wsnt__ResumeFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__ResumeFailedFaultType *_p = ::soap_new_wsnt__ResumeFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__ResumeFailedFaultType(struct soap *soap, const char *URL, wsnt__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__ResumeFailedFaultType(struct soap *soap, const char *URL, wsnt__ResumeFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:ResumeFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__ResumeFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_get_wsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__ResumeFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__ResumeFailedFaultType(struct soap *soap, const char *URL, wsnt__ResumeFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__ResumeFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p)
{
	if (::soap_read_wsnt__ResumeFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__PauseFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__PauseFailedFaultType(struct soap*, const char*, int, const wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_in_wsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__PauseFailedFaultType * soap_new_wsnt__PauseFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__PauseFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__PauseFailedFaultType * soap_new_req_wsnt__PauseFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__PauseFailedFaultType *_p = ::soap_new_wsnt__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__PauseFailedFaultType * soap_new_set_wsnt__PauseFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__PauseFailedFaultType *_p = ::soap_new_wsnt__PauseFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__PauseFailedFaultType(struct soap *soap, const char *URL, wsnt__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__PauseFailedFaultType(struct soap *soap, const char *URL, wsnt__PauseFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:PauseFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__PauseFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_get_wsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__PauseFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__PauseFailedFaultType(struct soap *soap, const char *URL, wsnt__PauseFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__PauseFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p)
{
	if (::soap_read_wsnt__PauseFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnableToDestroySubscriptionFaultType *_p = ::soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnableToDestroySubscriptionFaultType *_p = ::soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroySubscriptionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnableToDestroySubscriptionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroySubscriptionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p)
{
	if (::soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp__1)
{
	wsnt__UnacceptableTerminationTimeFaultType *_p = ::soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnacceptableTerminationTimeFaultType *_p = ::soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnacceptableTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableTerminationTimeFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p)
{
	if (::soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToCreatePullPointFaultType * soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToCreatePullPointFaultType * soap_new_req_wsnt__UnableToCreatePullPointFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnableToCreatePullPointFaultType *_p = ::soap_new_wsnt__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnableToCreatePullPointFaultType * soap_new_set_wsnt__UnableToCreatePullPointFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnableToCreatePullPointFaultType *_p = ::soap_new_wsnt__UnableToCreatePullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToCreatePullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnableToCreatePullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToCreatePullPointFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnableToCreatePullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p)
{
	if (::soap_read_wsnt__UnableToCreatePullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_req_wsnt__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnableToDestroyPullPointFaultType *_p = ::soap_new_wsnt__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_set_wsnt__UnableToDestroyPullPointFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnableToDestroyPullPointFaultType *_p = ::soap_new_wsnt__UnableToDestroyPullPointFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroyPullPointFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnableToDestroyPullPointFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, const char *URL, wsnt__UnableToDestroyPullPointFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnableToDestroyPullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p)
{
	if (::soap_read_wsnt__UnableToDestroyPullPointFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, int, const wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToGetMessagesFaultType * soap_new_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnableToGetMessagesFaultType * soap_new_req_wsnt__UnableToGetMessagesFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnableToGetMessagesFaultType *_p = ::soap_new_wsnt__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnableToGetMessagesFaultType * soap_new_set_wsnt__UnableToGetMessagesFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnableToGetMessagesFaultType *_p = ::soap_new_wsnt__UnableToGetMessagesFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, wsnt__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, wsnt__UnableToGetMessagesFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnableToGetMessagesFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnableToGetMessagesFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnableToGetMessagesFaultType(struct soap *soap, const char *URL, wsnt__UnableToGetMessagesFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnableToGetMessagesFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p)
{
	if (::soap_read_wsnt__UnableToGetMessagesFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType_DEFINED
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__NoCurrentMessageOnTopicFaultType *_p = ::soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__NoCurrentMessageOnTopicFaultType *_p = ::soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, wsnt__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, wsnt__NoCurrentMessageOnTopicFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", p->soap_type() == SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

inline int soap_read_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__NoCurrentMessageOnTopicFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, const char *URL, wsnt__NoCurrentMessageOnTopicFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p)
{
	if (::soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t Timestamp__1)
{
	wsnt__UnacceptableInitialTerminationTimeFaultType *_p = ::soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(
	struct soap *soap,
	time_t MinimumTime,
	time_t *MaximumTime,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnacceptableInitialTerminationTimeFaultType *_p = ::soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime;
		_p->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime;
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableInitialTerminationTimeFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, const char *URL, wsnt__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p)
{
	if (::soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType_DEFINED
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__NotifyMessageNotSupportedFaultType *_p = ::soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__NotifyMessageNotSupportedFaultType *_p = ::soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__NotifyMessageNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *, const char*, const char*);

inline int soap_read_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__NotifyMessageNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__NotifyMessageNotSupportedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p)
{
	if (::soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnsupportedPolicyRequestFaultType *_p = ::soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnsupportedPolicy,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnsupportedPolicyRequestFaultType *_p = ::soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy;
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnsupportedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnsupportedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnsupportedPolicyRequestFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p)
{
	if (::soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__UnrecognizedPolicyRequestFaultType *_p = ::soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnrecognizedPolicy,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__UnrecognizedPolicyRequestFaultType *_p = ::soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy;
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnrecognizedPolicyRequestFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", p->soap_type() == SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

inline int soap_read_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__UnrecognizedPolicyRequestFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, const char *URL, wsnt__UnrecognizedPolicyRequestFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p)
{
	if (::soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__InvalidMessageContentExpressionFaultType *_p = ::soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__InvalidMessageContentExpressionFaultType *_p = ::soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidMessageContentExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__InvalidMessageContentExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidMessageContentExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p)
{
	if (::soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__InvalidProducerPropertiesExpressionFaultType *_p = ::soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__InvalidProducerPropertiesExpressionFaultType *_p = ::soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidProducerPropertiesExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p)
{
	if (::soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType_DEFINED
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__MultipleTopicsSpecifiedFaultType *_p = ::soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__MultipleTopicsSpecifiedFaultType *_p = ::soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, wsnt__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, wsnt__MultipleTopicsSpecifiedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", p->soap_type() == SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

inline int soap_read_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__MultipleTopicsSpecifiedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, const char *URL, wsnt__MultipleTopicsSpecifiedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p)
{
	if (::soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType_DEFINED
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, int, const wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicNotSupportedFaultType * soap_new_wsnt__TopicNotSupportedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicNotSupportedFaultType * soap_new_req_wsnt__TopicNotSupportedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__TopicNotSupportedFaultType *_p = ::soap_new_wsnt__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__TopicNotSupportedFaultType * soap_new_set_wsnt__TopicNotSupportedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__TopicNotSupportedFaultType *_p = ::soap_new_wsnt__TopicNotSupportedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__TopicNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__TopicNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__TopicNotSupportedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicNotSupportedFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicNotSupportedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *, const char*, const char*);

inline int soap_read_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__TopicNotSupportedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__TopicNotSupportedFaultType(struct soap *soap, const char *URL, wsnt__TopicNotSupportedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__TopicNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p)
{
	if (::soap_read_wsnt__TopicNotSupportedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidTopicExpressionFaultType * soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidTopicExpressionFaultType * soap_new_req_wsnt__InvalidTopicExpressionFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__InvalidTopicExpressionFaultType *_p = ::soap_new_wsnt__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__InvalidTopicExpressionFaultType * soap_new_set_wsnt__InvalidTopicExpressionFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__InvalidTopicExpressionFaultType *_p = ::soap_new_wsnt__InvalidTopicExpressionFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidTopicExpressionFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__InvalidTopicExpressionFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, const char *URL, wsnt__InvalidTopicExpressionFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__InvalidTopicExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p)
{
	if (::soap_read_wsnt__InvalidTopicExpressionFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType_DEFINED
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__TopicExpressionDialectUnknownFaultType *_p = ::soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__TopicExpressionDialectUnknownFaultType *_p = ::soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, wsnt__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, wsnt__TopicExpressionDialectUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

inline int soap_read_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__TopicExpressionDialectUnknownFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, const char *URL, wsnt__TopicExpressionDialectUnknownFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p)
{
	if (::soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType_DEFINED
#define SOAP_TYPE_wsnt__InvalidFilterFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidFilterFaultType(struct soap*, const char*, int, const wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidFilterFaultType * soap_new_wsnt__InvalidFilterFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__InvalidFilterFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__InvalidFilterFaultType * soap_new_req_wsnt__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	time_t Timestamp__1)
{
	wsnt__InvalidFilterFaultType *_p = ::soap_new_wsnt__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__InvalidFilterFaultType * soap_new_set_wsnt__InvalidFilterFaultType(
	struct soap *soap,
	const std::vector<std::string> & UnknownFilter,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__InvalidFilterFaultType *_p = ::soap_new_wsnt__InvalidFilterFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter;
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__InvalidFilterFaultType(struct soap *soap, const char *URL, wsnt__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__InvalidFilterFaultType(struct soap *soap, const char *URL, wsnt__InvalidFilterFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:InvalidFilterFaultType", p->soap_type() == SOAP_TYPE_wsnt__InvalidFilterFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *, const char*, const char*);

inline int soap_read_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__InvalidFilterFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__InvalidFilterFaultType(struct soap *soap, const char *URL, wsnt__InvalidFilterFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__InvalidFilterFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p)
{
	if (::soap_read_wsnt__InvalidFilterFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType_DEFINED
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscribeCreationFailedFaultType * soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL);
}

inline wsnt__SubscribeCreationFailedFaultType * soap_new_req_wsnt__SubscribeCreationFailedFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsnt__SubscribeCreationFailedFaultType *_p = ::soap_new_wsnt__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsnt__SubscribeCreationFailedFaultType * soap_new_set_wsnt__SubscribeCreationFailedFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsnt__SubscribeCreationFailedFaultType *_p = ::soap_new_wsnt__SubscribeCreationFailedFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, wsnt__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, wsnt__SubscribeCreationFailedFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", p->soap_type() == SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_wsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *, const char*, const char*);

inline int soap_read_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__SubscribeCreationFailedFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, const char *URL, wsnt__SubscribeCreationFailedFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__SubscribeCreationFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p)
{
	if (::soap_read_wsnt__SubscribeCreationFailedFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_wsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotificationMessageHolderType(struct soap*, const char*, int, const wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_in_wsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotificationMessageHolderType * soap_new_wsnt__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}

inline wsnt__NotificationMessageHolderType * soap_new_req_wsnt__NotificationMessageHolderType(
	struct soap *soap,
	const _wsnt__NotificationMessageHolderType_Message& Message)
{
	wsnt__NotificationMessageHolderType *_p = ::soap_new_wsnt__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__NotificationMessageHolderType::Message = Message;
	}
	return _p;
}

inline wsnt__NotificationMessageHolderType * soap_new_set_wsnt__NotificationMessageHolderType(
	struct soap *soap,
	struct wsa5__EndpointReferenceType *SubscriptionReference,
	wsnt__TopicExpressionType *Topic,
	struct wsa5__EndpointReferenceType *ProducerReference,
	const _wsnt__NotificationMessageHolderType_Message& Message)
{
	wsnt__NotificationMessageHolderType *_p = ::soap_new_wsnt__NotificationMessageHolderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference;
		_p->wsnt__NotificationMessageHolderType::Topic = Topic;
		_p->wsnt__NotificationMessageHolderType::ProducerReference = ProducerReference;
		_p->wsnt__NotificationMessageHolderType::Message = Message;
	}
	return _p;
}

inline int soap_write_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_wsnt__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__NotificationMessageHolderType(struct soap *soap, const char *URL, wsnt__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_wsnt__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__NotificationMessageHolderType(struct soap *soap, const char *URL, wsnt__NotificationMessageHolderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:NotificationMessageHolderType", p->soap_type() == SOAP_TYPE_wsnt__NotificationMessageHolderType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_get_wsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *, const char*, const char*);

inline int soap_read_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__NotificationMessageHolderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__NotificationMessageHolderType(struct soap *soap, const char *URL, wsnt__NotificationMessageHolderType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__NotificationMessageHolderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p)
{
	if (::soap_read_wsnt__NotificationMessageHolderType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_wsnt__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscriptionPolicyType(struct soap*, const char*, int, const wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_in_wsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscriptionPolicyType * soap_new_wsnt__SubscriptionPolicyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__SubscriptionPolicyType(soap, n, NULL, NULL, NULL);
}

inline wsnt__SubscriptionPolicyType * soap_new_req_wsnt__SubscriptionPolicyType(
	struct soap *soap)
{
	wsnt__SubscriptionPolicyType *_p = ::soap_new_wsnt__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wsnt__SubscriptionPolicyType * soap_new_set_wsnt__SubscriptionPolicyType(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	wsnt__SubscriptionPolicyType *_p = ::soap_new_wsnt__SubscriptionPolicyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__SubscriptionPolicyType::__any = __any;
	}
	return _p;
}

inline int soap_write_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_wsnt__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__SubscriptionPolicyType(struct soap *soap, const char *URL, wsnt__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_wsnt__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__SubscriptionPolicyType(struct soap *soap, const char *URL, wsnt__SubscriptionPolicyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:SubscriptionPolicyType", p->soap_type() == SOAP_TYPE_wsnt__SubscriptionPolicyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_get_wsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *, const char*, const char*);

inline int soap_read_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__SubscriptionPolicyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__SubscriptionPolicyType(struct soap *soap, const char *URL, wsnt__SubscriptionPolicyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__SubscriptionPolicyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p)
{
	if (::soap_read_wsnt__SubscriptionPolicyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__FilterType_DEFINED
#define SOAP_TYPE_wsnt__FilterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap*, const char*, int, const wsnt__FilterType *, const char*);
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap*, const char*, wsnt__FilterType *, const char*);
SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__FilterType * soap_new_wsnt__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__FilterType(soap, n, NULL, NULL, NULL);
}

inline wsnt__FilterType * soap_new_req_wsnt__FilterType(
	struct soap *soap)
{
	wsnt__FilterType *_p = ::soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wsnt__FilterType * soap_new_set_wsnt__FilterType(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	wsnt__FilterType *_p = ::soap_new_wsnt__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__FilterType::__any = __any;
	}
	return _p;
}

inline int soap_write_wsnt__FilterType(struct soap *soap, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:FilterType", p->soap_type() == SOAP_TYPE_wsnt__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap*, wsnt__FilterType *, const char*, const char*);

inline int soap_read_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__FilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__FilterType(struct soap *soap, const char *URL, wsnt__FilterType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__FilterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p)
{
	if (::soap_read_wsnt__FilterType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_wsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionType(struct soap*, const char*, int, const wsnt__TopicExpressionType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType *, const char*);
SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionType * soap_new_wsnt__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__TopicExpressionType(soap, n, NULL, NULL, NULL);
}

inline wsnt__TopicExpressionType * soap_new_req_wsnt__TopicExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wsnt__TopicExpressionType *_p = ::soap_new_wsnt__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__TopicExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wsnt__TopicExpressionType * soap_new_set_wsnt__TopicExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__anyAttribute,
	char *__mixed)
{
	wsnt__TopicExpressionType *_p = ::soap_new_wsnt__TopicExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__TopicExpressionType::__any = __any;
		_p->wsnt__TopicExpressionType::Dialect = Dialect;
		_p->wsnt__TopicExpressionType::__anyAttribute = __anyAttribute;
		_p->wsnt__TopicExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__TopicExpressionType(struct soap *soap, const char *URL, wsnt__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__TopicExpressionType(struct soap *soap, const char *URL, wsnt__TopicExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:TopicExpressionType", p->soap_type() == SOAP_TYPE_wsnt__TopicExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *, const char*, const char*);

inline int soap_read_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__TopicExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__TopicExpressionType(struct soap *soap, const char *URL, wsnt__TopicExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__TopicExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p)
{
	if (::soap_read_wsnt__TopicExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType_DEFINED
#define SOAP_TYPE_wsnt__QueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__QueryExpressionType(struct soap*, const char*, int, const wsnt__QueryExpressionType *, const char*);
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_in_wsnt__QueryExpressionType(struct soap*, const char*, wsnt__QueryExpressionType *, const char*);
SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__QueryExpressionType * soap_new_wsnt__QueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsnt__QueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline wsnt__QueryExpressionType * soap_new_req_wsnt__QueryExpressionType(
	struct soap *soap,
	const std::string& Dialect)
{
	wsnt__QueryExpressionType *_p = ::soap_new_wsnt__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__QueryExpressionType::Dialect = Dialect;
	}
	return _p;
}

inline wsnt__QueryExpressionType * soap_new_set_wsnt__QueryExpressionType(
	struct soap *soap,
	char *__any,
	const std::string& Dialect,
	char *__mixed)
{
	wsnt__QueryExpressionType *_p = ::soap_new_wsnt__QueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsnt__QueryExpressionType::__any = __any;
		_p->wsnt__QueryExpressionType::Dialect = Dialect;
		_p->wsnt__QueryExpressionType::__mixed = __mixed;
	}
	return _p;
}

inline int soap_write_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:QueryExpressionType", p->soap_type() == SOAP_TYPE_wsnt__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsnt__QueryExpressionType(struct soap *soap, const char *URL, wsnt__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:QueryExpressionType", p->soap_type() == SOAP_TYPE_wsnt__QueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsnt__QueryExpressionType(struct soap *soap, const char *URL, wsnt__QueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsnt:QueryExpressionType", p->soap_type() == SOAP_TYPE_wsnt__QueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_get_wsnt__QueryExpressionType(struct soap*, wsnt__QueryExpressionType *, const char*, const char*);

inline int soap_read_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsnt__QueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsnt__QueryExpressionType(struct soap *soap, const char *URL, wsnt__QueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsnt__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p)
{
	if (::soap_read_wsnt__QueryExpressionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType_DEFINED
#define SOAP_TYPE_wsrfbf__BaseFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfbf__BaseFaultType(struct soap*, const char*, int, const wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_in_wsrfbf__BaseFaultType(struct soap*, const char*, wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfbf__BaseFaultType * soap_new_wsrfbf__BaseFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrfbf__BaseFaultType(soap, n, NULL, NULL, NULL);
}

inline wsrfbf__BaseFaultType * soap_new_req_wsrfbf__BaseFaultType(
	struct soap *soap,
	time_t Timestamp)
{
	wsrfbf__BaseFaultType *_p = ::soap_new_wsrfbf__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp;
	}
	return _p;
}

inline wsrfbf__BaseFaultType * soap_new_set_wsrfbf__BaseFaultType(
	struct soap *soap,
	const std::vector<char *> & __any,
	time_t Timestamp,
	struct wsa5__EndpointReferenceType *Originator,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause,
	char *__anyAttribute)
{
	wsrfbf__BaseFaultType *_p = ::soap_new_wsrfbf__BaseFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp;
		_p->wsrfbf__BaseFaultType::Originator = Originator;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode;
		_p->wsrfbf__BaseFaultType::Description = Description;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType", p->soap_type() == SOAP_TYPE_wsrfbf__BaseFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrfbf__BaseFaultType(struct soap *soap, const char *URL, wsrfbf__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType", p->soap_type() == SOAP_TYPE_wsrfbf__BaseFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrfbf__BaseFaultType(struct soap *soap, const char *URL, wsrfbf__BaseFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfbf:BaseFaultType", p->soap_type() == SOAP_TYPE_wsrfbf__BaseFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_get_wsrfbf__BaseFaultType(struct soap*, wsrfbf__BaseFaultType *, const char*, const char*);

inline int soap_read_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsrfbf__BaseFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrfbf__BaseFaultType(struct soap *soap, const char *URL, wsrfbf__BaseFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrfbf__BaseFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p)
{
	if (::soap_read_wsrfbf__BaseFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType_DEFINED
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnavailableFaultType(struct soap*, const char*, int, const wsrfr__ResourceUnavailableFaultType *, const char*);
SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnavailableFaultType(struct soap*, const char*, wsrfr__ResourceUnavailableFaultType *, const char*);
SOAP_FMAC1 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnavailableFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfr__ResourceUnavailableFaultType * soap_new_wsrfr__ResourceUnavailableFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrfr__ResourceUnavailableFaultType(soap, n, NULL, NULL, NULL);
}

inline wsrfr__ResourceUnavailableFaultType * soap_new_req_wsrfr__ResourceUnavailableFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsrfr__ResourceUnavailableFaultType *_p = ::soap_new_wsrfr__ResourceUnavailableFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsrfr__ResourceUnavailableFaultType * soap_new_set_wsrfr__ResourceUnavailableFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsrfr__ResourceUnavailableFaultType *_p = ::soap_new_wsrfr__ResourceUnavailableFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsrfr__ResourceUnavailableFaultType(struct soap *soap, wsrfr__ResourceUnavailableFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnavailableFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnavailableFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrfr__ResourceUnavailableFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnavailableFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnavailableFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnavailableFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrfr__ResourceUnavailableFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnavailableFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnavailableFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnavailableFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnavailableFaultType(struct soap*, wsrfr__ResourceUnavailableFaultType *, const char*, const char*);

inline int soap_read_wsrfr__ResourceUnavailableFaultType(struct soap *soap, wsrfr__ResourceUnavailableFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsrfr__ResourceUnavailableFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrfr__ResourceUnavailableFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnavailableFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrfr__ResourceUnavailableFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsrfr__ResourceUnavailableFaultType(struct soap *soap, wsrfr__ResourceUnavailableFaultType *p)
{
	if (::soap_read_wsrfr__ResourceUnavailableFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType_DEFINED
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfr__ResourceUnknownFaultType(struct soap*, const char*, int, const wsrfr__ResourceUnknownFaultType *, const char*);
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_in_wsrfr__ResourceUnknownFaultType(struct soap*, const char*, wsrfr__ResourceUnknownFaultType *, const char*);
SOAP_FMAC1 wsrfr__ResourceUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfr__ResourceUnknownFaultType * soap_new_wsrfr__ResourceUnknownFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrfr__ResourceUnknownFaultType(soap, n, NULL, NULL, NULL);
}

inline wsrfr__ResourceUnknownFaultType * soap_new_req_wsrfr__ResourceUnknownFaultType(
	struct soap *soap,
	time_t Timestamp__1)
{
	wsrfr__ResourceUnknownFaultType *_p = ::soap_new_wsrfr__ResourceUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
	}
	return _p;
}

inline wsrfr__ResourceUnknownFaultType * soap_new_set_wsrfr__ResourceUnknownFaultType(
	struct soap *soap,
	const std::vector<char *> & __any__1,
	time_t Timestamp__1,
	struct wsa5__EndpointReferenceType *Originator__1,
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode__1,
	const std::vector<_wsrfbf__BaseFaultType_Description> & Description__1,
	_wsrfbf__BaseFaultType_FaultCause *FaultCause__1,
	char *__anyAttribute__1)
{
	wsrfr__ResourceUnknownFaultType *_p = ::soap_new_wsrfr__ResourceUnknownFaultType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wsrfbf__BaseFaultType::__any = __any__1;
		_p->wsrfbf__BaseFaultType::Timestamp = Timestamp__1;
		_p->wsrfbf__BaseFaultType::Originator = Originator__1;
		_p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode__1;
		_p->wsrfbf__BaseFaultType::Description = Description__1;
		_p->wsrfbf__BaseFaultType::FaultCause = FaultCause__1;
		_p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute__1;
	}
	return _p;
}

inline int soap_write_wsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnknownFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrfr__ResourceUnknownFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnknownFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnknownFaultType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrfr__ResourceUnknownFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnknownFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wsrfr:ResourceUnknownFaultType", p->soap_type() == SOAP_TYPE_wsrfr__ResourceUnknownFaultType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType * SOAP_FMAC4 soap_get_wsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *, const char*, const char*);

inline int soap_read_wsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wsrfr__ResourceUnknownFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrfr__ResourceUnknownFaultType(struct soap *soap, const char *URL, wsrfr__ResourceUnknownFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrfr__ResourceUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsrfr__ResourceUnknownFaultType(struct soap *soap, wsrfr__ResourceUnknownFaultType *p)
{
	if (::soap_read_wsrfr__ResourceUnknownFaultType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse_DEFINED
#define SOAP_TYPE__tev__GetEventPropertiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__GetEventPropertiesResponse(struct soap*, const char*, int, const _tev__GetEventPropertiesResponse *, const char*);
SOAP_FMAC3 _tev__GetEventPropertiesResponse * SOAP_FMAC4 soap_in__tev__GetEventPropertiesResponse(struct soap*, const char*, _tev__GetEventPropertiesResponse *, const char*);
SOAP_FMAC1 _tev__GetEventPropertiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetEventPropertiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__GetEventPropertiesResponse * soap_new__tev__GetEventPropertiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__GetEventPropertiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__GetEventPropertiesResponse * soap_new_req__tev__GetEventPropertiesResponse(
	struct soap *soap,
	const std::vector<std::string> & TopicNamespaceLocation,
	bool wsnt__FixedTopicSet,
	wstop__TopicSetType *wstop__TopicSet,
	const std::vector<std::string> & wsnt__TopicExpressionDialect,
	const std::vector<std::string> & MessageContentFilterDialect,
	const std::vector<std::string> & MessageContentSchemaLocation)
{
	_tev__GetEventPropertiesResponse *_p = ::soap_new__tev__GetEventPropertiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__GetEventPropertiesResponse::TopicNamespaceLocation = TopicNamespaceLocation;
		_p->_tev__GetEventPropertiesResponse::wsnt__FixedTopicSet = wsnt__FixedTopicSet;
		_p->_tev__GetEventPropertiesResponse::wstop__TopicSet = wstop__TopicSet;
		_p->_tev__GetEventPropertiesResponse::wsnt__TopicExpressionDialect = wsnt__TopicExpressionDialect;
		_p->_tev__GetEventPropertiesResponse::MessageContentFilterDialect = MessageContentFilterDialect;
		_p->_tev__GetEventPropertiesResponse::MessageContentSchemaLocation = MessageContentSchemaLocation;
	}
	return _p;
}

inline _tev__GetEventPropertiesResponse * soap_new_set__tev__GetEventPropertiesResponse(
	struct soap *soap,
	const std::vector<std::string> & TopicNamespaceLocation,
	bool wsnt__FixedTopicSet,
	wstop__TopicSetType *wstop__TopicSet,
	const std::vector<std::string> & wsnt__TopicExpressionDialect,
	const std::vector<std::string> & MessageContentFilterDialect,
	const std::vector<std::string> & ProducerPropertiesFilterDialect,
	const std::vector<std::string> & MessageContentSchemaLocation,
	const std::vector<char *> & __any)
{
	_tev__GetEventPropertiesResponse *_p = ::soap_new__tev__GetEventPropertiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__GetEventPropertiesResponse::TopicNamespaceLocation = TopicNamespaceLocation;
		_p->_tev__GetEventPropertiesResponse::wsnt__FixedTopicSet = wsnt__FixedTopicSet;
		_p->_tev__GetEventPropertiesResponse::wstop__TopicSet = wstop__TopicSet;
		_p->_tev__GetEventPropertiesResponse::wsnt__TopicExpressionDialect = wsnt__TopicExpressionDialect;
		_p->_tev__GetEventPropertiesResponse::MessageContentFilterDialect = MessageContentFilterDialect;
		_p->_tev__GetEventPropertiesResponse::ProducerPropertiesFilterDialect = ProducerPropertiesFilterDialect;
		_p->_tev__GetEventPropertiesResponse::MessageContentSchemaLocation = MessageContentSchemaLocation;
		_p->_tev__GetEventPropertiesResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__GetEventPropertiesResponse(struct soap *soap, _tev__GetEventPropertiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventPropertiesResponse", p->soap_type() == SOAP_TYPE__tev__GetEventPropertiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__GetEventPropertiesResponse(struct soap *soap, const char *URL, _tev__GetEventPropertiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventPropertiesResponse", p->soap_type() == SOAP_TYPE__tev__GetEventPropertiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__GetEventPropertiesResponse(struct soap *soap, const char *URL, _tev__GetEventPropertiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventPropertiesResponse", p->soap_type() == SOAP_TYPE__tev__GetEventPropertiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__GetEventPropertiesResponse * SOAP_FMAC4 soap_get__tev__GetEventPropertiesResponse(struct soap*, _tev__GetEventPropertiesResponse *, const char*, const char*);

inline int soap_read__tev__GetEventPropertiesResponse(struct soap *soap, _tev__GetEventPropertiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__GetEventPropertiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__GetEventPropertiesResponse(struct soap *soap, const char *URL, _tev__GetEventPropertiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__GetEventPropertiesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__GetEventPropertiesResponse(struct soap *soap, _tev__GetEventPropertiesResponse *p)
{
	if (::soap_read__tev__GetEventPropertiesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__GetEventProperties_DEFINED
#define SOAP_TYPE__tev__GetEventProperties_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__GetEventProperties(struct soap*, const char*, int, const _tev__GetEventProperties *, const char*);
SOAP_FMAC3 _tev__GetEventProperties * SOAP_FMAC4 soap_in__tev__GetEventProperties(struct soap*, const char*, _tev__GetEventProperties *, const char*);
SOAP_FMAC1 _tev__GetEventProperties * SOAP_FMAC2 soap_instantiate__tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);

inline _tev__GetEventProperties * soap_new__tev__GetEventProperties(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__GetEventProperties(soap, n, NULL, NULL, NULL);
}

inline _tev__GetEventProperties * soap_new_req__tev__GetEventProperties(
	struct soap *soap)
{
	_tev__GetEventProperties *_p = ::soap_new__tev__GetEventProperties(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__GetEventProperties * soap_new_set__tev__GetEventProperties(
	struct soap *soap)
{
	_tev__GetEventProperties *_p = ::soap_new__tev__GetEventProperties(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tev__GetEventProperties(struct soap *soap, _tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventProperties", p->soap_type() == SOAP_TYPE__tev__GetEventProperties ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__GetEventProperties(struct soap *soap, const char *URL, _tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventProperties", p->soap_type() == SOAP_TYPE__tev__GetEventProperties ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__GetEventProperties(struct soap *soap, const char *URL, _tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetEventProperties", p->soap_type() == SOAP_TYPE__tev__GetEventProperties ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__GetEventProperties * SOAP_FMAC4 soap_get__tev__GetEventProperties(struct soap*, _tev__GetEventProperties *, const char*, const char*);

inline int soap_read__tev__GetEventProperties(struct soap *soap, _tev__GetEventProperties *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__GetEventProperties(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__GetEventProperties(struct soap *soap, const char *URL, _tev__GetEventProperties *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__GetEventProperties(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__GetEventProperties(struct soap *soap, _tev__GetEventProperties *p)
{
	if (::soap_read__tev__GetEventProperties(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse_DEFINED
#define SOAP_TYPE__tev__SetSynchronizationPointResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__SetSynchronizationPointResponse(struct soap*, const char*, int, const _tev__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _tev__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__tev__SetSynchronizationPointResponse(struct soap*, const char*, _tev__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC1 _tev__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__SetSynchronizationPointResponse * soap_new__tev__SetSynchronizationPointResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__SetSynchronizationPointResponse * soap_new_req__tev__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_tev__SetSynchronizationPointResponse *_p = ::soap_new__tev__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__SetSynchronizationPointResponse * soap_new_set__tev__SetSynchronizationPointResponse(
	struct soap *soap)
{
	_tev__SetSynchronizationPointResponse *_p = ::soap_new__tev__SetSynchronizationPointResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tev__SetSynchronizationPointResponse(struct soap *soap, _tev__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _tev__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _tev__SetSynchronizationPointResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPointResponse", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPointResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__tev__SetSynchronizationPointResponse(struct soap*, _tev__SetSynchronizationPointResponse *, const char*, const char*);

inline int soap_read__tev__SetSynchronizationPointResponse(struct soap *soap, _tev__SetSynchronizationPointResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__SetSynchronizationPointResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__SetSynchronizationPointResponse(struct soap *soap, const char *URL, _tev__SetSynchronizationPointResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__SetSynchronizationPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__SetSynchronizationPointResponse(struct soap *soap, _tev__SetSynchronizationPointResponse *p)
{
	if (::soap_read__tev__SetSynchronizationPointResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE__tev__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__SetSynchronizationPoint(struct soap*, const char*, int, const _tev__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _tev__SetSynchronizationPoint * SOAP_FMAC4 soap_in__tev__SetSynchronizationPoint(struct soap*, const char*, _tev__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 _tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _tev__SetSynchronizationPoint * soap_new__tev__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline _tev__SetSynchronizationPoint * soap_new_req__tev__SetSynchronizationPoint(
	struct soap *soap)
{
	_tev__SetSynchronizationPoint *_p = ::soap_new__tev__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__SetSynchronizationPoint * soap_new_set__tev__SetSynchronizationPoint(
	struct soap *soap)
{
	_tev__SetSynchronizationPoint *_p = ::soap_new__tev__SetSynchronizationPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tev__SetSynchronizationPoint(struct soap *soap, _tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__SetSynchronizationPoint(struct soap *soap, const char *URL, _tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__SetSynchronizationPoint(struct soap *soap, const char *URL, _tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SetSynchronizationPoint", p->soap_type() == SOAP_TYPE__tev__SetSynchronizationPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__SetSynchronizationPoint * SOAP_FMAC4 soap_get__tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read__tev__SetSynchronizationPoint(struct soap *soap, _tev__SetSynchronizationPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__SetSynchronizationPoint(struct soap *soap, const char *URL, _tev__SetSynchronizationPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__SetSynchronizationPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__SetSynchronizationPoint(struct soap *soap, _tev__SetSynchronizationPoint *p)
{
	if (::soap_read__tev__SetSynchronizationPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__SeekResponse_DEFINED
#define SOAP_TYPE__tev__SeekResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__SeekResponse(struct soap*, const char*, int, const _tev__SeekResponse *, const char*);
SOAP_FMAC3 _tev__SeekResponse * SOAP_FMAC4 soap_in__tev__SeekResponse(struct soap*, const char*, _tev__SeekResponse *, const char*);
SOAP_FMAC1 _tev__SeekResponse * SOAP_FMAC2 soap_instantiate__tev__SeekResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__SeekResponse * soap_new__tev__SeekResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__SeekResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__SeekResponse * soap_new_req__tev__SeekResponse(
	struct soap *soap)
{
	_tev__SeekResponse *_p = ::soap_new__tev__SeekResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__SeekResponse * soap_new_set__tev__SeekResponse(
	struct soap *soap)
{
	_tev__SeekResponse *_p = ::soap_new__tev__SeekResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tev__SeekResponse(struct soap *soap, _tev__SeekResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SeekResponse", p->soap_type() == SOAP_TYPE__tev__SeekResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__SeekResponse(struct soap *soap, const char *URL, _tev__SeekResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SeekResponse", p->soap_type() == SOAP_TYPE__tev__SeekResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__SeekResponse(struct soap *soap, const char *URL, _tev__SeekResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:SeekResponse", p->soap_type() == SOAP_TYPE__tev__SeekResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__SeekResponse * SOAP_FMAC4 soap_get__tev__SeekResponse(struct soap*, _tev__SeekResponse *, const char*, const char*);

inline int soap_read__tev__SeekResponse(struct soap *soap, _tev__SeekResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__SeekResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__SeekResponse(struct soap *soap, const char *URL, _tev__SeekResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__SeekResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__SeekResponse(struct soap *soap, _tev__SeekResponse *p)
{
	if (::soap_read__tev__SeekResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__Seek_DEFINED
#define SOAP_TYPE__tev__Seek_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__Seek(struct soap*, const char*, int, const _tev__Seek *, const char*);
SOAP_FMAC3 _tev__Seek * SOAP_FMAC4 soap_in__tev__Seek(struct soap*, const char*, _tev__Seek *, const char*);
SOAP_FMAC1 _tev__Seek * SOAP_FMAC2 soap_instantiate__tev__Seek(struct soap*, int, const char*, const char*, size_t*);

inline _tev__Seek * soap_new__tev__Seek(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__Seek(soap, n, NULL, NULL, NULL);
}

inline _tev__Seek * soap_new_req__tev__Seek(
	struct soap *soap,
	time_t UtcTime)
{
	_tev__Seek *_p = ::soap_new__tev__Seek(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__Seek::UtcTime = UtcTime;
	}
	return _p;
}

inline _tev__Seek * soap_new_set__tev__Seek(
	struct soap *soap,
	time_t UtcTime,
	bool *Reverse,
	const std::vector<char *> & __any)
{
	_tev__Seek *_p = ::soap_new__tev__Seek(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__Seek::UtcTime = UtcTime;
		_p->_tev__Seek::Reverse = Reverse;
		_p->_tev__Seek::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__Seek(struct soap *soap, _tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Seek", p->soap_type() == SOAP_TYPE__tev__Seek ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__Seek(struct soap *soap, const char *URL, _tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Seek", p->soap_type() == SOAP_TYPE__tev__Seek ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__Seek(struct soap *soap, const char *URL, _tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Seek", p->soap_type() == SOAP_TYPE__tev__Seek ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__Seek * SOAP_FMAC4 soap_get__tev__Seek(struct soap*, _tev__Seek *, const char*, const char*);

inline int soap_read__tev__Seek(struct soap *soap, _tev__Seek *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__Seek(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__Seek(struct soap *soap, const char *URL, _tev__Seek *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__Seek(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__Seek(struct soap *soap, _tev__Seek *p)
{
	if (::soap_read__tev__Seek(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse_DEFINED
#define SOAP_TYPE__tev__PullMessagesFaultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__PullMessagesFaultResponse(struct soap*, const char*, int, const _tev__PullMessagesFaultResponse *, const char*);
SOAP_FMAC3 _tev__PullMessagesFaultResponse * SOAP_FMAC4 soap_in__tev__PullMessagesFaultResponse(struct soap*, const char*, _tev__PullMessagesFaultResponse *, const char*);
SOAP_FMAC1 _tev__PullMessagesFaultResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesFaultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__PullMessagesFaultResponse * soap_new__tev__PullMessagesFaultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__PullMessagesFaultResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__PullMessagesFaultResponse * soap_new_req__tev__PullMessagesFaultResponse(
	struct soap *soap,
	LONG64 MaxTimeout,
	int MaxMessageLimit)
{
	_tev__PullMessagesFaultResponse *_p = ::soap_new__tev__PullMessagesFaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessagesFaultResponse::MaxTimeout = MaxTimeout;
		_p->_tev__PullMessagesFaultResponse::MaxMessageLimit = MaxMessageLimit;
	}
	return _p;
}

inline _tev__PullMessagesFaultResponse * soap_new_set__tev__PullMessagesFaultResponse(
	struct soap *soap,
	LONG64 MaxTimeout,
	int MaxMessageLimit,
	const std::vector<char *> & __any)
{
	_tev__PullMessagesFaultResponse *_p = ::soap_new__tev__PullMessagesFaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessagesFaultResponse::MaxTimeout = MaxTimeout;
		_p->_tev__PullMessagesFaultResponse::MaxMessageLimit = MaxMessageLimit;
		_p->_tev__PullMessagesFaultResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__PullMessagesFaultResponse(struct soap *soap, _tev__PullMessagesFaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesFaultResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesFaultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__PullMessagesFaultResponse(struct soap *soap, const char *URL, _tev__PullMessagesFaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesFaultResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesFaultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__PullMessagesFaultResponse(struct soap *soap, const char *URL, _tev__PullMessagesFaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesFaultResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesFaultResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__PullMessagesFaultResponse * SOAP_FMAC4 soap_get__tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse *, const char*, const char*);

inline int soap_read__tev__PullMessagesFaultResponse(struct soap *soap, _tev__PullMessagesFaultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__PullMessagesFaultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__PullMessagesFaultResponse(struct soap *soap, const char *URL, _tev__PullMessagesFaultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__PullMessagesFaultResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__PullMessagesFaultResponse(struct soap *soap, _tev__PullMessagesFaultResponse *p)
{
	if (::soap_read__tev__PullMessagesFaultResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__PullMessagesResponse_DEFINED
#define SOAP_TYPE__tev__PullMessagesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__PullMessagesResponse(struct soap*, const char*, int, const _tev__PullMessagesResponse *, const char*);
SOAP_FMAC3 _tev__PullMessagesResponse * SOAP_FMAC4 soap_in__tev__PullMessagesResponse(struct soap*, const char*, _tev__PullMessagesResponse *, const char*);
SOAP_FMAC1 _tev__PullMessagesResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__PullMessagesResponse * soap_new__tev__PullMessagesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__PullMessagesResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__PullMessagesResponse * soap_new_req__tev__PullMessagesResponse(
	struct soap *soap,
	time_t CurrentTime,
	time_t TerminationTime)
{
	_tev__PullMessagesResponse *_p = ::soap_new__tev__PullMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessagesResponse::CurrentTime = CurrentTime;
		_p->_tev__PullMessagesResponse::TerminationTime = TerminationTime;
	}
	return _p;
}

inline _tev__PullMessagesResponse * soap_new_set__tev__PullMessagesResponse(
	struct soap *soap,
	time_t CurrentTime,
	time_t TerminationTime,
	const std::vector<wsnt__NotificationMessageHolderType *> & wsnt__NotificationMessage)
{
	_tev__PullMessagesResponse *_p = ::soap_new__tev__PullMessagesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessagesResponse::CurrentTime = CurrentTime;
		_p->_tev__PullMessagesResponse::TerminationTime = TerminationTime;
		_p->_tev__PullMessagesResponse::wsnt__NotificationMessage = wsnt__NotificationMessage;
	}
	return _p;
}

inline int soap_write__tev__PullMessagesResponse(struct soap *soap, _tev__PullMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__PullMessagesResponse(struct soap *soap, const char *URL, _tev__PullMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__PullMessagesResponse(struct soap *soap, const char *URL, _tev__PullMessagesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessagesResponse", p->soap_type() == SOAP_TYPE__tev__PullMessagesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__PullMessagesResponse * SOAP_FMAC4 soap_get__tev__PullMessagesResponse(struct soap*, _tev__PullMessagesResponse *, const char*, const char*);

inline int soap_read__tev__PullMessagesResponse(struct soap *soap, _tev__PullMessagesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__PullMessagesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__PullMessagesResponse(struct soap *soap, const char *URL, _tev__PullMessagesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__PullMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__PullMessagesResponse(struct soap *soap, _tev__PullMessagesResponse *p)
{
	if (::soap_read__tev__PullMessagesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__PullMessages_DEFINED
#define SOAP_TYPE__tev__PullMessages_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__PullMessages(struct soap*, const char*, int, const _tev__PullMessages *, const char*);
SOAP_FMAC3 _tev__PullMessages * SOAP_FMAC4 soap_in__tev__PullMessages(struct soap*, const char*, _tev__PullMessages *, const char*);
SOAP_FMAC1 _tev__PullMessages * SOAP_FMAC2 soap_instantiate__tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);

inline _tev__PullMessages * soap_new__tev__PullMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__PullMessages(soap, n, NULL, NULL, NULL);
}

inline _tev__PullMessages * soap_new_req__tev__PullMessages(
	struct soap *soap,
	LONG64 Timeout,
	int MessageLimit)
{
	_tev__PullMessages *_p = ::soap_new__tev__PullMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessages::Timeout = Timeout;
		_p->_tev__PullMessages::MessageLimit = MessageLimit;
	}
	return _p;
}

inline _tev__PullMessages * soap_new_set__tev__PullMessages(
	struct soap *soap,
	LONG64 Timeout,
	int MessageLimit,
	const std::vector<char *> & __any)
{
	_tev__PullMessages *_p = ::soap_new__tev__PullMessages(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__PullMessages::Timeout = Timeout;
		_p->_tev__PullMessages::MessageLimit = MessageLimit;
		_p->_tev__PullMessages::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__PullMessages(struct soap *soap, _tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessages", p->soap_type() == SOAP_TYPE__tev__PullMessages ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__PullMessages(struct soap *soap, const char *URL, _tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessages", p->soap_type() == SOAP_TYPE__tev__PullMessages ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__PullMessages(struct soap *soap, const char *URL, _tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:PullMessages", p->soap_type() == SOAP_TYPE__tev__PullMessages ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__PullMessages * SOAP_FMAC4 soap_get__tev__PullMessages(struct soap*, _tev__PullMessages *, const char*, const char*);

inline int soap_read__tev__PullMessages(struct soap *soap, _tev__PullMessages *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__PullMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__PullMessages(struct soap *soap, const char *URL, _tev__PullMessages *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__PullMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__PullMessages(struct soap *soap, _tev__PullMessages *p)
{
	if (::soap_read__tev__PullMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse_DEFINED
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__CreatePullPointSubscriptionResponse(struct soap*, const char*, int, const _tev__CreatePullPointSubscriptionResponse *, const char*);
SOAP_FMAC3 _tev__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_in__tev__CreatePullPointSubscriptionResponse(struct soap*, const char*, _tev__CreatePullPointSubscriptionResponse *, const char*);
SOAP_FMAC1 _tev__CreatePullPointSubscriptionResponse * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__CreatePullPointSubscriptionResponse * soap_new__tev__CreatePullPointSubscriptionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__CreatePullPointSubscriptionResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__CreatePullPointSubscriptionResponse * soap_new_req__tev__CreatePullPointSubscriptionResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference,
	time_t wsnt__CurrentTime,
	time_t wsnt__TerminationTime)
{
	_tev__CreatePullPointSubscriptionResponse *_p = ::soap_new__tev__CreatePullPointSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__CreatePullPointSubscriptionResponse::SubscriptionReference = SubscriptionReference;
		_p->_tev__CreatePullPointSubscriptionResponse::wsnt__CurrentTime = wsnt__CurrentTime;
		_p->_tev__CreatePullPointSubscriptionResponse::wsnt__TerminationTime = wsnt__TerminationTime;
	}
	return _p;
}

inline _tev__CreatePullPointSubscriptionResponse * soap_new_set__tev__CreatePullPointSubscriptionResponse(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& SubscriptionReference,
	time_t wsnt__CurrentTime,
	time_t wsnt__TerminationTime,
	const std::vector<char *> & __any)
{
	_tev__CreatePullPointSubscriptionResponse *_p = ::soap_new__tev__CreatePullPointSubscriptionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__CreatePullPointSubscriptionResponse::SubscriptionReference = SubscriptionReference;
		_p->_tev__CreatePullPointSubscriptionResponse::wsnt__CurrentTime = wsnt__CurrentTime;
		_p->_tev__CreatePullPointSubscriptionResponse::wsnt__TerminationTime = wsnt__TerminationTime;
		_p->_tev__CreatePullPointSubscriptionResponse::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__CreatePullPointSubscriptionResponse(struct soap *soap, _tev__CreatePullPointSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscriptionResponse", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__CreatePullPointSubscriptionResponse(struct soap *soap, const char *URL, _tev__CreatePullPointSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscriptionResponse", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscriptionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__CreatePullPointSubscriptionResponse(struct soap *soap, const char *URL, _tev__CreatePullPointSubscriptionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscriptionResponse", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscriptionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__CreatePullPointSubscriptionResponse * SOAP_FMAC4 soap_get__tev__CreatePullPointSubscriptionResponse(struct soap*, _tev__CreatePullPointSubscriptionResponse *, const char*, const char*);

inline int soap_read__tev__CreatePullPointSubscriptionResponse(struct soap *soap, _tev__CreatePullPointSubscriptionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__CreatePullPointSubscriptionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__CreatePullPointSubscriptionResponse(struct soap *soap, const char *URL, _tev__CreatePullPointSubscriptionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__CreatePullPointSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__CreatePullPointSubscriptionResponse(struct soap *soap, _tev__CreatePullPointSubscriptionResponse *p)
{
	if (::soap_read__tev__CreatePullPointSubscriptionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_DEFINED
#define SOAP_TYPE__tev__CreatePullPointSubscription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__CreatePullPointSubscription(struct soap*, const char*, int, const _tev__CreatePullPointSubscription *, const char*);
SOAP_FMAC3 _tev__CreatePullPointSubscription * SOAP_FMAC4 soap_in__tev__CreatePullPointSubscription(struct soap*, const char*, _tev__CreatePullPointSubscription *, const char*);
SOAP_FMAC1 _tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _tev__CreatePullPointSubscription * soap_new__tev__CreatePullPointSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__CreatePullPointSubscription(soap, n, NULL, NULL, NULL);
}

inline _tev__CreatePullPointSubscription * soap_new_req__tev__CreatePullPointSubscription(
	struct soap *soap)
{
	_tev__CreatePullPointSubscription *_p = ::soap_new__tev__CreatePullPointSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__CreatePullPointSubscription * soap_new_set__tev__CreatePullPointSubscription(
	struct soap *soap,
	wsnt__FilterType *Filter,
	std::string *InitialTerminationTime,
	_tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy,
	const std::vector<char *> & __any)
{
	_tev__CreatePullPointSubscription *_p = ::soap_new__tev__CreatePullPointSubscription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__CreatePullPointSubscription::Filter = Filter;
		_p->_tev__CreatePullPointSubscription::InitialTerminationTime = InitialTerminationTime;
		_p->_tev__CreatePullPointSubscription::SubscriptionPolicy = SubscriptionPolicy;
		_p->_tev__CreatePullPointSubscription::__any = __any;
	}
	return _p;
}

inline int soap_write__tev__CreatePullPointSubscription(struct soap *soap, _tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__CreatePullPointSubscription(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__CreatePullPointSubscription(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:CreatePullPointSubscription", p->soap_type() == SOAP_TYPE__tev__CreatePullPointSubscription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__CreatePullPointSubscription * SOAP_FMAC4 soap_get__tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription *, const char*, const char*);

inline int soap_read__tev__CreatePullPointSubscription(struct soap *soap, _tev__CreatePullPointSubscription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__CreatePullPointSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__CreatePullPointSubscription(struct soap *soap, const char *URL, _tev__CreatePullPointSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__CreatePullPointSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__CreatePullPointSubscription(struct soap *soap, _tev__CreatePullPointSubscription *p)
{
	if (::soap_read__tev__CreatePullPointSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tev__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tev__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tev__GetServiceCapabilitiesResponse(struct soap*, const char*, _tev__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tev__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tev__GetServiceCapabilitiesResponse * soap_new__tev__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tev__GetServiceCapabilitiesResponse * soap_new_req__tev__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tev__Capabilities *Capabilities)
{
	_tev__GetServiceCapabilitiesResponse *_p = ::soap_new__tev__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tev__GetServiceCapabilitiesResponse * soap_new_set__tev__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tev__Capabilities *Capabilities)
{
	_tev__GetServiceCapabilitiesResponse *_p = ::soap_new__tev__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tev__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tev__GetServiceCapabilitiesResponse(struct soap *soap, _tev__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tev__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tev__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tev__GetServiceCapabilitiesResponse(struct soap*, _tev__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tev__GetServiceCapabilitiesResponse(struct soap *soap, _tev__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tev__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__GetServiceCapabilitiesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__GetServiceCapabilitiesResponse(struct soap *soap, _tev__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__tev__GetServiceCapabilitiesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tev__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tev__GetServiceCapabilities(struct soap*, const char*, int, const _tev__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tev__GetServiceCapabilities * SOAP_FMAC4 soap_in__tev__GetServiceCapabilities(struct soap*, const char*, _tev__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tev__GetServiceCapabilities * soap_new__tev__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tev__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tev__GetServiceCapabilities * soap_new_req__tev__GetServiceCapabilities(
	struct soap *soap)
{
	_tev__GetServiceCapabilities *_p = ::soap_new__tev__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tev__GetServiceCapabilities * soap_new_set__tev__GetServiceCapabilities(
	struct soap *soap)
{
	_tev__GetServiceCapabilities *_p = ::soap_new__tev__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tev__GetServiceCapabilities(struct soap *soap, _tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tev__GetServiceCapabilities(struct soap *soap, const char *URL, _tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tev__GetServiceCapabilities(struct soap *soap, const char *URL, _tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tev__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tev__GetServiceCapabilities * SOAP_FMAC4 soap_get__tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tev__GetServiceCapabilities(struct soap *soap, _tev__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tev__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tev__GetServiceCapabilities(struct soap *soap, const char *URL, _tev__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tev__GetServiceCapabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__tev__GetServiceCapabilities(struct soap *soap, _tev__GetServiceCapabilities *p)
{
	if (::soap_read__tev__GetServiceCapabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_tev__Capabilities_DEFINED
#define SOAP_TYPE_tev__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tev__Capabilities(struct soap*, const char*, int, const tev__Capabilities *, const char*);
SOAP_FMAC3 tev__Capabilities * SOAP_FMAC4 soap_in_tev__Capabilities(struct soap*, const char*, tev__Capabilities *, const char*);
SOAP_FMAC1 tev__Capabilities * SOAP_FMAC2 soap_instantiate_tev__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tev__Capabilities * soap_new_tev__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tev__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tev__Capabilities * soap_new_req_tev__Capabilities(
	struct soap *soap)
{
	tev__Capabilities *_p = ::soap_new_tev__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tev__Capabilities * soap_new_set_tev__Capabilities(
	struct soap *soap,
	const std::vector<char *> & __any,
	bool *WSSubscriptionPolicySupport,
	bool *WSPullPointSupport,
	bool *WSPausableSubscriptionManagerInterfaceSupport,
	int *MaxNotificationProducers,
	int *MaxPullPoints,
	bool *PersistentNotificationStorage,
	char *__anyAttribute)
{
	tev__Capabilities *_p = ::soap_new_tev__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tev__Capabilities::__any = __any;
		_p->tev__Capabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport;
		_p->tev__Capabilities::WSPullPointSupport = WSPullPointSupport;
		_p->tev__Capabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport;
		_p->tev__Capabilities::MaxNotificationProducers = MaxNotificationProducers;
		_p->tev__Capabilities::MaxPullPoints = MaxPullPoints;
		_p->tev__Capabilities::PersistentNotificationStorage = PersistentNotificationStorage;
		_p->tev__Capabilities::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_tev__Capabilities(struct soap *soap, tev__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Capabilities", p->soap_type() == SOAP_TYPE_tev__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tev__Capabilities(struct soap *soap, const char *URL, tev__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Capabilities", p->soap_type() == SOAP_TYPE_tev__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tev__Capabilities(struct soap *soap, const char *URL, tev__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tev:Capabilities", p->soap_type() == SOAP_TYPE_tev__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tev__Capabilities * SOAP_FMAC4 soap_get_tev__Capabilities(struct soap*, tev__Capabilities *, const char*, const char*);

inline int soap_read_tev__Capabilities(struct soap *soap, tev__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tev__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tev__Capabilities(struct soap *soap, const char *URL, tev__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tev__Capabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_tev__Capabilities(struct soap *soap, tev__Capabilities *p)
{
	if (::soap_read_tev__Capabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_write__xml__lang soap_write_std__string


#define soap_PUT__xml__lang soap_PUT_std__string


#define soap_POST_send__xml__lang soap_POST_send_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__token(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__NCName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__ResumeSubscription_DEFINED
#define SOAP_TYPE___tev__ResumeSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__ResumeSubscription(struct soap*, struct __tev__ResumeSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__ResumeSubscription(struct soap*, const struct __tev__ResumeSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__ResumeSubscription(struct soap*, const char*, int, const struct __tev__ResumeSubscription *, const char*);
SOAP_FMAC3 struct __tev__ResumeSubscription * SOAP_FMAC4 soap_in___tev__ResumeSubscription(struct soap*, const char*, struct __tev__ResumeSubscription *, const char*);
SOAP_FMAC1 struct __tev__ResumeSubscription * SOAP_FMAC2 soap_instantiate___tev__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__ResumeSubscription * soap_new___tev__ResumeSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__ResumeSubscription(soap, n, NULL, NULL, NULL);
}

inline struct __tev__ResumeSubscription * soap_new_req___tev__ResumeSubscription(
	struct soap *soap)
{
	struct __tev__ResumeSubscription *_p = ::soap_new___tev__ResumeSubscription(soap);
	if (_p)
	{	::soap_default___tev__ResumeSubscription(soap, _p);
	}
	return _p;
}

inline struct __tev__ResumeSubscription * soap_new_set___tev__ResumeSubscription(
	struct soap *soap,
	_wsnt__ResumeSubscription *wsnt__ResumeSubscription)
{
	struct __tev__ResumeSubscription *_p = ::soap_new___tev__ResumeSubscription(soap);
	if (_p)
	{	::soap_default___tev__ResumeSubscription(soap, _p);
		_p->wsnt__ResumeSubscription = wsnt__ResumeSubscription;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__ResumeSubscription(struct soap*, const struct __tev__ResumeSubscription *, const char*, const char*);

inline int soap_write___tev__ResumeSubscription(struct soap *soap, struct __tev__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__ResumeSubscription(soap, p), 0) || ::soap_put___tev__ResumeSubscription(soap, p, "-tev:ResumeSubscription", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__ResumeSubscription(struct soap *soap, const char *URL, struct __tev__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__ResumeSubscription(soap, p), 0) || ::soap_put___tev__ResumeSubscription(soap, p, "-tev:ResumeSubscription", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__ResumeSubscription(struct soap *soap, const char *URL, struct __tev__ResumeSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__ResumeSubscription(soap, p), 0) || ::soap_put___tev__ResumeSubscription(soap, p, "-tev:ResumeSubscription", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__ResumeSubscription * SOAP_FMAC4 soap_get___tev__ResumeSubscription(struct soap*, struct __tev__ResumeSubscription *, const char*, const char*);

inline int soap_read___tev__ResumeSubscription(struct soap *soap, struct __tev__ResumeSubscription *p)
{
	if (p)
	{	::soap_default___tev__ResumeSubscription(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__ResumeSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__ResumeSubscription(struct soap *soap, const char *URL, struct __tev__ResumeSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__ResumeSubscription(struct soap *soap, struct __tev__ResumeSubscription *p)
{
	if (::soap_read___tev__ResumeSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__PauseSubscription_DEFINED
#define SOAP_TYPE___tev__PauseSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__PauseSubscription(struct soap*, struct __tev__PauseSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__PauseSubscription(struct soap*, const struct __tev__PauseSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__PauseSubscription(struct soap*, const char*, int, const struct __tev__PauseSubscription *, const char*);
SOAP_FMAC3 struct __tev__PauseSubscription * SOAP_FMAC4 soap_in___tev__PauseSubscription(struct soap*, const char*, struct __tev__PauseSubscription *, const char*);
SOAP_FMAC1 struct __tev__PauseSubscription * SOAP_FMAC2 soap_instantiate___tev__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__PauseSubscription * soap_new___tev__PauseSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__PauseSubscription(soap, n, NULL, NULL, NULL);
}

inline struct __tev__PauseSubscription * soap_new_req___tev__PauseSubscription(
	struct soap *soap)
{
	struct __tev__PauseSubscription *_p = ::soap_new___tev__PauseSubscription(soap);
	if (_p)
	{	::soap_default___tev__PauseSubscription(soap, _p);
	}
	return _p;
}

inline struct __tev__PauseSubscription * soap_new_set___tev__PauseSubscription(
	struct soap *soap,
	_wsnt__PauseSubscription *wsnt__PauseSubscription)
{
	struct __tev__PauseSubscription *_p = ::soap_new___tev__PauseSubscription(soap);
	if (_p)
	{	::soap_default___tev__PauseSubscription(soap, _p);
		_p->wsnt__PauseSubscription = wsnt__PauseSubscription;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__PauseSubscription(struct soap*, const struct __tev__PauseSubscription *, const char*, const char*);

inline int soap_write___tev__PauseSubscription(struct soap *soap, struct __tev__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__PauseSubscription(soap, p), 0) || ::soap_put___tev__PauseSubscription(soap, p, "-tev:PauseSubscription", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__PauseSubscription(struct soap *soap, const char *URL, struct __tev__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__PauseSubscription(soap, p), 0) || ::soap_put___tev__PauseSubscription(soap, p, "-tev:PauseSubscription", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__PauseSubscription(struct soap *soap, const char *URL, struct __tev__PauseSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__PauseSubscription(soap, p), 0) || ::soap_put___tev__PauseSubscription(soap, p, "-tev:PauseSubscription", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__PauseSubscription * SOAP_FMAC4 soap_get___tev__PauseSubscription(struct soap*, struct __tev__PauseSubscription *, const char*, const char*);

inline int soap_read___tev__PauseSubscription(struct soap *soap, struct __tev__PauseSubscription *p)
{
	if (p)
	{	::soap_default___tev__PauseSubscription(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__PauseSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__PauseSubscription(struct soap *soap, const char *URL, struct __tev__PauseSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__PauseSubscription(struct soap *soap, struct __tev__PauseSubscription *p)
{
	if (::soap_read___tev__PauseSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe___DEFINED
#define SOAP_TYPE___tev__Unsubscribe___DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Unsubscribe__(struct soap*, struct __tev__Unsubscribe__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Unsubscribe__(struct soap*, const struct __tev__Unsubscribe__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Unsubscribe__(struct soap*, const char*, int, const struct __tev__Unsubscribe__ *, const char*);
SOAP_FMAC3 struct __tev__Unsubscribe__ * SOAP_FMAC4 soap_in___tev__Unsubscribe__(struct soap*, const char*, struct __tev__Unsubscribe__ *, const char*);
SOAP_FMAC1 struct __tev__Unsubscribe__ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe__(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Unsubscribe__ * soap_new___tev__Unsubscribe__(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Unsubscribe__(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Unsubscribe__ * soap_new_req___tev__Unsubscribe__(
	struct soap *soap)
{
	struct __tev__Unsubscribe__ *_p = ::soap_new___tev__Unsubscribe__(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe__(soap, _p);
	}
	return _p;
}

inline struct __tev__Unsubscribe__ * soap_new_set___tev__Unsubscribe__(
	struct soap *soap,
	_wsnt__Unsubscribe *wsnt__Unsubscribe)
{
	struct __tev__Unsubscribe__ *_p = ::soap_new___tev__Unsubscribe__(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe__(soap, _p);
		_p->wsnt__Unsubscribe = wsnt__Unsubscribe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Unsubscribe__(struct soap*, const struct __tev__Unsubscribe__ *, const char*, const char*);

inline int soap_write___tev__Unsubscribe__(struct soap *soap, struct __tev__Unsubscribe__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Unsubscribe__(soap, p), 0) || ::soap_put___tev__Unsubscribe__(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Unsubscribe__(struct soap *soap, const char *URL, struct __tev__Unsubscribe__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe__(soap, p), 0) || ::soap_put___tev__Unsubscribe__(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Unsubscribe__(struct soap *soap, const char *URL, struct __tev__Unsubscribe__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe__(soap, p), 0) || ::soap_put___tev__Unsubscribe__(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Unsubscribe__ * SOAP_FMAC4 soap_get___tev__Unsubscribe__(struct soap*, struct __tev__Unsubscribe__ *, const char*, const char*);

inline int soap_read___tev__Unsubscribe__(struct soap *soap, struct __tev__Unsubscribe__ *p)
{
	if (p)
	{	::soap_default___tev__Unsubscribe__(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Unsubscribe__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Unsubscribe__(struct soap *soap, const char *URL, struct __tev__Unsubscribe__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Unsubscribe__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Unsubscribe__(struct soap *soap, struct __tev__Unsubscribe__ *p)
{
	if (::soap_read___tev__Unsubscribe__(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Renew__DEFINED
#define SOAP_TYPE___tev__Renew__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Renew_(struct soap*, struct __tev__Renew_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Renew_(struct soap*, const struct __tev__Renew_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Renew_(struct soap*, const char*, int, const struct __tev__Renew_ *, const char*);
SOAP_FMAC3 struct __tev__Renew_ * SOAP_FMAC4 soap_in___tev__Renew_(struct soap*, const char*, struct __tev__Renew_ *, const char*);
SOAP_FMAC1 struct __tev__Renew_ * SOAP_FMAC2 soap_instantiate___tev__Renew_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Renew_ * soap_new___tev__Renew_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Renew_(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Renew_ * soap_new_req___tev__Renew_(
	struct soap *soap)
{
	struct __tev__Renew_ *_p = ::soap_new___tev__Renew_(soap);
	if (_p)
	{	::soap_default___tev__Renew_(soap, _p);
	}
	return _p;
}

inline struct __tev__Renew_ * soap_new_set___tev__Renew_(
	struct soap *soap,
	_wsnt__Renew *wsnt__Renew)
{
	struct __tev__Renew_ *_p = ::soap_new___tev__Renew_(soap);
	if (_p)
	{	::soap_default___tev__Renew_(soap, _p);
		_p->wsnt__Renew = wsnt__Renew;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Renew_(struct soap*, const struct __tev__Renew_ *, const char*, const char*);

inline int soap_write___tev__Renew_(struct soap *soap, struct __tev__Renew_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Renew_(soap, p), 0) || ::soap_put___tev__Renew_(soap, p, "-tev:Renew", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Renew_(struct soap *soap, const char *URL, struct __tev__Renew_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Renew_(soap, p), 0) || ::soap_put___tev__Renew_(soap, p, "-tev:Renew", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Renew_(struct soap *soap, const char *URL, struct __tev__Renew_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Renew_(soap, p), 0) || ::soap_put___tev__Renew_(soap, p, "-tev:Renew", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Renew_ * SOAP_FMAC4 soap_get___tev__Renew_(struct soap*, struct __tev__Renew_ *, const char*, const char*);

inline int soap_read___tev__Renew_(struct soap *soap, struct __tev__Renew_ *p)
{
	if (p)
	{	::soap_default___tev__Renew_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Renew_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Renew_(struct soap *soap, const char *URL, struct __tev__Renew_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Renew_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Renew_(struct soap *soap, struct __tev__Renew_ *p)
{
	if (::soap_read___tev__Renew_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__CreatePullPoint_DEFINED
#define SOAP_TYPE___tev__CreatePullPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__CreatePullPoint(struct soap*, struct __tev__CreatePullPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__CreatePullPoint(struct soap*, const struct __tev__CreatePullPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__CreatePullPoint(struct soap*, const char*, int, const struct __tev__CreatePullPoint *, const char*);
SOAP_FMAC3 struct __tev__CreatePullPoint * SOAP_FMAC4 soap_in___tev__CreatePullPoint(struct soap*, const char*, struct __tev__CreatePullPoint *, const char*);
SOAP_FMAC1 struct __tev__CreatePullPoint * SOAP_FMAC2 soap_instantiate___tev__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__CreatePullPoint * soap_new___tev__CreatePullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__CreatePullPoint(soap, n, NULL, NULL, NULL);
}

inline struct __tev__CreatePullPoint * soap_new_req___tev__CreatePullPoint(
	struct soap *soap)
{
	struct __tev__CreatePullPoint *_p = ::soap_new___tev__CreatePullPoint(soap);
	if (_p)
	{	::soap_default___tev__CreatePullPoint(soap, _p);
	}
	return _p;
}

inline struct __tev__CreatePullPoint * soap_new_set___tev__CreatePullPoint(
	struct soap *soap,
	_wsnt__CreatePullPoint *wsnt__CreatePullPoint)
{
	struct __tev__CreatePullPoint *_p = ::soap_new___tev__CreatePullPoint(soap);
	if (_p)
	{	::soap_default___tev__CreatePullPoint(soap, _p);
		_p->wsnt__CreatePullPoint = wsnt__CreatePullPoint;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__CreatePullPoint(struct soap*, const struct __tev__CreatePullPoint *, const char*, const char*);

inline int soap_write___tev__CreatePullPoint(struct soap *soap, struct __tev__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__CreatePullPoint(soap, p), 0) || ::soap_put___tev__CreatePullPoint(soap, p, "-tev:CreatePullPoint", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__CreatePullPoint(struct soap *soap, const char *URL, struct __tev__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__CreatePullPoint(soap, p), 0) || ::soap_put___tev__CreatePullPoint(soap, p, "-tev:CreatePullPoint", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__CreatePullPoint(struct soap *soap, const char *URL, struct __tev__CreatePullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__CreatePullPoint(soap, p), 0) || ::soap_put___tev__CreatePullPoint(soap, p, "-tev:CreatePullPoint", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__CreatePullPoint * SOAP_FMAC4 soap_get___tev__CreatePullPoint(struct soap*, struct __tev__CreatePullPoint *, const char*, const char*);

inline int soap_read___tev__CreatePullPoint(struct soap *soap, struct __tev__CreatePullPoint *p)
{
	if (p)
	{	::soap_default___tev__CreatePullPoint(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__CreatePullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__CreatePullPoint(struct soap *soap, const char *URL, struct __tev__CreatePullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__CreatePullPoint(struct soap *soap, struct __tev__CreatePullPoint *p)
{
	if (::soap_read___tev__CreatePullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Notify__DEFINED
#define SOAP_TYPE___tev__Notify__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Notify_(struct soap*, struct __tev__Notify_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Notify_(struct soap*, const struct __tev__Notify_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Notify_(struct soap*, const char*, int, const struct __tev__Notify_ *, const char*);
SOAP_FMAC3 struct __tev__Notify_ * SOAP_FMAC4 soap_in___tev__Notify_(struct soap*, const char*, struct __tev__Notify_ *, const char*);
SOAP_FMAC1 struct __tev__Notify_ * SOAP_FMAC2 soap_instantiate___tev__Notify_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Notify_ * soap_new___tev__Notify_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Notify_(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Notify_ * soap_new_req___tev__Notify_(
	struct soap *soap)
{
	struct __tev__Notify_ *_p = ::soap_new___tev__Notify_(soap);
	if (_p)
	{	::soap_default___tev__Notify_(soap, _p);
	}
	return _p;
}

inline struct __tev__Notify_ * soap_new_set___tev__Notify_(
	struct soap *soap,
	_wsnt__Notify *wsnt__Notify)
{
	struct __tev__Notify_ *_p = ::soap_new___tev__Notify_(soap);
	if (_p)
	{	::soap_default___tev__Notify_(soap, _p);
		_p->wsnt__Notify = wsnt__Notify;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Notify_(struct soap*, const struct __tev__Notify_ *, const char*, const char*);

inline int soap_write___tev__Notify_(struct soap *soap, struct __tev__Notify_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Notify_(soap, p), 0) || ::soap_put___tev__Notify_(soap, p, "-tev:Notify", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Notify_(struct soap *soap, const char *URL, struct __tev__Notify_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Notify_(soap, p), 0) || ::soap_put___tev__Notify_(soap, p, "-tev:Notify", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Notify_(struct soap *soap, const char *URL, struct __tev__Notify_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Notify_(soap, p), 0) || ::soap_put___tev__Notify_(soap, p, "-tev:Notify", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Notify_ * SOAP_FMAC4 soap_get___tev__Notify_(struct soap*, struct __tev__Notify_ *, const char*, const char*);

inline int soap_read___tev__Notify_(struct soap *soap, struct __tev__Notify_ *p)
{
	if (p)
	{	::soap_default___tev__Notify_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Notify_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Notify_(struct soap *soap, const char *URL, struct __tev__Notify_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Notify_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Notify_(struct soap *soap, struct __tev__Notify_ *p)
{
	if (::soap_read___tev__Notify_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__DestroyPullPoint_DEFINED
#define SOAP_TYPE___tev__DestroyPullPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__DestroyPullPoint(struct soap*, struct __tev__DestroyPullPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__DestroyPullPoint(struct soap*, const struct __tev__DestroyPullPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__DestroyPullPoint(struct soap*, const char*, int, const struct __tev__DestroyPullPoint *, const char*);
SOAP_FMAC3 struct __tev__DestroyPullPoint * SOAP_FMAC4 soap_in___tev__DestroyPullPoint(struct soap*, const char*, struct __tev__DestroyPullPoint *, const char*);
SOAP_FMAC1 struct __tev__DestroyPullPoint * SOAP_FMAC2 soap_instantiate___tev__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__DestroyPullPoint * soap_new___tev__DestroyPullPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__DestroyPullPoint(soap, n, NULL, NULL, NULL);
}

inline struct __tev__DestroyPullPoint * soap_new_req___tev__DestroyPullPoint(
	struct soap *soap)
{
	struct __tev__DestroyPullPoint *_p = ::soap_new___tev__DestroyPullPoint(soap);
	if (_p)
	{	::soap_default___tev__DestroyPullPoint(soap, _p);
	}
	return _p;
}

inline struct __tev__DestroyPullPoint * soap_new_set___tev__DestroyPullPoint(
	struct soap *soap,
	_wsnt__DestroyPullPoint *wsnt__DestroyPullPoint)
{
	struct __tev__DestroyPullPoint *_p = ::soap_new___tev__DestroyPullPoint(soap);
	if (_p)
	{	::soap_default___tev__DestroyPullPoint(soap, _p);
		_p->wsnt__DestroyPullPoint = wsnt__DestroyPullPoint;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__DestroyPullPoint(struct soap*, const struct __tev__DestroyPullPoint *, const char*, const char*);

inline int soap_write___tev__DestroyPullPoint(struct soap *soap, struct __tev__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__DestroyPullPoint(soap, p), 0) || ::soap_put___tev__DestroyPullPoint(soap, p, "-tev:DestroyPullPoint", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__DestroyPullPoint(struct soap *soap, const char *URL, struct __tev__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__DestroyPullPoint(soap, p), 0) || ::soap_put___tev__DestroyPullPoint(soap, p, "-tev:DestroyPullPoint", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__DestroyPullPoint(struct soap *soap, const char *URL, struct __tev__DestroyPullPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__DestroyPullPoint(soap, p), 0) || ::soap_put___tev__DestroyPullPoint(soap, p, "-tev:DestroyPullPoint", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__DestroyPullPoint * SOAP_FMAC4 soap_get___tev__DestroyPullPoint(struct soap*, struct __tev__DestroyPullPoint *, const char*, const char*);

inline int soap_read___tev__DestroyPullPoint(struct soap *soap, struct __tev__DestroyPullPoint *p)
{
	if (p)
	{	::soap_default___tev__DestroyPullPoint(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__DestroyPullPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__DestroyPullPoint(struct soap *soap, const char *URL, struct __tev__DestroyPullPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__DestroyPullPoint(struct soap *soap, struct __tev__DestroyPullPoint *p)
{
	if (::soap_read___tev__DestroyPullPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__GetMessages_DEFINED
#define SOAP_TYPE___tev__GetMessages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__GetMessages(struct soap*, struct __tev__GetMessages *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__GetMessages(struct soap*, const struct __tev__GetMessages *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__GetMessages(struct soap*, const char*, int, const struct __tev__GetMessages *, const char*);
SOAP_FMAC3 struct __tev__GetMessages * SOAP_FMAC4 soap_in___tev__GetMessages(struct soap*, const char*, struct __tev__GetMessages *, const char*);
SOAP_FMAC1 struct __tev__GetMessages * SOAP_FMAC2 soap_instantiate___tev__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__GetMessages * soap_new___tev__GetMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__GetMessages(soap, n, NULL, NULL, NULL);
}

inline struct __tev__GetMessages * soap_new_req___tev__GetMessages(
	struct soap *soap)
{
	struct __tev__GetMessages *_p = ::soap_new___tev__GetMessages(soap);
	if (_p)
	{	::soap_default___tev__GetMessages(soap, _p);
	}
	return _p;
}

inline struct __tev__GetMessages * soap_new_set___tev__GetMessages(
	struct soap *soap,
	_wsnt__GetMessages *wsnt__GetMessages)
{
	struct __tev__GetMessages *_p = ::soap_new___tev__GetMessages(soap);
	if (_p)
	{	::soap_default___tev__GetMessages(soap, _p);
		_p->wsnt__GetMessages = wsnt__GetMessages;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__GetMessages(struct soap*, const struct __tev__GetMessages *, const char*, const char*);

inline int soap_write___tev__GetMessages(struct soap *soap, struct __tev__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__GetMessages(soap, p), 0) || ::soap_put___tev__GetMessages(soap, p, "-tev:GetMessages", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__GetMessages(struct soap *soap, const char *URL, struct __tev__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetMessages(soap, p), 0) || ::soap_put___tev__GetMessages(soap, p, "-tev:GetMessages", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__GetMessages(struct soap *soap, const char *URL, struct __tev__GetMessages const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetMessages(soap, p), 0) || ::soap_put___tev__GetMessages(soap, p, "-tev:GetMessages", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__GetMessages * SOAP_FMAC4 soap_get___tev__GetMessages(struct soap*, struct __tev__GetMessages *, const char*, const char*);

inline int soap_read___tev__GetMessages(struct soap *soap, struct __tev__GetMessages *p)
{
	if (p)
	{	::soap_default___tev__GetMessages(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__GetMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__GetMessages(struct soap *soap, const char *URL, struct __tev__GetMessages *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__GetMessages(struct soap *soap, struct __tev__GetMessages *p)
{
	if (::soap_read___tev__GetMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Notify_DEFINED
#define SOAP_TYPE___tev__Notify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Notify(struct soap*, struct __tev__Notify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Notify(struct soap*, const struct __tev__Notify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Notify(struct soap*, const char*, int, const struct __tev__Notify *, const char*);
SOAP_FMAC3 struct __tev__Notify * SOAP_FMAC4 soap_in___tev__Notify(struct soap*, const char*, struct __tev__Notify *, const char*);
SOAP_FMAC1 struct __tev__Notify * SOAP_FMAC2 soap_instantiate___tev__Notify(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Notify * soap_new___tev__Notify(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Notify(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Notify * soap_new_req___tev__Notify(
	struct soap *soap)
{
	struct __tev__Notify *_p = ::soap_new___tev__Notify(soap);
	if (_p)
	{	::soap_default___tev__Notify(soap, _p);
	}
	return _p;
}

inline struct __tev__Notify * soap_new_set___tev__Notify(
	struct soap *soap,
	_wsnt__Notify *wsnt__Notify)
{
	struct __tev__Notify *_p = ::soap_new___tev__Notify(soap);
	if (_p)
	{	::soap_default___tev__Notify(soap, _p);
		_p->wsnt__Notify = wsnt__Notify;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Notify(struct soap*, const struct __tev__Notify *, const char*, const char*);

inline int soap_write___tev__Notify(struct soap *soap, struct __tev__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Notify(soap, p), 0) || ::soap_put___tev__Notify(soap, p, "-tev:Notify", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Notify(struct soap *soap, const char *URL, struct __tev__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Notify(soap, p), 0) || ::soap_put___tev__Notify(soap, p, "-tev:Notify", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Notify(struct soap *soap, const char *URL, struct __tev__Notify const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Notify(soap, p), 0) || ::soap_put___tev__Notify(soap, p, "-tev:Notify", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Notify * SOAP_FMAC4 soap_get___tev__Notify(struct soap*, struct __tev__Notify *, const char*, const char*);

inline int soap_read___tev__Notify(struct soap *soap, struct __tev__Notify *p)
{
	if (p)
	{	::soap_default___tev__Notify(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Notify(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Notify(struct soap *soap, const char *URL, struct __tev__Notify *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Notify(struct soap *soap, struct __tev__Notify *p)
{
	if (::soap_read___tev__Notify(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__GetCurrentMessage_DEFINED
#define SOAP_TYPE___tev__GetCurrentMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__GetCurrentMessage(struct soap*, struct __tev__GetCurrentMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__GetCurrentMessage(struct soap*, const struct __tev__GetCurrentMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__GetCurrentMessage(struct soap*, const char*, int, const struct __tev__GetCurrentMessage *, const char*);
SOAP_FMAC3 struct __tev__GetCurrentMessage * SOAP_FMAC4 soap_in___tev__GetCurrentMessage(struct soap*, const char*, struct __tev__GetCurrentMessage *, const char*);
SOAP_FMAC1 struct __tev__GetCurrentMessage * SOAP_FMAC2 soap_instantiate___tev__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__GetCurrentMessage * soap_new___tev__GetCurrentMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__GetCurrentMessage(soap, n, NULL, NULL, NULL);
}

inline struct __tev__GetCurrentMessage * soap_new_req___tev__GetCurrentMessage(
	struct soap *soap)
{
	struct __tev__GetCurrentMessage *_p = ::soap_new___tev__GetCurrentMessage(soap);
	if (_p)
	{	::soap_default___tev__GetCurrentMessage(soap, _p);
	}
	return _p;
}

inline struct __tev__GetCurrentMessage * soap_new_set___tev__GetCurrentMessage(
	struct soap *soap,
	_wsnt__GetCurrentMessage *wsnt__GetCurrentMessage)
{
	struct __tev__GetCurrentMessage *_p = ::soap_new___tev__GetCurrentMessage(soap);
	if (_p)
	{	::soap_default___tev__GetCurrentMessage(soap, _p);
		_p->wsnt__GetCurrentMessage = wsnt__GetCurrentMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__GetCurrentMessage(struct soap*, const struct __tev__GetCurrentMessage *, const char*, const char*);

inline int soap_write___tev__GetCurrentMessage(struct soap *soap, struct __tev__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__GetCurrentMessage(soap, p), 0) || ::soap_put___tev__GetCurrentMessage(soap, p, "-tev:GetCurrentMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__GetCurrentMessage(struct soap *soap, const char *URL, struct __tev__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetCurrentMessage(soap, p), 0) || ::soap_put___tev__GetCurrentMessage(soap, p, "-tev:GetCurrentMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__GetCurrentMessage(struct soap *soap, const char *URL, struct __tev__GetCurrentMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetCurrentMessage(soap, p), 0) || ::soap_put___tev__GetCurrentMessage(soap, p, "-tev:GetCurrentMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__GetCurrentMessage * SOAP_FMAC4 soap_get___tev__GetCurrentMessage(struct soap*, struct __tev__GetCurrentMessage *, const char*, const char*);

inline int soap_read___tev__GetCurrentMessage(struct soap *soap, struct __tev__GetCurrentMessage *p)
{
	if (p)
	{	::soap_default___tev__GetCurrentMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__GetCurrentMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__GetCurrentMessage(struct soap *soap, const char *URL, struct __tev__GetCurrentMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__GetCurrentMessage(struct soap *soap, struct __tev__GetCurrentMessage *p)
{
	if (::soap_read___tev__GetCurrentMessage(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Subscribe_DEFINED
#define SOAP_TYPE___tev__Subscribe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Subscribe(struct soap*, struct __tev__Subscribe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Subscribe(struct soap*, const struct __tev__Subscribe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Subscribe(struct soap*, const char*, int, const struct __tev__Subscribe *, const char*);
SOAP_FMAC3 struct __tev__Subscribe * SOAP_FMAC4 soap_in___tev__Subscribe(struct soap*, const char*, struct __tev__Subscribe *, const char*);
SOAP_FMAC1 struct __tev__Subscribe * SOAP_FMAC2 soap_instantiate___tev__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Subscribe * soap_new___tev__Subscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Subscribe(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Subscribe * soap_new_req___tev__Subscribe(
	struct soap *soap)
{
	struct __tev__Subscribe *_p = ::soap_new___tev__Subscribe(soap);
	if (_p)
	{	::soap_default___tev__Subscribe(soap, _p);
	}
	return _p;
}

inline struct __tev__Subscribe * soap_new_set___tev__Subscribe(
	struct soap *soap,
	_wsnt__Subscribe *wsnt__Subscribe)
{
	struct __tev__Subscribe *_p = ::soap_new___tev__Subscribe(soap);
	if (_p)
	{	::soap_default___tev__Subscribe(soap, _p);
		_p->wsnt__Subscribe = wsnt__Subscribe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Subscribe(struct soap*, const struct __tev__Subscribe *, const char*, const char*);

inline int soap_write___tev__Subscribe(struct soap *soap, struct __tev__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Subscribe(soap, p), 0) || ::soap_put___tev__Subscribe(soap, p, "-tev:Subscribe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Subscribe(struct soap *soap, const char *URL, struct __tev__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Subscribe(soap, p), 0) || ::soap_put___tev__Subscribe(soap, p, "-tev:Subscribe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Subscribe(struct soap *soap, const char *URL, struct __tev__Subscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Subscribe(soap, p), 0) || ::soap_put___tev__Subscribe(soap, p, "-tev:Subscribe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Subscribe * SOAP_FMAC4 soap_get___tev__Subscribe(struct soap*, struct __tev__Subscribe *, const char*, const char*);

inline int soap_read___tev__Subscribe(struct soap *soap, struct __tev__Subscribe *p)
{
	if (p)
	{	::soap_default___tev__Subscribe(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Subscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Subscribe(struct soap *soap, const char *URL, struct __tev__Subscribe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Subscribe(struct soap *soap, struct __tev__Subscribe *p)
{
	if (::soap_read___tev__Subscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe__DEFINED
#define SOAP_TYPE___tev__Unsubscribe__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Unsubscribe_(struct soap*, struct __tev__Unsubscribe_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Unsubscribe_(struct soap*, const struct __tev__Unsubscribe_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Unsubscribe_(struct soap*, const char*, int, const struct __tev__Unsubscribe_ *, const char*);
SOAP_FMAC3 struct __tev__Unsubscribe_ * SOAP_FMAC4 soap_in___tev__Unsubscribe_(struct soap*, const char*, struct __tev__Unsubscribe_ *, const char*);
SOAP_FMAC1 struct __tev__Unsubscribe_ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe_(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Unsubscribe_ * soap_new___tev__Unsubscribe_(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Unsubscribe_(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Unsubscribe_ * soap_new_req___tev__Unsubscribe_(
	struct soap *soap)
{
	struct __tev__Unsubscribe_ *_p = ::soap_new___tev__Unsubscribe_(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe_(soap, _p);
	}
	return _p;
}

inline struct __tev__Unsubscribe_ * soap_new_set___tev__Unsubscribe_(
	struct soap *soap,
	_wsnt__Unsubscribe *wsnt__Unsubscribe)
{
	struct __tev__Unsubscribe_ *_p = ::soap_new___tev__Unsubscribe_(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe_(soap, _p);
		_p->wsnt__Unsubscribe = wsnt__Unsubscribe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Unsubscribe_(struct soap*, const struct __tev__Unsubscribe_ *, const char*, const char*);

inline int soap_write___tev__Unsubscribe_(struct soap *soap, struct __tev__Unsubscribe_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Unsubscribe_(soap, p), 0) || ::soap_put___tev__Unsubscribe_(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Unsubscribe_(struct soap *soap, const char *URL, struct __tev__Unsubscribe_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe_(soap, p), 0) || ::soap_put___tev__Unsubscribe_(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Unsubscribe_(struct soap *soap, const char *URL, struct __tev__Unsubscribe_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe_(soap, p), 0) || ::soap_put___tev__Unsubscribe_(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Unsubscribe_ * SOAP_FMAC4 soap_get___tev__Unsubscribe_(struct soap*, struct __tev__Unsubscribe_ *, const char*, const char*);

inline int soap_read___tev__Unsubscribe_(struct soap *soap, struct __tev__Unsubscribe_ *p)
{
	if (p)
	{	::soap_default___tev__Unsubscribe_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Unsubscribe_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Unsubscribe_(struct soap *soap, const char *URL, struct __tev__Unsubscribe_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Unsubscribe_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Unsubscribe_(struct soap *soap, struct __tev__Unsubscribe_ *p)
{
	if (::soap_read___tev__Unsubscribe_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Renew_DEFINED
#define SOAP_TYPE___tev__Renew_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Renew(struct soap*, struct __tev__Renew *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Renew(struct soap*, const struct __tev__Renew *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Renew(struct soap*, const char*, int, const struct __tev__Renew *, const char*);
SOAP_FMAC3 struct __tev__Renew * SOAP_FMAC4 soap_in___tev__Renew(struct soap*, const char*, struct __tev__Renew *, const char*);
SOAP_FMAC1 struct __tev__Renew * SOAP_FMAC2 soap_instantiate___tev__Renew(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Renew * soap_new___tev__Renew(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Renew(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Renew * soap_new_req___tev__Renew(
	struct soap *soap)
{
	struct __tev__Renew *_p = ::soap_new___tev__Renew(soap);
	if (_p)
	{	::soap_default___tev__Renew(soap, _p);
	}
	return _p;
}

inline struct __tev__Renew * soap_new_set___tev__Renew(
	struct soap *soap,
	_wsnt__Renew *wsnt__Renew)
{
	struct __tev__Renew *_p = ::soap_new___tev__Renew(soap);
	if (_p)
	{	::soap_default___tev__Renew(soap, _p);
		_p->wsnt__Renew = wsnt__Renew;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Renew(struct soap*, const struct __tev__Renew *, const char*, const char*);

inline int soap_write___tev__Renew(struct soap *soap, struct __tev__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Renew(soap, p), 0) || ::soap_put___tev__Renew(soap, p, "-tev:Renew", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Renew(struct soap *soap, const char *URL, struct __tev__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Renew(soap, p), 0) || ::soap_put___tev__Renew(soap, p, "-tev:Renew", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Renew(struct soap *soap, const char *URL, struct __tev__Renew const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Renew(soap, p), 0) || ::soap_put___tev__Renew(soap, p, "-tev:Renew", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Renew * SOAP_FMAC4 soap_get___tev__Renew(struct soap*, struct __tev__Renew *, const char*, const char*);

inline int soap_read___tev__Renew(struct soap *soap, struct __tev__Renew *p)
{
	if (p)
	{	::soap_default___tev__Renew(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Renew(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Renew(struct soap *soap, const char *URL, struct __tev__Renew *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Renew(struct soap *soap, struct __tev__Renew *p)
{
	if (::soap_read___tev__Renew(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__GetEventProperties_DEFINED
#define SOAP_TYPE___tev__GetEventProperties_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__GetEventProperties(struct soap*, struct __tev__GetEventProperties *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__GetEventProperties(struct soap*, const struct __tev__GetEventProperties *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__GetEventProperties(struct soap*, const char*, int, const struct __tev__GetEventProperties *, const char*);
SOAP_FMAC3 struct __tev__GetEventProperties * SOAP_FMAC4 soap_in___tev__GetEventProperties(struct soap*, const char*, struct __tev__GetEventProperties *, const char*);
SOAP_FMAC1 struct __tev__GetEventProperties * SOAP_FMAC2 soap_instantiate___tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__GetEventProperties * soap_new___tev__GetEventProperties(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__GetEventProperties(soap, n, NULL, NULL, NULL);
}

inline struct __tev__GetEventProperties * soap_new_req___tev__GetEventProperties(
	struct soap *soap)
{
	struct __tev__GetEventProperties *_p = ::soap_new___tev__GetEventProperties(soap);
	if (_p)
	{	::soap_default___tev__GetEventProperties(soap, _p);
	}
	return _p;
}

inline struct __tev__GetEventProperties * soap_new_set___tev__GetEventProperties(
	struct soap *soap,
	_tev__GetEventProperties *tev__GetEventProperties)
{
	struct __tev__GetEventProperties *_p = ::soap_new___tev__GetEventProperties(soap);
	if (_p)
	{	::soap_default___tev__GetEventProperties(soap, _p);
		_p->tev__GetEventProperties = tev__GetEventProperties;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__GetEventProperties(struct soap*, const struct __tev__GetEventProperties *, const char*, const char*);

inline int soap_write___tev__GetEventProperties(struct soap *soap, struct __tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__GetEventProperties(soap, p), 0) || ::soap_put___tev__GetEventProperties(soap, p, "-tev:GetEventProperties", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__GetEventProperties(struct soap *soap, const char *URL, struct __tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetEventProperties(soap, p), 0) || ::soap_put___tev__GetEventProperties(soap, p, "-tev:GetEventProperties", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__GetEventProperties(struct soap *soap, const char *URL, struct __tev__GetEventProperties const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetEventProperties(soap, p), 0) || ::soap_put___tev__GetEventProperties(soap, p, "-tev:GetEventProperties", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__GetEventProperties * SOAP_FMAC4 soap_get___tev__GetEventProperties(struct soap*, struct __tev__GetEventProperties *, const char*, const char*);

inline int soap_read___tev__GetEventProperties(struct soap *soap, struct __tev__GetEventProperties *p)
{
	if (p)
	{	::soap_default___tev__GetEventProperties(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__GetEventProperties(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__GetEventProperties(struct soap *soap, const char *URL, struct __tev__GetEventProperties *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__GetEventProperties(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__GetEventProperties(struct soap *soap, struct __tev__GetEventProperties *p)
{
	if (::soap_read___tev__GetEventProperties(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__CreatePullPointSubscription_DEFINED
#define SOAP_TYPE___tev__CreatePullPointSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__CreatePullPointSubscription(struct soap*, struct __tev__CreatePullPointSubscription *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__CreatePullPointSubscription(struct soap*, const struct __tev__CreatePullPointSubscription *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__CreatePullPointSubscription(struct soap*, const char*, int, const struct __tev__CreatePullPointSubscription *, const char*);
SOAP_FMAC3 struct __tev__CreatePullPointSubscription * SOAP_FMAC4 soap_in___tev__CreatePullPointSubscription(struct soap*, const char*, struct __tev__CreatePullPointSubscription *, const char*);
SOAP_FMAC1 struct __tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate___tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__CreatePullPointSubscription * soap_new___tev__CreatePullPointSubscription(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__CreatePullPointSubscription(soap, n, NULL, NULL, NULL);
}

inline struct __tev__CreatePullPointSubscription * soap_new_req___tev__CreatePullPointSubscription(
	struct soap *soap)
{
	struct __tev__CreatePullPointSubscription *_p = ::soap_new___tev__CreatePullPointSubscription(soap);
	if (_p)
	{	::soap_default___tev__CreatePullPointSubscription(soap, _p);
	}
	return _p;
}

inline struct __tev__CreatePullPointSubscription * soap_new_set___tev__CreatePullPointSubscription(
	struct soap *soap,
	_tev__CreatePullPointSubscription *tev__CreatePullPointSubscription)
{
	struct __tev__CreatePullPointSubscription *_p = ::soap_new___tev__CreatePullPointSubscription(soap);
	if (_p)
	{	::soap_default___tev__CreatePullPointSubscription(soap, _p);
		_p->tev__CreatePullPointSubscription = tev__CreatePullPointSubscription;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__CreatePullPointSubscription(struct soap*, const struct __tev__CreatePullPointSubscription *, const char*, const char*);

inline int soap_write___tev__CreatePullPointSubscription(struct soap *soap, struct __tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__CreatePullPointSubscription(soap, p), 0) || ::soap_put___tev__CreatePullPointSubscription(soap, p, "-tev:CreatePullPointSubscription", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__CreatePullPointSubscription(struct soap *soap, const char *URL, struct __tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__CreatePullPointSubscription(soap, p), 0) || ::soap_put___tev__CreatePullPointSubscription(soap, p, "-tev:CreatePullPointSubscription", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__CreatePullPointSubscription(struct soap *soap, const char *URL, struct __tev__CreatePullPointSubscription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__CreatePullPointSubscription(soap, p), 0) || ::soap_put___tev__CreatePullPointSubscription(soap, p, "-tev:CreatePullPointSubscription", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__CreatePullPointSubscription * SOAP_FMAC4 soap_get___tev__CreatePullPointSubscription(struct soap*, struct __tev__CreatePullPointSubscription *, const char*, const char*);

inline int soap_read___tev__CreatePullPointSubscription(struct soap *soap, struct __tev__CreatePullPointSubscription *p)
{
	if (p)
	{	::soap_default___tev__CreatePullPointSubscription(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__CreatePullPointSubscription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__CreatePullPointSubscription(struct soap *soap, const char *URL, struct __tev__CreatePullPointSubscription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__CreatePullPointSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__CreatePullPointSubscription(struct soap *soap, struct __tev__CreatePullPointSubscription *p)
{
	if (::soap_read___tev__CreatePullPointSubscription(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tev__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__GetServiceCapabilities(struct soap*, struct __tev__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__GetServiceCapabilities(struct soap*, const struct __tev__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__GetServiceCapabilities(struct soap*, const char*, int, const struct __tev__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tev__GetServiceCapabilities * SOAP_FMAC4 soap_in___tev__GetServiceCapabilities(struct soap*, const char*, struct __tev__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__GetServiceCapabilities * soap_new___tev__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tev__GetServiceCapabilities * soap_new_req___tev__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tev__GetServiceCapabilities *_p = ::soap_new___tev__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tev__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tev__GetServiceCapabilities * soap_new_set___tev__GetServiceCapabilities(
	struct soap *soap,
	_tev__GetServiceCapabilities *tev__GetServiceCapabilities)
{
	struct __tev__GetServiceCapabilities *_p = ::soap_new___tev__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tev__GetServiceCapabilities(soap, _p);
		_p->tev__GetServiceCapabilities = tev__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__GetServiceCapabilities(struct soap*, const struct __tev__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tev__GetServiceCapabilities(struct soap *soap, struct __tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__GetServiceCapabilities(soap, p), 0) || ::soap_put___tev__GetServiceCapabilities(soap, p, "-tev:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetServiceCapabilities(soap, p), 0) || ::soap_put___tev__GetServiceCapabilities(soap, p, "-tev:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tev__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__GetServiceCapabilities(soap, p), 0) || ::soap_put___tev__GetServiceCapabilities(soap, p, "-tev:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__GetServiceCapabilities * SOAP_FMAC4 soap_get___tev__GetServiceCapabilities(struct soap*, struct __tev__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tev__GetServiceCapabilities(struct soap *soap, struct __tev__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___tev__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tev__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__GetServiceCapabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__GetServiceCapabilities(struct soap *soap, struct __tev__GetServiceCapabilities *p)
{
	if (::soap_read___tev__GetServiceCapabilities(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe_DEFINED
#define SOAP_TYPE___tev__Unsubscribe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Unsubscribe(struct soap*, struct __tev__Unsubscribe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Unsubscribe(struct soap*, const struct __tev__Unsubscribe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Unsubscribe(struct soap*, const char*, int, const struct __tev__Unsubscribe *, const char*);
SOAP_FMAC3 struct __tev__Unsubscribe * SOAP_FMAC4 soap_in___tev__Unsubscribe(struct soap*, const char*, struct __tev__Unsubscribe *, const char*);
SOAP_FMAC1 struct __tev__Unsubscribe * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Unsubscribe * soap_new___tev__Unsubscribe(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Unsubscribe(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Unsubscribe * soap_new_req___tev__Unsubscribe(
	struct soap *soap)
{
	struct __tev__Unsubscribe *_p = ::soap_new___tev__Unsubscribe(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe(soap, _p);
	}
	return _p;
}

inline struct __tev__Unsubscribe * soap_new_set___tev__Unsubscribe(
	struct soap *soap,
	_wsnt__Unsubscribe *wsnt__Unsubscribe)
{
	struct __tev__Unsubscribe *_p = ::soap_new___tev__Unsubscribe(soap);
	if (_p)
	{	::soap_default___tev__Unsubscribe(soap, _p);
		_p->wsnt__Unsubscribe = wsnt__Unsubscribe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Unsubscribe(struct soap*, const struct __tev__Unsubscribe *, const char*, const char*);

inline int soap_write___tev__Unsubscribe(struct soap *soap, struct __tev__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Unsubscribe(soap, p), 0) || ::soap_put___tev__Unsubscribe(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Unsubscribe(struct soap *soap, const char *URL, struct __tev__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe(soap, p), 0) || ::soap_put___tev__Unsubscribe(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Unsubscribe(struct soap *soap, const char *URL, struct __tev__Unsubscribe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Unsubscribe(soap, p), 0) || ::soap_put___tev__Unsubscribe(soap, p, "-tev:Unsubscribe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Unsubscribe * SOAP_FMAC4 soap_get___tev__Unsubscribe(struct soap*, struct __tev__Unsubscribe *, const char*, const char*);

inline int soap_read___tev__Unsubscribe(struct soap *soap, struct __tev__Unsubscribe *p)
{
	if (p)
	{	::soap_default___tev__Unsubscribe(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Unsubscribe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Unsubscribe(struct soap *soap, const char *URL, struct __tev__Unsubscribe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Unsubscribe(struct soap *soap, struct __tev__Unsubscribe *p)
{
	if (::soap_read___tev__Unsubscribe(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE___tev__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__SetSynchronizationPoint(struct soap*, struct __tev__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__SetSynchronizationPoint(struct soap*, const struct __tev__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__SetSynchronizationPoint(struct soap*, const char*, int, const struct __tev__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __tev__SetSynchronizationPoint * SOAP_FMAC4 soap_in___tev__SetSynchronizationPoint(struct soap*, const char*, struct __tev__SetSynchronizationPoint *, const char*);
SOAP_FMAC1 struct __tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__SetSynchronizationPoint * soap_new___tev__SetSynchronizationPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__SetSynchronizationPoint(soap, n, NULL, NULL, NULL);
}

inline struct __tev__SetSynchronizationPoint * soap_new_req___tev__SetSynchronizationPoint(
	struct soap *soap)
{
	struct __tev__SetSynchronizationPoint *_p = ::soap_new___tev__SetSynchronizationPoint(soap);
	if (_p)
	{	::soap_default___tev__SetSynchronizationPoint(soap, _p);
	}
	return _p;
}

inline struct __tev__SetSynchronizationPoint * soap_new_set___tev__SetSynchronizationPoint(
	struct soap *soap,
	_tev__SetSynchronizationPoint *tev__SetSynchronizationPoint)
{
	struct __tev__SetSynchronizationPoint *_p = ::soap_new___tev__SetSynchronizationPoint(soap);
	if (_p)
	{	::soap_default___tev__SetSynchronizationPoint(soap, _p);
		_p->tev__SetSynchronizationPoint = tev__SetSynchronizationPoint;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__SetSynchronizationPoint(struct soap*, const struct __tev__SetSynchronizationPoint *, const char*, const char*);

inline int soap_write___tev__SetSynchronizationPoint(struct soap *soap, struct __tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__SetSynchronizationPoint(soap, p), 0) || ::soap_put___tev__SetSynchronizationPoint(soap, p, "-tev:SetSynchronizationPoint", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__SetSynchronizationPoint(soap, p), 0) || ::soap_put___tev__SetSynchronizationPoint(soap, p, "-tev:SetSynchronizationPoint", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __tev__SetSynchronizationPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__SetSynchronizationPoint(soap, p), 0) || ::soap_put___tev__SetSynchronizationPoint(soap, p, "-tev:SetSynchronizationPoint", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__SetSynchronizationPoint * SOAP_FMAC4 soap_get___tev__SetSynchronizationPoint(struct soap*, struct __tev__SetSynchronizationPoint *, const char*, const char*);

inline int soap_read___tev__SetSynchronizationPoint(struct soap *soap, struct __tev__SetSynchronizationPoint *p)
{
	if (p)
	{	::soap_default___tev__SetSynchronizationPoint(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__SetSynchronizationPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__SetSynchronizationPoint(struct soap *soap, const char *URL, struct __tev__SetSynchronizationPoint *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__SetSynchronizationPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__SetSynchronizationPoint(struct soap *soap, struct __tev__SetSynchronizationPoint *p)
{
	if (::soap_read___tev__SetSynchronizationPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__Seek_DEFINED
#define SOAP_TYPE___tev__Seek_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__Seek(struct soap*, struct __tev__Seek *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__Seek(struct soap*, const struct __tev__Seek *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__Seek(struct soap*, const char*, int, const struct __tev__Seek *, const char*);
SOAP_FMAC3 struct __tev__Seek * SOAP_FMAC4 soap_in___tev__Seek(struct soap*, const char*, struct __tev__Seek *, const char*);
SOAP_FMAC1 struct __tev__Seek * SOAP_FMAC2 soap_instantiate___tev__Seek(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__Seek * soap_new___tev__Seek(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__Seek(soap, n, NULL, NULL, NULL);
}

inline struct __tev__Seek * soap_new_req___tev__Seek(
	struct soap *soap)
{
	struct __tev__Seek *_p = ::soap_new___tev__Seek(soap);
	if (_p)
	{	::soap_default___tev__Seek(soap, _p);
	}
	return _p;
}

inline struct __tev__Seek * soap_new_set___tev__Seek(
	struct soap *soap,
	_tev__Seek *tev__Seek)
{
	struct __tev__Seek *_p = ::soap_new___tev__Seek(soap);
	if (_p)
	{	::soap_default___tev__Seek(soap, _p);
		_p->tev__Seek = tev__Seek;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__Seek(struct soap*, const struct __tev__Seek *, const char*, const char*);

inline int soap_write___tev__Seek(struct soap *soap, struct __tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__Seek(soap, p), 0) || ::soap_put___tev__Seek(soap, p, "-tev:Seek", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__Seek(struct soap *soap, const char *URL, struct __tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Seek(soap, p), 0) || ::soap_put___tev__Seek(soap, p, "-tev:Seek", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__Seek(struct soap *soap, const char *URL, struct __tev__Seek const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__Seek(soap, p), 0) || ::soap_put___tev__Seek(soap, p, "-tev:Seek", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__Seek * SOAP_FMAC4 soap_get___tev__Seek(struct soap*, struct __tev__Seek *, const char*, const char*);

inline int soap_read___tev__Seek(struct soap *soap, struct __tev__Seek *p)
{
	if (p)
	{	::soap_default___tev__Seek(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__Seek(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__Seek(struct soap *soap, const char *URL, struct __tev__Seek *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__Seek(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__Seek(struct soap *soap, struct __tev__Seek *p)
{
	if (::soap_read___tev__Seek(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___tev__PullMessages_DEFINED
#define SOAP_TYPE___tev__PullMessages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tev__PullMessages(struct soap*, struct __tev__PullMessages *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tev__PullMessages(struct soap*, const struct __tev__PullMessages *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tev__PullMessages(struct soap*, const char*, int, const struct __tev__PullMessages *, const char*);
SOAP_FMAC3 struct __tev__PullMessages * SOAP_FMAC4 soap_in___tev__PullMessages(struct soap*, const char*, struct __tev__PullMessages *, const char*);
SOAP_FMAC1 struct __tev__PullMessages * SOAP_FMAC2 soap_instantiate___tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);

inline struct __tev__PullMessages * soap_new___tev__PullMessages(struct soap *soap, int n = -1)
{
	return soap_instantiate___tev__PullMessages(soap, n, NULL, NULL, NULL);
}

inline struct __tev__PullMessages * soap_new_req___tev__PullMessages(
	struct soap *soap)
{
	struct __tev__PullMessages *_p = ::soap_new___tev__PullMessages(soap);
	if (_p)
	{	::soap_default___tev__PullMessages(soap, _p);
	}
	return _p;
}

inline struct __tev__PullMessages * soap_new_set___tev__PullMessages(
	struct soap *soap,
	_tev__PullMessages *tev__PullMessages)
{
	struct __tev__PullMessages *_p = ::soap_new___tev__PullMessages(soap);
	if (_p)
	{	::soap_default___tev__PullMessages(soap, _p);
		_p->tev__PullMessages = tev__PullMessages;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tev__PullMessages(struct soap*, const struct __tev__PullMessages *, const char*, const char*);

inline int soap_write___tev__PullMessages(struct soap *soap, struct __tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tev__PullMessages(soap, p), 0) || ::soap_put___tev__PullMessages(soap, p, "-tev:PullMessages", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tev__PullMessages(struct soap *soap, const char *URL, struct __tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__PullMessages(soap, p), 0) || ::soap_put___tev__PullMessages(soap, p, "-tev:PullMessages", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tev__PullMessages(struct soap *soap, const char *URL, struct __tev__PullMessages const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tev__PullMessages(soap, p), 0) || ::soap_put___tev__PullMessages(soap, p, "-tev:PullMessages", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tev__PullMessages * SOAP_FMAC4 soap_get___tev__PullMessages(struct soap*, struct __tev__PullMessages *, const char*, const char*);

inline int soap_read___tev__PullMessages(struct soap *soap, struct __tev__PullMessages *p)
{
	if (p)
	{	::soap_default___tev__PullMessages(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tev__PullMessages(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tev__PullMessages(struct soap *soap, const char *URL, struct __tev__PullMessages *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tev__PullMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___tev__PullMessages(struct soap *soap, struct __tev__PullMessages *p)
{
	if (::soap_read___tev__PullMessages(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wsnt__ProducerReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsnt__ProducerReference_DEFINED
#define SOAP_TYPE__wsnt__ProducerReference_DEFINED

#define soap_default__wsnt__ProducerReference soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsnt__ProducerReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsnt__ProducerReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsnt__ProducerReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsnt__ProducerReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsnt__ProducerReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsnt__ProducerReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsnt__ProducerReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsnt__ProducerReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsnt__ProducerReference soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsnt__ProducerReference soap_put_wsa5__EndpointReferenceType


#define soap_write__wsnt__ProducerReference soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsnt__ProducerReference soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsnt__ProducerReference soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsnt__ProducerReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsnt__ProducerReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsnt__ProducerReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsnt__ProducerReference soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsnt__SubscriptionReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsnt__SubscriptionReference_DEFINED
#define SOAP_TYPE__wsnt__SubscriptionReference_DEFINED

#define soap_default__wsnt__SubscriptionReference soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsnt__SubscriptionReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsnt__SubscriptionReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsnt__SubscriptionReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsnt__SubscriptionReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsnt__SubscriptionReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsnt__SubscriptionReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsnt__SubscriptionReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsnt__SubscriptionReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsnt__SubscriptionReference soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsnt__SubscriptionReference soap_put_wsa5__EndpointReferenceType


#define soap_write__wsnt__SubscriptionReference soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsnt__SubscriptionReference soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsnt__SubscriptionReference soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsnt__SubscriptionReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsnt__SubscriptionReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsnt__SubscriptionReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsnt__SubscriptionReference soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsnt__ConsumerReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsnt__ConsumerReference_DEFINED
#define SOAP_TYPE__wsnt__ConsumerReference_DEFINED

#define soap_default__wsnt__ConsumerReference soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsnt__ConsumerReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsnt__ConsumerReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsnt__ConsumerReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsnt__ConsumerReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsnt__ConsumerReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsnt__ConsumerReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsnt__ConsumerReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsnt__ConsumerReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsnt__ConsumerReference soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsnt__ConsumerReference soap_put_wsa5__EndpointReferenceType


#define soap_write__wsnt__ConsumerReference soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsnt__ConsumerReference soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsnt__ConsumerReference soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsnt__ConsumerReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsnt__ConsumerReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsnt__ConsumerReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsnt__ConsumerReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault,
	wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault,
	wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault,
	wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault,
	wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault,
	wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault,
	wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault,
	wsnt__PauseFailedFaultType *wsnt__PauseFailedFault,
	_tev__PullMessagesFaultResponse *tev__PullMessagesFaultResponse,
	wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault,
	wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault,
	wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault,
	wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault,
	wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault,
	wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault,
	wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault,
	wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault,
	wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault,
	wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault,
	wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault,
	wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault,
	wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->wsnt__InvalidFilterFault = wsnt__InvalidFilterFault;
		_p->wsnt__InvalidMessageContentExpressionFault = wsnt__InvalidMessageContentExpressionFault;
		_p->wsnt__InvalidProducerPropertiesExpressionFault = wsnt__InvalidProducerPropertiesExpressionFault;
		_p->wsnt__InvalidTopicExpressionFault = wsnt__InvalidTopicExpressionFault;
		_p->wsnt__MultipleTopicsSpecifiedFault = wsnt__MultipleTopicsSpecifiedFault;
		_p->wsnt__NoCurrentMessageOnTopicFault = wsnt__NoCurrentMessageOnTopicFault;
		_p->wsnt__NotifyMessageNotSupportedFault = wsnt__NotifyMessageNotSupportedFault;
		_p->wsnt__PauseFailedFault = wsnt__PauseFailedFault;
		_p->tev__PullMessagesFaultResponse = tev__PullMessagesFaultResponse;
		_p->wsrfr__ResourceUnknownFault = wsrfr__ResourceUnknownFault;
		_p->wsnt__ResumeFailedFault = wsnt__ResumeFailedFault;
		_p->wsnt__SubscribeCreationFailedFault = wsnt__SubscribeCreationFailedFault;
		_p->wsnt__TopicExpressionDialectUnknownFault = wsnt__TopicExpressionDialectUnknownFault;
		_p->wsnt__TopicNotSupportedFault = wsnt__TopicNotSupportedFault;
		_p->wsnt__UnableToCreatePullPointFault = wsnt__UnableToCreatePullPointFault;
		_p->wsnt__UnableToDestroyPullPointFault = wsnt__UnableToDestroyPullPointFault;
		_p->wsnt__UnableToDestroySubscriptionFault = wsnt__UnableToDestroySubscriptionFault;
		_p->wsnt__UnableToGetMessagesFault = wsnt__UnableToGetMessagesFault;
		_p->wsnt__UnacceptableInitialTerminationTimeFault = wsnt__UnacceptableInitialTerminationTimeFault;
		_p->wsnt__UnacceptableTerminationTimeFault = wsnt__UnacceptableTerminationTimeFault;
		_p->wsnt__UnrecognizedPolicyRequestFault = wsnt__UnrecognizedPolicyRequestFault;
		_p->wsnt__UnsupportedPolicyRequestFault = wsnt__UnsupportedPolicyRequestFault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType


#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType


#define soap_put__wsa5__ProblemAction soap_put_wsa5__ProblemActionType


#define soap_write__wsa5__ProblemAction soap_write_wsa5__ProblemActionType


#define soap_PUT__wsa5__ProblemAction soap_PUT_wsa5__ProblemActionType


#define soap_POST_send__wsa5__ProblemAction soap_POST_send_wsa5__ProblemActionType


#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__FaultTo soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__FaultTo soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsa5__FaultTo soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsa5__FaultTo soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__From soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__From soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsa5__From soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsa5__From soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__ReplyTo soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__ReplyTo soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsa5__ReplyTo soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsa5__ReplyTo soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType


#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType


#define soap_put__wsa5__RelatesTo soap_put_wsa5__RelatesToType


#define soap_write__wsa5__RelatesTo soap_write_wsa5__RelatesToType


#define soap_PUT__wsa5__RelatesTo soap_PUT_wsa5__RelatesToType


#define soap_POST_send__wsa5__RelatesTo soap_POST_send_wsa5__RelatesToType


#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType


#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType


#define soap_put__wsa5__Metadata soap_put_wsa5__MetadataType


#define soap_write__wsa5__Metadata soap_write_wsa5__MetadataType


#define soap_PUT__wsa5__Metadata soap_PUT_wsa5__MetadataType


#define soap_POST_send__wsa5__Metadata soap_POST_send_wsa5__MetadataType


#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType


#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType


#define soap_put__wsa5__ReferenceParameters soap_put_wsa5__ReferenceParametersType


#define soap_write__wsa5__ReferenceParameters soap_write_wsa5__ReferenceParametersType


#define soap_PUT__wsa5__ReferenceParameters soap_PUT_wsa5__ReferenceParametersType


#define soap_POST_send__wsa5__ReferenceParameters soap_POST_send_wsa5__ReferenceParametersType


#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType


#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType


#define soap_put__wsa5__EndpointReference soap_put_wsa5__EndpointReferenceType


#define soap_write__wsa5__EndpointReference soap_write_wsa5__EndpointReferenceType


#define soap_PUT__wsa5__EndpointReference soap_PUT_wsa5__EndpointReferenceType


#define soap_POST_send__wsa5__EndpointReference soap_POST_send_wsa5__EndpointReferenceType


#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__ResumeSubscription_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__ResumeSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__ResumeSubscription(struct soap*, const char *, int, _wsnt__ResumeSubscription *const*, const char *);
SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__PauseSubscription_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__PauseSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__PauseSubscription(struct soap*, const char *, int, _wsnt__PauseSubscription *const*, const char *);
SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_in_PointerTo_wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__PauseSubscription ** SOAP_FMAC4 soap_get_PointerTo_wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__CreatePullPoint_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__CreatePullPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__CreatePullPoint(struct soap*, const char *, int, _wsnt__CreatePullPoint *const*, const char *);
SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__CreatePullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__DestroyPullPoint(struct soap*, const char *, int, _wsnt__DestroyPullPoint *const*, const char *);
SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_in_PointerTo_wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPoint ** SOAP_FMAC4 soap_get_PointerTo_wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__GetMessages_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__GetMessages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetMessages(struct soap*, const char *, int, _wsnt__GetMessages *const*, const char *);
SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__GetMessages ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetMessages(struct soap*, _wsnt__GetMessages **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Notify_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Notify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Notify(struct soap*, const char *, int, _wsnt__Notify *const*, const char *);
SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Notify(struct soap*, const char*, _wsnt__Notify **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Notify ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Notify(struct soap*, _wsnt__Notify **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__GetCurrentMessage(struct soap*, const char *, int, _wsnt__GetCurrentMessage *const*, const char *);
SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_in_PointerTo_wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessage ** SOAP_FMAC4 soap_get_PointerTo_wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe(struct soap*, const char *, int, _wsnt__Subscribe *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Subscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe(struct soap*, _wsnt__Subscribe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Renew_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Renew_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Renew(struct soap*, const char *, int, _wsnt__Renew *const*, const char *);
SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Renew(struct soap*, const char*, _wsnt__Renew **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Renew ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Renew(struct soap*, _wsnt__Renew **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__GetEventProperties_DEFINED
#define SOAP_TYPE_PointerTo_tev__GetEventProperties_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__GetEventProperties(struct soap*, _tev__GetEventProperties *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__GetEventProperties(struct soap*, const char *, int, _tev__GetEventProperties *const*, const char *);
SOAP_FMAC3 _tev__GetEventProperties ** SOAP_FMAC4 soap_in_PointerTo_tev__GetEventProperties(struct soap*, const char*, _tev__GetEventProperties **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__GetEventProperties(struct soap*, _tev__GetEventProperties *const*, const char*, const char*);
SOAP_FMAC3 _tev__GetEventProperties ** SOAP_FMAC4 soap_get_PointerTo_tev__GetEventProperties(struct soap*, _tev__GetEventProperties **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_DEFINED
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__CreatePullPointSubscription(struct soap*, const char *, int, _tev__CreatePullPointSubscription *const*, const char *);
SOAP_FMAC3 _tev__CreatePullPointSubscription ** SOAP_FMAC4 soap_in_PointerTo_tev__CreatePullPointSubscription(struct soap*, const char*, _tev__CreatePullPointSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription *const*, const char*, const char*);
SOAP_FMAC3 _tev__CreatePullPointSubscription ** SOAP_FMAC4 soap_get_PointerTo_tev__CreatePullPointSubscription(struct soap*, _tev__CreatePullPointSubscription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tev__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__GetServiceCapabilities(struct soap*, const char *, int, _tev__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tev__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tev__GetServiceCapabilities(struct soap*, const char*, _tev__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tev__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tev__GetServiceCapabilities(struct soap*, _tev__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Unsubscribe_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Unsubscribe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Unsubscribe(struct soap*, const char *, int, _wsnt__Unsubscribe *const*, const char *);
SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Unsubscribe ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint_DEFINED
#define SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__SetSynchronizationPoint(struct soap*, const char *, int, _tev__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _tev__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_tev__SetSynchronizationPoint(struct soap*, const char*, _tev__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint *const*, const char*, const char*);
SOAP_FMAC3 _tev__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_tev__SetSynchronizationPoint(struct soap*, _tev__SetSynchronizationPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__Seek_DEFINED
#define SOAP_TYPE_PointerTo_tev__Seek_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__Seek(struct soap*, _tev__Seek *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__Seek(struct soap*, const char *, int, _tev__Seek *const*, const char *);
SOAP_FMAC3 _tev__Seek ** SOAP_FMAC4 soap_in_PointerTo_tev__Seek(struct soap*, const char*, _tev__Seek **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__Seek(struct soap*, _tev__Seek *const*, const char*, const char*);
SOAP_FMAC3 _tev__Seek ** SOAP_FMAC4 soap_get_PointerTo_tev__Seek(struct soap*, _tev__Seek **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__PullMessages_DEFINED
#define SOAP_TYPE_PointerTo_tev__PullMessages_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__PullMessages(struct soap*, _tev__PullMessages *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__PullMessages(struct soap*, const char *, int, _tev__PullMessages *const*, const char *);
SOAP_FMAC3 _tev__PullMessages ** SOAP_FMAC4 soap_in_PointerTo_tev__PullMessages(struct soap*, const char*, _tev__PullMessages **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__PullMessages(struct soap*, _tev__PullMessages *const*, const char*, const char*);
SOAP_FMAC3 _tev__PullMessages ** SOAP_FMAC4 soap_get_PointerTo_tev__PullMessages(struct soap*, _tev__PullMessages **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char *, int, wsnt__UnsupportedPolicyRequestFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char *, int, wsnt__UnrecognizedPolicyRequestFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char *, int, wsnt__UnacceptableTerminationTimeFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char *, int, wsnt__UnacceptableInitialTerminationTimeFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, const char *, int, wsnt__UnableToGetMessagesFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char *, int, wsnt__UnableToDestroySubscriptionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, const char *, int, wsnt__UnableToDestroyPullPointFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, const char *, int, wsnt__UnableToCreatePullPointFaultType *const*, const char *);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, const char *, int, wsnt__TopicNotSupportedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char *, int, wsnt__TopicExpressionDialectUnknownFaultType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, const char *, int, wsnt__SubscribeCreationFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__ResumeFailedFaultType(struct soap*, const char *, int, wsnt__ResumeFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__ResumeFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType_DEFINED
#define SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, const char *, int, wsrfr__ResourceUnknownFaultType *const*, const char *);
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_in_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, const char*, wsrfr__ResourceUnknownFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsrfr__ResourceUnknownFaultType ** SOAP_FMAC4 soap_get_PointerTowsrfr__ResourceUnknownFaultType(struct soap*, wsrfr__ResourceUnknownFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse_DEFINED
#define SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__PullMessagesFaultResponse(struct soap*, const char *, int, _tev__PullMessagesFaultResponse *const*, const char *);
SOAP_FMAC3 _tev__PullMessagesFaultResponse ** SOAP_FMAC4 soap_in_PointerTo_tev__PullMessagesFaultResponse(struct soap*, const char*, _tev__PullMessagesFaultResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse *const*, const char*, const char*);
SOAP_FMAC3 _tev__PullMessagesFaultResponse ** SOAP_FMAC4 soap_get_PointerTo_tev__PullMessagesFaultResponse(struct soap*, _tev__PullMessagesFaultResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__PauseFailedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__PauseFailedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__PauseFailedFaultType(struct soap*, const char *, int, wsnt__PauseFailedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__PauseFailedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char *, int, wsnt__NotifyMessageNotSupportedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char *, int, wsnt__NoCurrentMessageOnTopicFaultType *const*, const char *);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char *, int, wsnt__MultipleTopicsSpecifiedFaultType *const*, const char *);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidTopicExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidProducerPropertiesExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char *, int, wsnt__InvalidMessageContentExpressionFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType_DEFINED
#define SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__InvalidFilterFaultType(struct soap*, const char *, int, wsnt__InvalidFilterFaultType *const*, const char *);
SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_in_PointerTowsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__InvalidFilterFaultType ** SOAP_FMAC4 soap_get_PointerTowsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__NCName_DEFINED
#define SOAP_TYPE_PointerToxsd__NCName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression_DEFINED
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowstop__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__QName_DEFINED
#define SOAP_TYPE_PointerToxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__TopicType_DEFINED
#define SOAP_TYPE_PointerTowstop__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicType(struct soap*, const char *, int, wstop__TopicType *const*, const char *);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicType(struct soap*, const char*, wstop__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*, const char*, const char*);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicType(struct soap*, wstop__TopicType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType_DEFINED
#define SOAP_TYPE_PointerTowstop__QueryExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__QueryExpressionType(struct soap*, const char *, int, wstop__QueryExpressionType *const*, const char *);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTowstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*, const char*, const char*);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__Documentation_DEFINED
#define SOAP_TYPE_PointerTowstop__Documentation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__Documentation(struct soap*, const char *, int, wstop__Documentation *const*, const char *);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_in_PointerTowstop__Documentation(struct soap*, const char*, wstop__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*, const char*, const char*);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_get_PointerTowstop__Documentation(struct soap*, wstop__Documentation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _wsnt__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType_DEFINED
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char *, int, wsnt__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionType(struct soap*, const char *, int, wsnt__TopicExpressionType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause_DEFINED
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char *, int, _wsrfbf__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*, const char*, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_xml__lang_DEFINED
#define SOAP_TYPE_PointerTo_xml__lang_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode_DEFINED
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char *, int, _wsrfbf__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*, const char*, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowstop__TopicSetType_DEFINED
#define SOAP_TYPE_PointerTowstop__TopicSetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicSetType(struct soap*, const char *, int, wstop__TopicSetType *const*, const char *);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*, const char*, const char*);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char *, int, wsnt__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char *, int, _tev__CreatePullPointSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, const char*, _tev__CreatePullPointSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tev__CreatePullPointSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, _tev__CreatePullPointSubscription_SubscriptionPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType_DEFINED
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
#define SOAP_TYPE_PointerTowsnt__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap*, const char *, int, wsnt__FilterType *const*, const char *);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap*, const char*, wsnt__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*, const char*, const char*);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotev__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotev__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotev__Capabilities(struct soap*, tev__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotev__Capabilities(struct soap*, const char *, int, tev__Capabilities *const*, const char *);
SOAP_FMAC3 tev__Capabilities ** SOAP_FMAC4 soap_in_PointerTotev__Capabilities(struct soap*, const char*, tev__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotev__Capabilities(struct soap*, tev__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tev__Capabilities ** SOAP_FMAC4 soap_get_PointerTotev__Capabilities(struct soap*, tev__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif
/* _tev__ChangedOnly is a typedef synonym of _XML */

#ifndef SOAP_TYPE__tev__ChangedOnly_DEFINED
#define SOAP_TYPE__tev__ChangedOnly_DEFINED
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string


#define soap_put__wsa5__ProblemIRI soap_put_string


#define soap_write__wsa5__ProblemIRI soap_write_string


#define soap_PUT__wsa5__ProblemIRI soap_PUT_string


#define soap_POST_send__wsa5__ProblemIRI soap_POST_send_string


#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string


#define soap_put__wsa5__Action soap_put_string


#define soap_write__wsa5__Action soap_write_string


#define soap_PUT__wsa5__Action soap_PUT_string


#define soap_POST_send__wsa5__Action soap_POST_send_string


#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string


#define soap_put__wsa5__To soap_put_string


#define soap_write__wsa5__To soap_write_string


#define soap_PUT__wsa5__To soap_PUT_string


#define soap_POST_send__wsa5__To soap_POST_send_string


#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string


#define soap_put__wsa5__MessageID soap_put_string


#define soap_write__wsa5__MessageID soap_write_string


#define soap_PUT__wsa5__MessageID soap_PUT_string


#define soap_POST_send__wsa5__MessageID soap_POST_send_string


#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const std::vector<_wstop__TopicNamespaceType_Topic> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_wstop__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic> *, const char*);
SOAP_FMAC1 std::vector<_wstop__TopicNamespaceType_Topic>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wstop__TopicNamespaceType_Topic>  * soap_new_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, std::vector<wstop__TopicType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const std::vector<wstop__TopicType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, int, const std::vector<wstop__TopicType *> *, const char*);
SOAP_FMAC3 std::vector<wstop__TopicType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, std::vector<wstop__TopicType *> *, const char*);
SOAP_FMAC1 std::vector<wstop__TopicType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wstop__TopicType *>  * soap_new_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, std::vector<wsnt__TopicExpressionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const std::vector<wsnt__TopicExpressionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, int, const std::vector<wsnt__TopicExpressionType *> *, const char*);
SOAP_FMAC3 std::vector<wsnt__TopicExpressionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, std::vector<wsnt__TopicExpressionType *> *, const char*);
SOAP_FMAC1 std::vector<wsnt__TopicExpressionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__TopicExpressionType *>  * soap_new_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const std::vector<_wsrfbf__BaseFaultType_Description> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_wsrfbf__BaseFaultType_Description> *, const char*);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description> *, const char*);
SOAP_FMAC1 std::vector<_wsrfbf__BaseFaultType_Description>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wsrfbf__BaseFaultType_Description>  * soap_new_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, std::vector<wsnt__NotificationMessageHolderType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const std::vector<wsnt__NotificationMessageHolderType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<wsnt__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC3 std::vector<wsnt__NotificationMessageHolderType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, std::vector<wsnt__NotificationMessageHolderType *> *, const char*);
SOAP_FMAC1 std::vector<wsnt__NotificationMessageHolderType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__NotificationMessageHolderType *>  * soap_new_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
